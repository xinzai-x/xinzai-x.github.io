<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星仔人生录</title>
  
  <subtitle>珍惜当下 不负此生</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-19T02:03:02.952Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>星仔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>11.SPI通信</title>
    <link href="http://example.com/post/bd740709.html"/>
    <id>http://example.com/post/bd740709.html</id>
    <published>2024-08-17T08:28:32.000Z</published>
    <updated>2024-08-19T02:03:02.952Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SPI理论"><a href="#SPI理论" class="headerlink" title="SPI理论"></a><center>SPI理论</center></h1><p>常规四线：SCLK、CS、MOSI(主向从发)、MISO(从向主发)</p><p>同步、串行、全双工、速率(MHz)</p><p>一主一从、一主多从、不能多主</p><img src="https://s2.loli.net/2024/08/19/IjLng81mSXNrDG7.png" alt="一主多从" style="zoom:50%;"><img src="https://s2.loli.net/2024/08/19/UgsHwTY6L2XlbPo.png" alt="一主多从" style="zoom:50%;"><p>工作模式：</p><ul><li>CPOL<ul><li>0：总线空闲状态时钟为低电平，1：总线空闲状态时钟为高电平</li></ul></li><li>CPHA<ul><li>0：时钟第一个沿对数据采样，1：时钟第二个沿对数据采样</li></ul></li></ul><p>QSPI：相比SPI区别，四个数据线，一个时钟内传输4个bit</p><p>时序：</p><img src="https://s2.loli.net/2024/08/19/VQgSONhEI46pkjb.webp" alt="SPI时序" style="zoom:50%;"><h1 id="网络理论"><a href="#网络理论" class="headerlink" title="网络理论"></a><center>网络理论</center></h1><p>TCP三次握手，四次挥手。参考：<a href="https://blog.csdn.net/weixin_45393094/article/details/104965561?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169864750516800182774327%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=169864750516800182774327&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-104965561-null-null.142%5Ev96%5Epc_search_result_base9&utm_term=%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E8%AF%A6%E8%A7%A3&spm=1018.2226.3001.4187">参考</a></p><p>TCP和UDP区别参考：<a href="https://blog.csdn.net/weixin_45272371/article/details/129378067">链接</a></p><p>网络模型：OSI七层网络模型（<a href="https://blog.csdn.net/troubleshooter/article/details/122376824">链接</a>）、五层网络模型（<a href="https://blog.csdn.net/weixin_44417441/article/details/113769242?spm=1001.2101.3001.6650.3&utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-113769242-blog-123167871.235%5Ev38%5Epc_relevant_sort&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~Rate-3-113769242-blog-123167871.235%5Ev38%5Epc_relevant_sort&utm_relevant_index=6">链接</a>）</p><h2 id="SPI配置"><a href="#SPI配置" class="headerlink" title="SPI配置"></a><center>SPI配置</center></h2><img src="https://s2.loli.net/2024/08/19/dgVC1DXIYscZvpW.webp" alt="SPI配置" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SPI理论&quot;&gt;&lt;a href=&quot;#SPI理论&quot; class=&quot;headerlink&quot; title=&quot;SPI理论&quot;&gt;&lt;/a&gt;&lt;center&gt;SPI理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;常规四线：SCLK、CS、MOSI(主向从发)、MISO(从向主发)&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>10.DMA</title>
    <link href="http://example.com/post/acb77072.html"/>
    <id>http://example.com/post/acb77072.html</id>
    <published>2024-08-16T07:49:08.000Z</published>
    <updated>2024-08-19T02:00:43.380Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>12个通道：DMA1（7）DMA2（5）</p><img src="https://s2.loli.net/2024/08/19/SeZd3kAG2j9FslO.webp" alt="通道" style="zoom:50%;"><p>方向：存储器和存储器间(DMA_MEMORY_TO_MEMORY)、外设到存储器(DMA_PERIPH_TO_MEMORY)、存储器到外设(DMA_MEMORY_TO_PERIPH)</p><p>闪存、 SRAM、外设的SRAM、 APB1、 APB2和AHB外设均可作为访问的源和目标</p><p>数据宽度：字节(Byte 8)、半字(Half Word 16)、全字(Word 32)</p><p>可编程的数据传输数目： 0 ~ 65535</p><p>若可编程的数据传输数目为10，数据宽度为字节，半字，全字<br>传输总数据大小：10字节，20字节，40字节</p><p>若传输总数据大小与实际传输不符，会让传输标志(__HAL_DMA_GET_FLAG) ≠ 0</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>存储器和存储器间实验</p><h2 id="DMA配置"><a href="#DMA配置" class="headerlink" title="DMA配置"></a><center>DMA配置</center></h2><img src="https://s2.loli.net/2024/08/19/nj8ws4YqxbAf6NW.webp" alt="DMA配置" style="zoom:50%;"><p>串口初始化参考：<a href="https://d3iiz.top/post/2c4c3bc3">链接</a></p><h2 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h2><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFF_SIZE 100<span class="comment">//37行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> SRC_Buff[BUFF_SIZE];<span class="comment">//48行</span></span><br><span class="line"><span class="type">uint8_t</span> DEST_Buff[BUFF_SIZE];</span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; BUFF_SIZE; i++)<span class="comment">//95行</span></span><br><span class="line">  SRC_Buff[i] = i+<span class="number">2</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 参数1：指向 DMA_HandleTypeDef 结构的指针，该结构包含指向 DMA 通道的配置信息</span></span><br><span class="line"><span class="comment">* 参数2：源内存缓冲区地址</span></span><br><span class="line"><span class="comment">* 参数3：目标内存缓冲区地址，参数4：从源传输到目标的数据长度</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">HAL_DMA_Start(&amp;hdma_memtomem_dma1_channel1, (<span class="type">uint32_t</span>)SRC_Buff, (<span class="type">uint32_t</span>)DEST_Buff, BUFF_SIZE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//while里,111行</span></span><br><span class="line">hdma_memtomem_dma1_channel1.Instance-&gt;CNDTR = BUFF_SIZE;<span class="comment">//可编程的数据传输数目：CNDTR</span></span><br><span class="line">__HAL_DMA_ENABLE(&amp;hdma_memtomem_dma1_channel1);<span class="comment">//启用指定的 DMA 通道</span></span><br><span class="line"><span class="keyword">while</span>(__HAL_DMA_GET_FLAG(&amp;hdma_memtomem_dma1_channel1, DMA_FLAG_TC1) == <span class="number">0</span>);<span class="comment">//判断是否传输完成</span></span><br><span class="line">HAL_UART_Transmit(&amp;huart1, DEST_Buff, BUFF_SIZE, <span class="number">100</span>);<span class="comment">//串口发送据</span></span><br><span class="line">__HAL_DMA_CLEAR_FLAG(&amp;hdma_memtomem_dma1_channel1, DMA_FLAG_TC1);<span class="comment">//清楚标志</span></span><br><span class="line">__HAL_DMA_DISABLE(&amp;hdma_memtomem_dma1_channel1);<span class="comment">//禁用指定的 DMA 通道</span></span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;12个通道：DMA1（7）DMA2（5）&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.ne</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>9.DAC(数字信号转模拟信号)</title>
    <link href="http://example.com/post/52772f76.html"/>
    <id>http://example.com/post/52772f76.html</id>
    <published>2024-08-15T14:22:06.000Z</published>
    <updated>2024-08-19T01:57:56.531Z</updated>
    
    <content type="html"><![CDATA[<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><h2 id="DAC配置"><a href="#DAC配置" class="headerlink" title="DAC配置"></a><center>DAC配置</center></h2><img src="https://s2.loli.net/2024/08/19/VNsyS4Aea7MQJDb.png" alt="DAC配置" style="zoom:50%;"><h2 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint16_t</span> DAC_Value = <span class="number">0</span>;<span class="comment">//47行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while里，99行</span></span><br><span class="line">DAC_Value++;</span><br><span class="line">DAC_Value = DAC_Value % <span class="number">4095</span>;</span><br><span class="line"><span class="comment">/* 参数1：指向包含 DAC_HandleTypeDef 结构的指针指定DAC的配置信息</span></span><br><span class="line"><span class="comment">* 参数2：选定的 DAC 通道</span></span><br><span class="line"><span class="comment">* 参数3：数据对齐方式，参数4：要加载到选定数据保持寄存器中的数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">HAL_DAC_SetValue(&amp;hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_Value);</span><br><span class="line">HAL_DAC_Start(&amp;hdac,DAC_CHANNEL_1);<span class="comment">//开始DAC</span></span><br><span class="line">HAL_Delay(<span class="number">4</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;代码编写&quot;&gt;&lt;a href=&quot;#代码编写&quot; class=&quot;headerlink&quot; title=&quot;代码编写&quot;&gt;&lt;/a&gt;&lt;center&gt;代码编写&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;DAC配置&quot;&gt;&lt;a href=&quot;#DAC配置&quot; class=&quot;headerlin</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>8.看门狗(WDG)</title>
    <link href="http://example.com/post/f0812160.html"/>
    <id>http://example.com/post/f0812160.html</id>
    <published>2024-08-15T14:05:49.000Z</published>
    <updated>2024-08-19T01:57:06.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>防止系统跑飞</p><p>喂狗：让值为0</p><p>分类：独立看门狗(IWDG,0到100喂狗)、窗口看门狗(60到100喂狗)，值(60)，顶值(100)</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>按键喂狗</p><h2 id="独立看门狗配置"><a href="#独立看门狗配置" class="headerlink" title="独立看门狗配置"></a><center>独立看门狗配置</center></h2><p>超过10s，复位</p><img src="https://s2.loli.net/2024/08/19/CMYoHKkySmgj1BR.png" alt="看门狗配置" style="zoom:50%;"><hr><p>注意时钟：</p><img src="https://s2.loli.net/2024/08/19/5DqnIGtPxkmBw86.png" alt="看门狗时钟" style="zoom:50%;"><p>按键、LED灯配置参考：<a href="https://d3iiz.top/post/adb202b7">链接</a></p><h2 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h2><p>mian.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="comment">//超过时间看门狗触发复位闪灯</span></span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">0</span>);<span class="comment">//93行</span></span><br><span class="line">HAL_Delay(<span class="number">500</span>);</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin) == <span class="number">0</span>)<span class="comment">//102行,while里</span></span><br><span class="line">HAL_IWDG_Refresh(&amp;hiwdg);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;防止系统跑飞&lt;/p&gt;
&lt;p&gt;喂狗：让值为0&lt;/p&gt;
&lt;p&gt;分类：独立看门狗(IWDG,0到100喂狗)、窗</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>7.实时时钟(RTC)</title>
    <link href="http://example.com/post/e8bc8f26.html"/>
    <id>http://example.com/post/e8bc8f26.html</id>
    <published>2024-08-14T13:12:02.000Z</published>
    <updated>2024-08-19T01:55:57.275Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>使用时钟晶振：32.768KHz(2^{15}^)</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>OLED显示实时时间，串口打印</p><h2 id="晶体、RTC配置"><a href="#晶体、RTC配置" class="headerlink" title="晶体、RTC配置"></a><center>晶体、RTC配置</center></h2><h3 id="晶体配置"><a href="#晶体配置" class="headerlink" title="晶体配置"></a>晶体配置</h3><img src="https://s2.loli.net/2024/08/19/dAcUyOsvEVHBJfD.png" alt="晶体配置" style="zoom:50%;"><hr><img src="https://s2.loli.net/2024/08/19/piDWUw5mf8oCsVq.png" alt="配置时钟" style="zoom:50%;"><h3 id="RTC配置"><a href="#RTC配置" class="headerlink" title="RTC配置"></a>RTC配置</h3><img src="https://s2.loli.net/2024/08/19/gk3tWjnTpeoOFma.png" alt="RTC配置" style="zoom:50%;"><p>串口配置参考：<a href="https://d3iiz.top/post/2c4c3bc3">链接</a></p><h2 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h2><p>mian.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line">RTC_TimeTypeDef RTC_Time;<span class="comment">//48行</span></span><br><span class="line">RTC_DateTypeDef RTC_Date;</span><br><span class="line"><span class="type">uint8_t</span> RTC_Buff[<span class="number">200</span>];</span><br><span class="line"><span class="type">uint8_t</span> RTC_Buff1[<span class="number">200</span>];</span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while里，108行</span></span><br><span class="line"><span class="comment">/* 参数1：指向 RTC_HandleTypeDef 结构的指针，该结构包含RTC 的配置信息</span></span><br><span class="line"><span class="comment">* 参数2：指向时间结构的指针，参数3：RTC_FORMAT_BIN:二进制数据格式，RTC_FORMAT_BCD:十六进制数据格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">HAL_RTC_GetTime(&amp;hrtc, &amp;RTC_Time, RTC_FORMAT_BIN);<span class="comment">//获取时分秒</span></span><br><span class="line"><span class="built_in">sprintf</span>(RTC_Buff,<span class="string">&quot;Time:%d:%d:%d\r\n&quot;</span>, RTC_Time.Hours, RTC_Time.Minutes, RTC_Time.Seconds);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, RTC_Buff, <span class="built_in">strlen</span>(RTC_Buff), <span class="number">100</span>);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">HAL_RTC_GetDate(&amp;hrtc, &amp;RTC_Date, RTC_FORMAT_BIN);<span class="comment">//获取年月日星期</span></span><br><span class="line"><span class="built_in">sprintf</span>(RTC_Buff1,<span class="string">&quot;Date:%d:%d:%d,WeekDay:%d\r\n&quot;</span>, RTC_Date.Year, RTC_Date.Month, RTC_Date.Date, RTC_Date.WeekDay);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, RTC_Buff1, <span class="built_in">strlen</span>(RTC_Buff1), <span class="number">100</span>);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;使用时钟晶振：32.768KHz(2^{15}^)&lt;/p&gt;
&lt;h1 id=&quot;代码编写&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>6.IIC通信</title>
    <link href="http://example.com/post/f5fba2c3.html"/>
    <id>http://example.com/post/f5fba2c3.html</id>
    <published>2024-08-13T09:53:28.000Z</published>
    <updated>2024-08-19T01:54:15.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>参考51单片机IIC理论：<a href="https://d3iiz.top/post/f5fba2c3.html">链接</a></p><p>在起始信号后必须发送一个7位从机地址 + 1位方向位，用“0”表示主机发送数据，“1”表示主机接收数据</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><h2 id="IIC三个模式配置"><a href="#IIC三个模式配置" class="headerlink" title="IIC三个模式配置"></a><center>IIC三个模式配置</center></h2><h3 id="IIC-阻塞模式-配置"><a href="#IIC-阻塞模式-配置" class="headerlink" title="IIC(阻塞模式)配置"></a>IIC(阻塞模式)配置</h3><p>主要方式</p><img src="https://s2.loli.net/2024/08/19/vDus7OLdKPtS9hJ.png" alt="IIC(阻塞模式)配置" style="zoom: 50%;"><h3 id="IIC-中断模式-配置"><a href="#IIC-中断模式-配置" class="headerlink" title="IIC(中断模式)配置"></a>IIC(中断模式)配置</h3><img src="https://s2.loli.net/2024/08/19/IPnXbZ9ARN2TEKC.png" alt="IIC(中断模式)配置" style="zoom:50%;"><h3 id="IIC-DMA模式-配置"><a href="#IIC-DMA模式-配置" class="headerlink" title="IIC(DMA模式)配置"></a>IIC(DMA模式)配置</h3><img src="https://s2.loli.net/2024/08/19/eoE7LNwh5fmAczH.png" alt="IIC(DMA模式)配置" style="zoom: 50%;"><h2 id="阻塞模式"><a href="#阻塞模式" class="headerlink" title="阻塞模式"></a><center>阻塞模式</center></h2><p>mian.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">HAL_Init();<span class="comment">//75行</span></span><br><span class="line">MX_I2C1_Init();</span><br><span class="line"><span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line">OLED_Init();<span class="comment">//初始化OLED</span></span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_ShowCHinese(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">18</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">36</span>,<span class="number">0</span>,<span class="number">2</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">54</span>,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">72</span>,<span class="number">0</span>,<span class="number">4</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">90</span>,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">108</span>,<span class="number">0</span>,<span class="number">6</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>);<span class="comment">//�?</span></span><br><span class="line"><span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>olde.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Command命令</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Command</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Command)</span><span class="comment">//10行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//   IIC_Start();</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x78);            //Slave address,SA0=0</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x00);//write command</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(IIC_Command);</span></span><br><span class="line"><span class="comment">//   IIC_Stop();</span></span><br><span class="line"> <span class="type">uint8_t</span> IIC_Send_Cmd[]=&#123;<span class="number">0x00</span>,IIC_Command&#125;;<span class="comment">//将两个数据放进数组</span></span><br><span class="line"> <span class="comment">/* 参数1：指向 I2C_HandleTypeDef 结构的指针，该结构包含指定 I2C 的配置信息</span></span><br><span class="line"><span class="comment">  * 参数2：设备地址，参数3：</span></span><br><span class="line"><span class="comment">  * 参数4：要发送的数据量，参数5：超时持续时间</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> HAL_I2C_Master_Transmit(&amp;hi2c1, <span class="number">0x78</span>, IIC_Send_Cmd, <span class="number">2</span>, <span class="number">100</span>);<span class="comment">//调用库函数阻塞发送IIC</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Data数据</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//   IIC_Start();</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x78);//D/C#=0; R/W#=0</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x40);//write data</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(IIC_Data);</span></span><br><span class="line"><span class="comment">//   IIC_Stop();</span></span><br><span class="line">   <span class="type">uint8_t</span> IIC_Send_Data[]=&#123;<span class="number">0x40</span>,IIC_Data&#125;;<span class="comment">//将两个数据放进数组</span></span><br><span class="line">   <span class="comment">/* 参数1：指向 I2C_HandleTypeDef 结构的指针，该结构包含指定 I2C 的配置信息</span></span><br><span class="line"><span class="comment">* 参数2：设备地址，参数3：</span></span><br><span class="line"><span class="comment">* 参数4：要发送的数据量，参数5：超时持续时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   HAL_I2C_Master_Transmit(&amp;hi2c1, <span class="number">0x78</span>, IIC_Send_Data, <span class="number">2</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中断模式"><a href="#中断模式" class="headerlink" title="中断模式"></a><center>中断模式</center></h2><p>mian.c与阻塞相同</p><p>oled.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Command命令</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Command</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Command)</span><span class="comment">//10行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//   IIC_Start();</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x78);            //Slave address,SA0=0</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x00);//write command</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(IIC_Command);</span></span><br><span class="line"><span class="comment">//   IIC_Stop();</span></span><br><span class="line"> <span class="type">uint8_t</span> IIC_Send_Cmd[]=&#123;<span class="number">0x00</span>,IIC_Command&#125;;<span class="comment">//将两个数据放进数组</span></span><br><span class="line"> <span class="comment">/* 参数1：指向 I2C_HandleTypeDef 结构的指针，该结构包含指定 I2C 的配置信息</span></span><br><span class="line"><span class="comment">  * 参数2：设备地址，参数3：</span></span><br><span class="line"><span class="comment">  * 参数4：要发送的数据量</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> HAL_I2C_Master_Transmit_IT(&amp;hi2c1, <span class="number">0x78</span>, IIC_Send_Cmd, <span class="number">2</span>);</span><br><span class="line"> HAL_Delay(<span class="number">1</span>);<span class="comment">//如果不延时发太快不显示,但OLED显示太慢</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Data数据</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//   IIC_Start();</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x78);//D/C#=0; R/W#=0</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x40);//write data</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(IIC_Data);</span></span><br><span class="line"><span class="comment">//   IIC_Stop();</span></span><br><span class="line">   <span class="type">uint8_t</span> IIC_Send_Data[]=&#123;<span class="number">0x40</span>,IIC_Data&#125;;<span class="comment">//将两个数据放进数组</span></span><br><span class="line">   <span class="comment">/* 参数1：指向 I2C_HandleTypeDef 结构的指针，该结构包含指定 I2C 的配置信息</span></span><br><span class="line"><span class="comment">* 参数2：设备地址，参数3：</span></span><br><span class="line"><span class="comment">* 参数4：要发送的数据量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   HAL_I2C_Master_Transmit_IT(&amp;hi2c1, <span class="number">0x78</span>, IIC_Send_Data, <span class="number">2</span>);</span><br><span class="line">   HAL_Delay(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;参考51单片机IIC理论：&lt;a href=&quot;https://d3iiz.top/post/f5fba2c3</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>office无法初始化VisualBasic</title>
    <link href="http://example.com/post/6928cd3f.html"/>
    <id>http://example.com/post/6928cd3f.html</id>
    <published>2024-08-12T15:37:39.000Z</published>
    <updated>2024-08-19T05:27:02.980Z</updated>
    
    <content type="html"><![CDATA[<p>1.打开word，将 无法初始化visual basic 的弹出框先关掉</p><p>2.点击左上角的 <code>文件</code></p><img src="https://s2.loli.net/2024/08/19/dR4COBbWFSykfKn.png" alt="点击文件" style="zoom:50%;"><p>3.点击帮助栏目下的 <code>选项</code>，然后点击 <code>加载项</code></p><img src="https://s2.loli.net/2024/08/19/ONbW38nYyapSMA2.png" alt="进入选项" style="zoom:50%;"><hr><img src="https://s2.loli.net/2024/08/19/nBGQD25ZUHhFfsi.png" alt="进入设置" style="zoom:50%;"><p>4.在弹出的com加载项中将所有带√的选项都去掉(此处不是删除，只是将<code>√去掉</code>)，最后点击<code>确定</code>，重新打开文件</p><img src="https://s2.loli.net/2024/08/19/JDBRsFjE6aICH7h.png" alt="取消" style="zoom:50%;"><p>5.大功告成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.打开word，将 无法初始化visual basic 的弹出框先关掉&lt;/p&gt;
&lt;p&gt;2.点击左上角的 &lt;code&gt;文件&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2024/08/19/dR4COBbWFSykfKn.png&quot; al</summary>
      
    
    
    
    <category term="Windows使用技巧" scheme="http://example.com/categories/Windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="office无法初始化VisualBasic" scheme="http://example.com/tags/office%E6%97%A0%E6%B3%95%E5%88%9D%E5%A7%8B%E5%8C%96VisualBasic/"/>
    
  </entry>
  
  <entry>
    <title>5.ADC(模拟信号转数字信号)</title>
    <link href="http://example.com/post/bfd038f5.html"/>
    <id>http://example.com/post/bfd038f5.html</id>
    <published>2024-08-10T06:45:10.000Z</published>
    <updated>2024-08-19T01:52:03.866Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>3个ADC控制器</p><img src="https://s2.loli.net/2024/08/19/XtaODvFlnRsrWQi.png" alt="3个ADC控制器" style="zoom: 67%;"><p>转换：单次转换模式、 连续转换模式</p><p>转换时间 &#x3D; 采样时间 + 12.5周期</p><p>&ensp;&ensp;&ensp;&ensp;当ADCCLK(时钟) &#x3D; 14MHz，采样时间为1.5周期，TcoNv(转换时间) &#x3D; 1.5 + 12.5 &#x3D; 14 周期 &#x3D; 1us</p><p>采样精度：12位&#x2F;16位(2^12^ &#x3D; 4096)</p><p>实际电压值 &#x3D; <code>(通道采集的ADC值 * 3.3) / 4096</code></p><p>数据对齐：左对齐、右对齐</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>电压采集</p><h2 id="ADC、串口一配置"><a href="#ADC、串口一配置" class="headerlink" title="ADC、串口一配置"></a><center>ADC、串口一配置</center></h2><h3 id="ADC-阻塞模式-配置"><a href="#ADC-阻塞模式-配置" class="headerlink" title="ADC(阻塞模式)配置"></a>ADC(阻塞模式)配置</h3><img src="https://s2.loli.net/2024/08/19/NpfabjEqwe6Qs8c.png" alt="配置ADC" style="zoom:33%;"><hr><p>多个通道时，自动扫描会自动打开使能</p><img src="https://s2.loli.net/2024/08/19/VMxF9S6RaDu1npj.png" alt="配置ADC" style="zoom:50%;"><hr><p>修改时钟分频：</p><img src="https://s2.loli.net/2024/08/19/pIbkCX84RT3clqL.png" alt="修改时钟配置" style="zoom: 33%;"><p>配置串口一打印采集到的电压值，配置方法参考：<a href="https://d3iiz.top/post/2c4c3bc3.html">链接</a></p><h3 id="ADC-DMA模式-配置"><a href="#ADC-DMA模式-配置" class="headerlink" title="ADC(DMA模式)配置"></a>ADC(DMA模式)配置</h3><img src="https://s2.loli.net/2024/08/19/pCFsM1iTgOjbq56.png" alt="ADC配置" style="zoom: 50%;"><p>配置串口一打印采集到的电压值，配置方法参考：<a href="https://d3iiz.top/post/2c4c3bc3.html">链接</a></p><p>修改时钟分频（和上面相同）</p><p>配置DMA：</p><img src="https://s2.loli.net/2024/08/19/T9DWyeva63oEzrG.png" alt="配置DMA" style="zoom:50%;"><h3 id="ADC-中断模式-配置"><a href="#ADC-中断模式-配置" class="headerlink" title="ADC(中断模式)配置"></a>ADC(中断模式)配置</h3><img src="https://s2.loli.net/2024/08/19/nlB3Arm1PpLQFqo.png" alt="配置ADC" style="zoom:33%;"><p>配置串口一打印采集到的电压值，配置方法参考：<a href="https://d3iiz.top/post/2c4c3bc3.html">链接</a></p><p>修改时钟分频（和上面相同）</p><img src="https://s2.loli.net/2024/08/19/pKQoObuImcF4V3Y.png" alt="配置ADC中断" style="zoom:50%;"><h2 id="阻塞模式"><a href="#阻塞模式" class="headerlink" title="阻塞模式"></a><center>阻塞模式</center></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadc1);<span class="comment">//校准，adc.c,94行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint16_t</span> AD_Buf[<span class="number">4</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> Send_Buf[<span class="number">50</span>];</span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while里,103行</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)<span class="comment">//4个通道一次采集采集一个通道for4</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_ADC_Start(&amp;hadc1);<span class="comment">//手动使能开始转换</span></span><br><span class="line">HAL_ADC_PollForConversion(&amp;hadc1,<span class="number">10</span>);<span class="comment">//等待转换完成，等待时间10ms，超时结束</span></span><br><span class="line">AD_Buf[i] = HAL_ADC_GetValue(&amp;hadc1);<span class="comment">//获取转换后的值</span></span><br><span class="line"><span class="built_in">sprintf</span>(Send_Buf,<span class="string">&quot;Channel:%d:  V:%1.2f  Value:%d\n\r&quot;</span>, i+<span class="number">1</span>, (<span class="type">float</span>)(AD_Buf[i])*<span class="number">3.3f</span>/<span class="number">4096.0</span>, AD_Buf[i]);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1,Send_Buf, <span class="built_in">strlen</span>(Send_Buf), <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="DMA模式"><a href="#DMA模式" class="headerlink" title="DMA模式"></a><center>DMA模式</center></h2><p>DMA会触发中断</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint16_t</span> AD_Buf[<span class="number">4</span>];<span class="comment">//49行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadc1);<span class="comment">//校准，96行</span></span><br><span class="line"><span class="comment">//参数1：ADC句柄,参数2：目标缓冲区地址,参数3：从 ADC 外设传输到存储器的数据长度(两个通道)</span></span><br><span class="line">HAL_ADC_Start_DMA(&amp;hadc1,(<span class="type">uint32_t</span> *)&amp;AD_Buf,<span class="number">2</span>);</span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AD1= V:%1.2f  Value:%d\n\r&quot;</span>, AD_Buf[<span class="number">0</span>]*<span class="number">3.3</span>/<span class="number">4096.0</span>, AD_Buf[<span class="number">0</span>]);<span class="comment">//105行</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AD2= V:%1.2f  Value:%d\n\r&quot;</span>, AD_Buf[<span class="number">1</span>]*<span class="number">3.3</span>/<span class="number">4096.0</span>, AD_Buf[<span class="number">1</span>]);<span class="comment">//106行</span></span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="中断模式"><a href="#中断模式" class="headerlink" title="中断模式"></a><center>中断模式</center></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN ADC1_Init 2 */</span></span><br><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadc1);<span class="comment">//校准，adc.c,67行</span></span><br><span class="line">HAL_ADC_Start_IT(&amp;hadc1);<span class="comment">//开启中断模式，即开始采集</span></span><br><span class="line"><span class="comment">/* USER CODE END ADC1_Init 2 */</span></span><br><span class="line"></span><br><span class="line">main.c</span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint16_t</span> Send_Buf[<span class="number">20</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">uint16_t</span> AD_Value;</span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while,102行</span></span><br><span class="line"><span class="built_in">sprintf</span>(Send_Buf,<span class="string">&quot;V:%1.2f  Value:%d\n\r&quot;</span>,(<span class="type">float</span>)(AD_Value)*<span class="number">3.3f</span>/<span class="number">4096.0</span>,AD_Value);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1,Send_Buf, <span class="built_in">strlen</span>(Send_Buf), <span class="number">10</span>);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_ADC_ConvCpltCallback</span><span class="params">(ADC_HandleTypeDef* hadc)</span><span class="comment">//159行</span></span><br><span class="line">&#123;</span><br><span class="line">AD_Value = HAL_ADC_GetValue(&amp;hadc1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;3个ADC控制器&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2024/08/19</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>4.定时器(TIMER)</title>
    <link href="http://example.com/post/f71d0ad2.html"/>
    <id>http://example.com/post/f71d0ad2.html</id>
    <published>2024-08-06T08:19:27.000Z</published>
    <updated>2024-08-19T01:45:46.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>预分频寄存器(TIMx_PSC)：由于时钟源为：72MHz，T &#x3D; 1&#x2F;f &#x3D; 1&#x2F;72MHz，由于不好计算周期时间，则需要分频，若分72则T &#x3D; 1&#x2F;1MHz &#x3D; 1us(1MHz &#x3D; 一百万秒)</p><p>计数方式：向上(递增到某个数触发中断)、向下(递减到某一个数触发中断)、中心计数(递增到某一个数触发中断，再递减到某一个数触发中断)</p><p>比较值(参考：<a href="https://blog.csdn.net/qq_36553707/article/details/109527645">链接</a>)：</p><p>&ensp;&ensp;&ensp;&ensp;PWM1模式：若计数值小于有效值则高电平，计数值大于有效值则低电平，可以控制比较值来调节占空比</p><p>&ensp;&ensp;&ensp;&ensp;PWM2模式：与PWM1模式相反，计数值小于有效值则低电平，大于有效值则高电平</p><p>复用：Pin脚本身除了支持普通GPIO功能之外，还支持别的功能(使用别的功能就叫复用)</p><p>重映射：Pin脚本身不支持这些功能，配置重映射寄存器，使其具备别的功能</p><h2 id="定时器分类"><a href="#定时器分类" class="headerlink" title="定时器分类"></a><center>定时器分类</center></h2><p>型号：STM32F103ZET6</p><p>基本定时器：TIM6、TIM7</p><img src="https://s2.loli.net/2024/08/19/BGfugU9cvzQj4Dy.png" alt="基本定时器功能" style="zoom:50%;"><p>通用定时器：TIM2~TIM5</p><img src="https://s2.loli.net/2024/08/19/Ks6JF3gDBmVedzS.png" alt="通用定时器功能" style="zoom: 50%;"><p>高级定时器：TIM1、TIM8</p><img src="https://s2.loli.net/2024/08/19/ZOeUplvX8mNVPky.png" alt="高级定时器功能" style="zoom:50%;"><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>定时器中断实验：LED灯一秒闪烁一次、LED灯两秒闪烁一次、计算单片机运行时间、串口5秒返回单片机运行时间</p><p>PWM信号输出：呼吸灯、电机(由慢到快)、舵机</p><p>输入捕获：检测信号脉冲宽度(舵机脉冲宽度)</p><h2 id="LED灯、UART、定时器、PWM配置"><a href="#LED灯、UART、定时器、PWM配置" class="headerlink" title="LED灯、UART、定时器、PWM配置"></a><center>LED灯、UART、定时器、PWM配置</center></h2><p>LED灯配置请看：<a href="https://d3iiz.top/post/adb202b7.html">链接</a></p><p>串口配置请看：<a href="https://d3iiz.top/post/2c4c3bc3.html">链接</a></p><h3 id="配置定时器："><a href="#配置定时器：" class="headerlink" title="配置定时器："></a>配置定时器：</h3><p>72&#x2F;7200 &#x3D; 0.01，T &#x3D; 1&#x2F;f &#x3D; 1&#x2F;0.01MHz &#x3D; 100us，计数10000，触发中断，100us * 10000 &#x3D; 1s，1s &#x3D; 1000000us，但单片机都是以0开始，所以分频值以及计数值都 -1</p><img src="https://s2.loli.net/2024/08/19/uJqVb7cEptMsTCD.png" alt="定时器配置" style="zoom:50%;"><h3 id="配置定时器向上计数溢出中断NVIC-嵌套向量中断控制器"><a href="#配置定时器向上计数溢出中断NVIC-嵌套向量中断控制器" class="headerlink" title="配置定时器向上计数溢出中断NVIC(嵌套向量中断控制器)"></a>配置定时器向上计数溢出中断NVIC(嵌套向量中断控制器)</h3><img src="https://s2.loli.net/2024/08/19/XAbRjiVIgShLuO2.png" alt="配置定时器NVIC" style="zoom:50%;"><h3 id="定时器-PWM-控制LED灯配置"><a href="#定时器-PWM-控制LED灯配置" class="headerlink" title="定时器(PWM)控制LED灯配置"></a>定时器(PWM)控制LED灯配置</h3><p>LED(PB5)引脚说明：</p><img src="https://s2.loli.net/2024/08/19/rVg2EduWfx3D5Ah.png" alt="PWMLED灯配置" style="zoom:50%;"><p>所以配置定时器3，通道二，但配置完发现图中不符，需手动修改</p><img src="https://s2.loli.net/2024/08/19/TR6QPs4hiO1yAmw.png" alt="定时器配置LED灯" style="zoom: 33%;"><h3 id="定时器-PWM-控制电机配置"><a href="#定时器-PWM-控制电机配置" class="headerlink" title="定时器(PWM)控制电机配置"></a>定时器(PWM)控制电机配置</h3><p>配置PB4引脚PWM控制电机速度</p><img src="https://s2.loli.net/2024/08/19/gz5AvYuDaMSEfIn.png" alt="配置PWM控制电机速度" style="zoom:33%;"><h3 id="定时器-PWM-控制舵机配置"><a href="#定时器-PWM-控制舵机配置" class="headerlink" title="定时器(PWM)控制舵机配置"></a>定时器(PWM)控制舵机配置</h3><p>舵机脉冲周期：20ms</p><img src="https://s2.loli.net/2024/08/19/8tF2HPfO3cj7xSu.png" alt="PWM控制舵机配置" style="zoom: 33%;"><h3 id="输入捕获定时器配置"><a href="#输入捕获定时器配置" class="headerlink" title="输入捕获定时器配置"></a>输入捕获定时器配置</h3><img src="https://s2.loli.net/2024/08/19/cUVrwZYbG96LDlJ.png" alt="输入捕获定时器配置" style="zoom:33%;"><img src="https://s2.loli.net/2024/08/19/5UltjiM1z4xuOaL.png" alt="输入捕获定时器配置" style="zoom:50%;"><h3 id="配置定时器全局中断NVIC"><a href="#配置定时器全局中断NVIC" class="headerlink" title="配置定时器全局中断NVIC"></a>配置定时器全局中断NVIC</h3><img src="https://s2.loli.net/2024/08/19/NGgBUP3d4LcIfEs.png" alt="开启中断" style="zoom:50%;"><h3 id="DHT11-温湿度传感器-配置"><a href="#DHT11-温湿度传感器-配置" class="headerlink" title="DHT11(温湿度传感器)配置"></a>DHT11(温湿度传感器)配置</h3><img src="https://s2.loli.net/2024/08/19/4R7KvoQTPs8Mf6A.png" alt="DHT11(温湿度传感器)配置" style="zoom:33%;"><h2 id="LED灯闪烁、串口输出运行时间"><a href="#LED灯闪烁、串口输出运行时间" class="headerlink" title="LED灯闪烁、串口输出运行时间"></a><center>LED灯闪烁、串口输出运行时间</center></h2><p>LED1每隔一秒电平翻转一次，LED2每隔两秒电平翻转一次，串口输出单片机运行时间</p><h3 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//28行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"><span class="type">uint32_t</span> G_Timer_Count = <span class="number">0</span>;<span class="comment">//59行</span></span><br><span class="line"><span class="type">uint8_t</span> UART_Count[<span class="number">200</span>];</span><br><span class="line"><span class="type">uint8_t</span> UART_Flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim1);<span class="comment">//开启定时器，97行</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(UART_Flag)<span class="comment">//104行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(UART_Count,<span class="string">&quot;MCU run time is %lus&quot;</span>,G_Timer_Count);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, UART_Count, <span class="built_in">strlen</span>(UART_Count), <span class="number">1000</span>);</span><br><span class="line">UART_Flag = <span class="number">0</span>;<span class="comment">//打印一次后标志=0，等中断五次(5s)后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span><span class="comment">//定时器触发函数,157行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(htim == &amp;htim1)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">G_Timer_Count++;</span><br><span class="line"><span class="keyword">if</span>((G_Timer_Count % <span class="number">5</span>) == <span class="number">0</span>)</span><br><span class="line">UART_Flag = <span class="number">1</span>;<span class="comment">//每隔五秒，让标志=1</span></span><br><span class="line"><span class="keyword">if</span>((G_Timer_Count % <span class="number">2</span>) == <span class="number">0</span>)<span class="comment">//LED2每隔两秒翻转电平</span></span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="PWM信号LED呼吸灯、电机、舵机"><a href="#PWM信号LED呼吸灯、电机、舵机" class="headerlink" title="PWM信号LED呼吸灯、电机、舵机"></a><center>PWM信号LED呼吸灯、电机、舵机</center></h2><p>理论参考：<a href="https://d3iiz.top/post/93c966f3.html">链接</a></p><p>PWM信号控制LED，产生一个呼吸灯效果，以及对电机控制，控制速度由慢到快</p><h3 id="Cube-IDE代码-1"><a href="#Cube-IDE代码-1" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> PWM_Value = <span class="number">0</span>,LED_PWM_Value = <span class="number">0</span>,SG_PWM = <span class="number">5</span>;<span class="comment">//47行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="comment">//参数1：定时器句柄(指向配置好的定时器结构体的指针)，参数2：定时器通道,93行</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_2);<span class="comment">//开启定时器3，通道2 PWM</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_1);<span class="comment">//开启定时器3，通道1 PWM</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim4, TIM_CHANNEL_1);<span class="comment">//开启定时器4，通道1 PWM</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//103行</span></span><br><span class="line">PWM_Value++;</span><br><span class="line">PWM_Value = PWM_Value % <span class="number">200</span>;</span><br><span class="line"><span class="keyword">if</span>(PWM_Value &gt; <span class="number">99</span>)</span><br><span class="line">LED_PWM_Value = <span class="number">200</span> - PWM_Value;<span class="comment">//大于99时，从大到小(100,99...)</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">LED_PWM_Value = PWM_Value;</span><br><span class="line">HAL_Delay(<span class="number">25</span>);</span><br><span class="line"><span class="comment">//参数1：定时器句柄，参数2：定时器通道,参数3：比较值</span></span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_2, LED_PWM_Value);<span class="comment">//设置LED比较值</span></span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_1, LED_PWM_Value);<span class="comment">//设置电机比较值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(PWM_Value % <span class="number">30</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//每0.1ms计数值+1则0.5ms，比较值模式1，则占空比(高电平)0.5ms</span></span><br><span class="line">SG_PWM += <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span>(SG_PWM &gt; <span class="number">25</span>)</span><br><span class="line">SG_PWM = <span class="number">5</span>;</span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim4, TIM_CHANNEL_1, SG_PWM);<span class="comment">//设置舵机比较值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入捕获-IC"><a href="#输入捕获-IC" class="headerlink" title="输入捕获(IC)"></a><center>输入捕获(IC)</center></h2><p>捕获高电平持续时间</p><h3 id="Cube-IDE代码-2"><a href="#Cube-IDE代码-2" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>捕获PWM高电平的时间</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PTD */</span></span><br><span class="line"><span class="type">uint32_t</span> ic_state=<span class="number">0</span>,period_count=<span class="number">0</span>,ic_count=<span class="number">0</span>,us_count;<span class="comment">//32行</span></span><br><span class="line"><span class="comment">/* USER CODE END PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim2);<span class="comment">//开启普通定时器中断</span></span><br><span class="line">  HAL_TIM_IC_Start_IT(&amp;htim2, TIM_CHANNEL_2);<span class="comment">//开启捕获定时器中断</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please connect MCU51 P2.0,and let SG90 run to detect signal!\n&quot;</span>);<span class="comment">//串口输出捕获的时间(记得配置串口重定向)</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ic_state== <span class="number">2</span> )<span class="comment">//103行(while里)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 始终设置的是1us触发计数值加1</span></span><br><span class="line"><span class="comment">* 一个周期大概65ms，若大于65只有捕获中断函数不好使</span></span><br><span class="line"><span class="comment">* 若period_count为1，则代表过了一个中断周期，时间(1*65535)us</span></span><br><span class="line"><span class="comment">* 若没有到整个中断周期时间则剩下的为：ic_count</span></span><br><span class="line"><span class="comment">* 所以两个相加等于整个高电平时间*/</span></span><br><span class="line">us_count = ic_count + period_count * <span class="number">0xFFFF</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;High level duration:  %ldus \n&quot;</span>,us_count);<span class="comment">//(float)(us_count)/1000.000</span></span><br><span class="line">ic_state = <span class="number">0</span>;<span class="comment">//再将中间键恢复0，方便下次上升沿触发中断计时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span><span class="comment">//输入捕获触发函数,161行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(TIM2 == htim-&gt;Instance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( ic_state == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">__HAL_TIM_SET_COUNTER(htim,<span class="number">0</span>);<span class="comment">//将定时器从零开始计时</span></span><br><span class="line">__HAL_TIM_SET_CAPTUREPOLARITY(&amp;htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);<span class="comment">//设置成下降沿触发</span></span><br><span class="line">ic_state = <span class="number">1</span>;<span class="comment">//下次触发中断时(下降沿)则运行else</span></span><br><span class="line">period_count = <span class="number">0</span>;</span><br><span class="line">ic_count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ic_count = HAL_TIM_ReadCapturedValue(&amp;htim2,TIM_CHANNEL_2);<span class="comment">//读取定时器计数值</span></span><br><span class="line">__HAL_TIM_SET_CAPTUREPOLARITY(&amp;htim2, TIM_CHANNEL_2,   TIM_INPUTCHANNELPOLARITY_RISING);<span class="comment">//设置成上降沿触发</span></span><br><span class="line">ic_state = <span class="number">2</span>;<span class="comment">//进入while里面的判断</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span><span class="comment">//普通定时器中断触发函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(TIM2 == htim-&gt;Instance)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span>(ic_state==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(period_count==<span class="number">0XFFFF</span>)<span class="comment">//一次周期大约65ms，若进入这个需要(65*65535)ms</span></span><br><span class="line">&#123;</span><br><span class="line">ic_state=<span class="number">2</span>;</span><br><span class="line">ic_count=<span class="number">0XFFFF</span>;<span class="comment">//返回一个超大数显示错误</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">period_count++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="DHT11"><a href="#DHT11" class="headerlink" title="DHT11"></a><center>DHT11</center></h2><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dht11.h&quot;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(DHT_Read())<span class="comment">//while里,101行</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; H:%u  T:%u \r\n&quot;</span>,Data[<span class="number">0</span>],Data[<span class="number">2</span>]);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>dht11.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dht11.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Data[<span class="number">5</span>]=&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span><span class="comment">//微秒延迟</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> differ = <span class="number">0xffff</span>-us;</span><br><span class="line">__HAL_TIM_SET_COUNTER(&amp;htim1,differ);</span><br><span class="line">HAL_TIM_Base_Start(&amp;htim1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(differ &lt; <span class="number">0xffff</span>)&#123;</span><br><span class="line">differ = __HAL_TIM_GET_COUNTER(&amp;htim1);</span><br><span class="line">&#125;</span><br><span class="line">HAL_TIM_Base_Stop(&amp;htim1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT_GPIO_SET_OUTPUT</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.Pin=GPIO_PIN_5;</span><br><span class="line">GPIO_InitStructure.Mode=GPIO_MODE_OUTPUT_PP;<span class="comment">//PA5设置输出</span></span><br><span class="line"><span class="comment">//GPIO_InitStructure.Pull=;</span></span><br><span class="line">GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT_GPIO_SET_INPUT</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.Pin=GPIO_PIN_5;</span><br><span class="line">GPIO_InitStructure.Mode=GPIO_MODE_INPUT;<span class="comment">//PA5设置输入</span></span><br><span class="line">GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">DHT_Read_Byte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">uint8_t</span> ReadData=<span class="number">0</span>;</span><br><span class="line"> <span class="type">uint8_t</span> temp;</span><br><span class="line"> <span class="type">uint8_t</span> retry=<span class="number">0</span>;</span><br><span class="line"> <span class="type">uint8_t</span> i;    </span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="keyword">while</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">0</span> &amp;&amp; retry&lt;<span class="number">100</span>)  </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">Delay_us(<span class="number">1</span>);</span><br><span class="line">  retry++;</span><br><span class="line">&#125;</span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line">Delay_us(<span class="number">40</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">1</span>)   temp=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span>   temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">1</span> &amp;&amp; retry&lt;<span class="number">100</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> Delay_us(<span class="number">1</span>);</span><br><span class="line"> retry++;</span><br><span class="line"> &#125;</span><br><span class="line"> retry=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> ReadData&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"> ReadData |= temp;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ReadData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">DHT_Read</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">uint8_t</span> retry=<span class="number">0</span>;</span><br><span class="line"> <span class="type">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"> DHT_GPIO_SET_OUTPUT();</span><br><span class="line"> HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">18</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);</span><br><span class="line"> Delay_us(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DHT_GPIO_SET_INPUT();</span><br><span class="line">Delay_us(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">0</span> &amp;&amp; retry&lt;<span class="number">100</span>)  </span><br><span class="line">&#123;</span><br><span class="line">   Delay_us(<span class="number">1</span>);</span><br><span class="line"> retry++;</span><br><span class="line">&#125;</span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">1</span> &amp;&amp; retry&lt;<span class="number">100</span>) </span><br><span class="line">&#123;</span><br><span class="line">   Delay_us(<span class="number">1</span>);</span><br><span class="line"> retry++;</span><br><span class="line">&#125;</span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"> Data[i] = DHT_Read_Byte();</span><br><span class="line">&#125;</span><br><span class="line">Delay_us(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">uint32_t</span> sum=Data[<span class="number">0</span>]+Data[<span class="number">1</span>]+Data[<span class="number">2</span>]+Data[<span class="number">3</span>];</span><br><span class="line"> <span class="keyword">if</span>((sum)==Data[<span class="number">4</span>])    <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">   <span class="keyword">else</span>   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dht11.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DHT11_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DHT11_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx_hal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> Data[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> TIM_HandleTypeDef htim1;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT_GPIO_SET_OUTPUT</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT_GPIO_SET_INPUT</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">DHT_Read_Byte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">DHT_Read</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;预分频寄存器(TIMx_PSC)：由于时钟源为：72MHz，T &amp;#x3D; 1&amp;#x2F;f &amp;#x3D</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>3.串口(UART)</title>
    <link href="http://example.com/post/2c4c3bc3.html"/>
    <id>http://example.com/post/2c4c3bc3.html</id>
    <published>2024-08-05T10:02:46.000Z</published>
    <updated>2024-08-19T01:37:51.438Z</updated>
    
    <content type="html"><![CDATA[<p>串口理论部分可看51部分：<a href="https://blog.csdn.net/qq_65047384/article/details/140470283">链接</a></p><p>数据帧 &#x3D; 帧头(2字节，例如AA、BB) + 数据长度（2字节）+ 数据 + CRC16校验（2字节） + 帧尾（2字节）</p><p>回调函数在：stm32f1xx_it.c里找对应的函数转进入里面找</p><p>中断函数：stm32f1xx_hal_uart.c（别的只是uart不同）</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>串口一发送命令控制LED灯(PB5、PE5)</p><h2 id="LED灯、串口、串口打印浮点数据、串口重定向配置"><a href="#LED灯、串口、串口打印浮点数据、串口重定向配置" class="headerlink" title="LED灯、串口、串口打印浮点数据、串口重定向配置"></a><center>LED灯、串口、串口打印浮点数据、串口重定向配置</center></h2><p>LED灯配置请看：<a href="https://d3iiz.top/post/adb202b7.html">链接</a></p><p>串口配置：</p><img src="https://s2.loli.net/2024/08/19/8WslO2PSbvQZaHG.png" alt="串口配置" style="zoom: 33%;"><p>配置串口中断NVIC(嵌套向量中断控制器)</p><img src="https://s2.loli.net/2024/08/19/vnKglqby6ahNCDs.png" alt="配置中断NVIC" style="zoom:33%;"><p>配置DMA：</p><img src="https://s2.loli.net/2024/08/19/zYQw9NlP3GXsjmU.png" alt="配置DMA" style="zoom: 33%;"><p>Cube IDE中串口打印浮点数据配置方法(<a href="https://blog.csdn.net/caihaitao2000/article/details/112469098">参考</a>)：进入“Project→Properties”；显示界面如下。按照图片中的设置完成即可！</p><img src="https://s2.loli.net/2024/08/19/8YatcRMreEN2A7X.png" alt="打印浮点数配置" style="zoom: 33%;"><p>串口重定向配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> u_buf[<span class="number">256</span>];<span class="comment">//usart.c,24行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//usart.h,32行</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> u_buf[<span class="number">256</span>];<span class="comment">//usart.h，38行</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> printf(...)  HAL_UART_Transmit(&amp;huart1, (uint8_t *)u_buf, sprintf((char*)u_buf, __VA_ARGS__), 0xffff)<span class="comment">//usart.h，39行</span></span></span><br></pre></td></tr></table></figure><h2 id="轮询方式"><a href="#轮询方式" class="headerlink" title="轮询方式"></a><center>轮询方式</center></h2><p>缺点：</p><p>&ensp;&ensp;&ensp;&ensp;必须要等待数据发送完或者等待时间超时，代码才会往下走</p><p>&ensp;&ensp;&ensp;&ensp;必须要等待数据接收到固定的字节长度，超时，代码才往下走</p><h3 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>mian.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//26行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> UART_Recv[<span class="number">5</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">char</span> UART_Str[<span class="number">30</span>];<span class="comment">//49行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数1：UART 模块的配置信息的指针,参数2：数据缓冲区的指针，参数3：接收字节长度，参数4：接收超时时间(单位为毫秒)</span></span><br><span class="line">HAL_UART_Receive(&amp;huart1, UART_Recv, <span class="number">4</span>, <span class="number">1000</span>);<span class="comment">//接收数据函数</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;LED1&quot;</span>, (<span class="type">char</span> *)UART_Recv) == <span class="number">0</span>)<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line"><span class="built_in">memset</span>(UART_Recv,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);<span class="comment">//替换字符函数，常用于清除指定空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2&quot;</span>, (<span class="type">char</span> *)UART_Recv))<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span><br><span class="line"><span class="built_in">memset</span>(UART_Recv,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(UART_Str, <span class="string">&quot;%f\n&quot;</span>, <span class="number">666.6</span>);</span><br><span class="line"><span class="comment">//参数1：UART 模块的配置信息的指针,参数2：发送的字符串或字符数组，参数3：发送字节长度，参数4：接收超时时间(单位为毫秒)</span></span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (<span class="type">char</span> *)UART_Str, <span class="built_in">strlen</span>(UART_Str), <span class="number">1000</span>);<span class="comment">//发送数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;xinzai\n&quot;</span>);<span class="comment">//配置串口重定向后才可使用</span></span><br></pre></td></tr></table></figure><h2 id="中断-IT-方式"><a href="#中断-IT-方式" class="headerlink" title="中断(IT)方式"></a><center>中断(IT)方式</center></h2><h3 id="Cube-IDE代码-1"><a href="#Cube-IDE代码-1" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HAL_UART_RxCpltCallback(huart);<span class="comment">//stm32f1xx_hal_uart.c,3660行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_uart.c,2619行</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span><span class="comment">//中断回调函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//26行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> UART_Recv_IT[<span class="number">5</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">char</span> UART_Str[<span class="number">30</span>];<span class="comment">//49行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="comment">//参数1：UART 模块的配置信息的指针,参数2：数据缓冲区的指针，参数3：接收字节长度</span></span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, UART_Recv_IT, <span class="number">4</span>);<span class="comment">//串口中断接收函数，95行</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while函数里</span></span><br><span class="line"><span class="built_in">sprintf</span>(UART_Str, <span class="string">&quot;%d\n&quot;</span>, <span class="number">666</span>);<span class="comment">//102</span></span><br><span class="line">HAL_UART_Transmit_IT(&amp;huart1, UART_Str, <span class="built_in">strlen</span>(UART_Str));<span class="comment">//串口中断发送函数,103</span></span><br><span class="line">HAL_Delay(<span class="number">1000</span>);<span class="comment">//104</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//151行开始</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span><span class="comment">//串口中断接收触发函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(huart == &amp;huart1)<span class="comment">//判断传进来的串口是哪个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;LED1&quot;</span>, (<span class="type">char</span> *)UART_Recv_IT) == <span class="number">0</span>)<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IT,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);<span class="comment">//替换字符函数，常用于清除指定空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2&quot;</span>, (<span class="type">char</span> *)UART_Recv_IT))<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IT,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为只能接受一次串口中断，所以在串口中断触发函数需要重新调用</span></span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, UART_Recv_IT, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="空闲中断-IDLE-DMA"><a href="#空闲中断-IDLE-DMA" class="headerlink" title="空闲中断(IDLE) + DMA"></a><center>空闲中断(IDLE) + DMA</center></h2><p>不受接收字符长度影响，可以随意接收字符长度并判断，DMA会触发中断</p><p>空闲状态：在多个字节传输结束后，通信线路将会维持高电平，这个状态称为空闲状态（没有数据传输时的空闲状态，数据传输刚结束的空闲状态）</p><p>空闲中断产生条件：在数据传输过程中，当CPU检测到通信线路处于空闲状态时，且空闲状态的持续时间大于一个字节传输时间时，空闲状态标志IDLE将由硬件置1，产生空闲中断</p><h3 id="Cube-IDE代码-2"><a href="#Cube-IDE代码-2" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stm32f1xx_hal_uart.h,2710行</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span><span class="comment">//空闲中断接收回调函数</span></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RECV_Size 100<span class="comment">//37行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_UARTEx_ReceiveToIdle_DMA(&amp;huart1, UART_Recv_IDLE, RECV_Size);<span class="comment">//空闲中断接收函数,94行</span></span><br><span class="line"><span class="comment">//数据接收RECV_Size一半时会重新触发中断，需要关闭DMA接收中断使能</span></span><br><span class="line">HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);<span class="comment">//96行</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//150行</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span><span class="comment">//空闲中断接收触发函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(huart == &amp;huart1)<span class="comment">//判断传进来的串口是哪个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;LED1&quot;</span>, (<span class="type">char</span> *)UART_Recv_IDLE) == <span class="number">0</span>)<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IDLE,<span class="string">&#x27;\0&#x27;</span>,Size);<span class="comment">//替换字符函数，常用于清除指定空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2ON&quot;</span>, (<span class="type">char</span> *)UART_Recv_IDLE))<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span></span><br><span class="line">  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IDLE,<span class="string">&#x27;\0&#x27;</span>,Size);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2OFF&quot;</span>, (<span class="type">char</span> *)UART_Recv_IDLE))</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(UART_Recv_IDLE,<span class="string">&#x27;\0&#x27;</span>,Size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为只能接受一次串口中断，所以在串口中断触发函数需要重新调用</span></span><br><span class="line">HAL_UARTEx_ReceiveToIdle_DMA(&amp;huart1, UART_Recv_IDLE, RECV_Size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;串口理论部分可看51部分：&lt;a href=&quot;https://blog.csdn.net/qq_65047384/article/details/140470283&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据帧 &amp;#x3D; 帧头(2字节，例如AA、BB) + 数据长度（2字节）+ </summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>完美解决443端口被vmware占用的问题</title>
    <link href="http://example.com/post/b94c2cf2.html"/>
    <id>http://example.com/post/b94c2cf2.html</id>
    <published>2024-08-04T14:54:51.000Z</published>
    <updated>2024-08-19T05:23:51.640Z</updated>
    
    <content type="html"><![CDATA[<p> 第一步，打开虚拟机，找到首选项</p><img src="https://s2.loli.net/2024/08/19/cUmt1MFpeDLVAxg.png" alt="进入首选项" style="zoom:50%;"><p>第二步，选择共享虚拟机，修改端口号，保存</p><img src="https://s2.loli.net/2024/08/19/5tJrqO2o3cSTYQH.png" alt="修改端口" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 第一步，打开虚拟机，找到首选项&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2024/08/19/cUmt1MFpeDLVAxg.png&quot; alt=&quot;进入首选项&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;第二步，选择共享虚拟机，修改端口号，保</summary>
      
    
    
    
    <category term="Windows使用技巧" scheme="http://example.com/categories/Windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="解决443端口被vmware占用" scheme="http://example.com/tags/%E8%A7%A3%E5%86%B3443%E7%AB%AF%E5%8F%A3%E8%A2%ABvmware%E5%8D%A0%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>win10桌面图标变白</title>
    <link href="http://example.com/post/a06b5fda.html"/>
    <id>http://example.com/post/a06b5fda.html</id>
    <published>2024-08-04T14:54:31.000Z</published>
    <updated>2024-08-19T05:29:50.464Z</updated>
    
    <content type="html"><![CDATA[<p> 1、双击打开此电脑，点击【查看】，勾选<strong>【隐藏的项目】</strong></p><img src="https://s2.loli.net/2024/08/19/bHVnR4fCvKPWkdU.png" alt="关闭隐藏" style="zoom:50%;"><p>2、同时按 【Win + R】键打开运行，输入<strong>【%localappdata%】</strong>回车确定</p><img src="https://s2.loli.net/2024/08/19/zS47mboVWUT2t8L.png" alt="打开命令" style="zoom:50%;"><p>3、右键选择删除<strong>lconCache.db</strong>文件</p><img src="https://s2.loli.net/2024/08/19/xVD4t6Z2waeOobJ.png" alt="删除文件" style="zoom:50%;"><p>4、同时按【Shift + Ctrl + Esc】键打开任务管理器，找到<strong>Windows 资源管理器</strong>，右键选择重新启动</p><img src="https://s2.loli.net/2024/08/19/Br4WZfbVKH3ahiy.png" alt="资源管理器" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 1、双击打开此电脑，点击【查看】，勾选&lt;strong&gt;【隐藏的项目】&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2024/08/19/bHVnR4fCvKPWkdU.png&quot; alt=&quot;关闭隐藏&quot; style=&quot;zoom:50%</summary>
      
    
    
    
    <category term="Windows使用技巧" scheme="http://example.com/categories/Windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="win10桌面图标变白" scheme="http://example.com/tags/win10%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87%E5%8F%98%E7%99%BD/"/>
    
  </entry>
  
  <entry>
    <title>通过 Cloudflare 和 JsDelivr 免费加速博客 GitHub 图床等静态资源</title>
    <link href="http://example.com/post/3e643b17.html"/>
    <id>http://example.com/post/3e643b17.html</id>
    <published>2024-08-03T09:25:05.000Z</published>
    <updated>2024-08-19T09:36:54.646Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a><center>前言</center></h1><p>本文通过学习此博客编写：<a href="https://www.haoyep.com/posts/github-graph-beds-cdn/#%E9%85%8D%E7%BD%AE%E5%9F%9F%E5%90%8D">地址</a>，通过 Cloudflare 和 jsDelivr 免费加速博客 GitHub 静态资源(GitHub图床)，自动实现 CDN 资源的海内外分流，加速博客访问速度。</p><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a><center>配置</center></h1><p>首先，要配置好域名以及DNS，本人已经写了配置域名以及 Cloudflare DNS加速部署博客：<a href="https://d3iiz.top/post/b7e3ace9.html">地址</a></p><p>进入部署好的DNS</p><img src="https://s2.loli.net/2024/08/19/wByunPAEVNeRHhr.png" alt="进入" style="zoom:50%;"><p>在 DNS 配置中，新增一条 CNAME 解析记录，并启用代理。 如图，我这里是将 cdn.haoyep.com 解析到了 jsd.cdn.zzko.cn，并使用 Cloudflare 代理（点亮小云朵）</p><img src="https://s2.loli.net/2024/08/19/sWP96IXVZEliOY2.png" alt="添加记录" style="zoom: 33%;"><p>目标：资源链接都使用 cdn.haoyep.com，Cloudflare 在代理 cdn.haoyep.com 时，判断请求来源是国内，则将 cdn.haoyep.com 重定向到 jsd.cdn.zzko.cn；国外的请求则重定向到 cdn.jsdelivr.net。</p><h2 id="配置国内重定向"><a href="#配置国内重定向" class="headerlink" title="配置国内重定向"></a><center>配置国内重定向</center></h2><p>规则名称 （必需）：标注国内，方便区分</p><p>自定义筛选表达式：<code>(http.host eq &quot;cdn.haoyep.com&quot; and ip.geoip.country eq &quot;CN&quot;)</code></p><p>URL 重定向</p><ul><li>类型：<code>动态</code></li><li>表达式：<code>concat(&quot;https://jsd.cdn.zzko.cn&quot;, http.request.uri.path)</code></li><li>状态代码：<code>302</code></li></ul><img src="https://s2.loli.net/2024/08/19/RtB3Af12IjbdZa7.png" alt="配置国内重定向" style="zoom:50%;"><h2 id="配置国外重定向"><a href="#配置国外重定向" class="headerlink" title="配置国外重定向"></a><center>配置国外重定向</center></h2><p>规则名称 （必需）：标注国外，方便区分</p><p>自定义筛选表达式：(<code>http.host eq &quot;cdn.haoyep.com&quot; and ip.geoip.country ne &quot;CN&quot;</code>)</p><p>URL 重定向</p><ul><li>类型：<code>动态</code></li><li>表达式：<code>concat(&quot;https://cdn.jsdelivr.net&quot;, http.request.uri.path)</code></li><li>状态代码：<code>302</code></li></ul><img src="https://s2.loli.net/2024/08/19/kcNSnDshqaTyHrU.png" alt="配置国外重定向" style="zoom:50%;"><blockquote><p>技巧：<br>HTTP 重定向状态选择302而不是301。虽然两类请求都会被 Cloudflare 缓存，但301理论上是永久跳转而302是临时跳转，因此301可能会导致长时间缓存，不利于今后修改重定向到新地址。</p></blockquote><h2 id="PicGo-设置"><a href="#PicGo-设置" class="headerlink" title="PicGo 设置"></a><center>PicGo 设置</center></h2><p>我们已经除了GitHub上传图片教程：<a href="https://blog.csdn.net/qq_65047384/article/details/140401010">地址</a></p><p>这里只需修改，自定义域名连接里面的<code>cdn.haoyep.com</code>，修改成自己的，其它按之前的配置即可</p><img src="https://s2.loli.net/2024/08/19/lGdpRj7S5ngZ9XA.png" alt="PicGo配置" style="zoom:50%;"><p>之前已经上传的图片，也只需要将图片链接中的<code>cdn.haoyep.com</code>，修改成自己的，在Typora可以ctrl+f，直接全部替换即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;&lt;center&gt;前言&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;本文通过学习此博客编写：&lt;a href=&quot;https://www.haoyep.com/posts/git</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="博客加速图床" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E5%8A%A0%E9%80%9F%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>利用cloudflare加速github博客访问</title>
    <link href="http://example.com/post/b7e3ace9.html"/>
    <id>http://example.com/post/b7e3ace9.html</id>
    <published>2024-08-03T09:24:43.000Z</published>
    <updated>2024-08-19T08:41:53.268Z</updated>
    
    <content type="html"><![CDATA[<h1 id="域名购买"><a href="#域名购买" class="headerlink" title="域名购买"></a><center>域名购买</center></h1><p>阿里可能需要实名认证等，在注册账号是，按照提示注册即可，购买期间若需补充其它信息，按要求补充即可</p><p>这里选择阿里云的域名，提供的这个的非常便宜实惠的域名，但是续费可能就是原价，可以一年换一次，购买：<a href="https://mi.aliyun.com/?spm=5176.29045373.J_2177541330.5.3d1d183838ot1j#eyJwcm9kdWN0VHlwZSI6MiwicXVpY2tTZWFyY2giOiJbXCJcIl0iLCJrZXl3b3JkIjoiIiwiY29uc3RpdHV0ZUFyciI6WyIiXSwiZml4ZWRQcmljZVNlYXJjaFR5cGUiOiJzZWxlY3RlZCIsInF1aWNrU29ydCI6WyJwcmljZSIsImFzY2VuZCJdLCJtYXhTYWxlQXZhaWxEYXkiOiIiLCJzYWxlQXZhaWxEYXlSYW5nZSI6eyJtaW5TYWxlQXZhaWxEYXkiOiIiLCJtYXhTYWxlQXZhaWxEYXkiOiIifSwibWluRG9tYWluQXZhaWxEYXkiOjMwMCwiZG9tYWluQXZhaWxEYXlSYW5nZSI6eyJtaW5Eb21haW5BdmFpbERheSI6MzAwLCJtYXhEb21haW5BdmFpbERheSI6IiJ9LCJzZXNzaW9uQ29kZSI6ImV6bXZHaF81WWEyVGtxNXZGMEs5cyIsImNvbnN0aXR1dGUiOiIiLCJtaW5TYWxlQXZhaWxEYXkiOiIiLCJtYXhEb21haW5BdmFpbERheSI6IiIsInRhYiI6InNlbGVjdGVkIn0=">地址</a>。</p><p>购买完成后，在控制台看是否成功，可能需要等待几分钟</p><img src="https://s2.loli.net/2024/08/19/PCDavO6Ws24dxqF.png" alt="控制台" style="zoom: 33%;"><p>进入控制台后，进入域名控制台</p><img src="https://s2.loli.net/2024/08/19/nxbOyZ9dekuaqiQ.png" alt="查看域名" style="zoom: 33%;"><p>这里可查看域名</p><img src="https://s2.loli.net/2024/08/19/C6uaRMOSYngUb3A.png" alt="域名列表" style="zoom:33%;"><h1 id="修改DNS"><a href="#修改DNS" class="headerlink" title="修改DNS"></a><center>修改DNS</center></h1><p>在域名列表点击 管理</p><img src="https://s2.loli.net/2024/08/19/JHVeQP26MWrxYlF.png" alt="第一步" style="zoom: 33%;"><p>修改DNS，添加需要的</p><img src="https://s2.loli.net/2024/08/19/praL8wKd2TtJoqx.png" alt="修改DSN" style="zoom:33%;"><h1 id="域名购买-1"><a href="#域名购买-1" class="headerlink" title="域名购买"></a><center>域名购买</center></h1><p><a href="https://www.cloudflare-cn.com/">cloudflare地址</a>，进入后直接先注册账号</p><p>设置成中文，进入网站绑定域名</p><img src="https://s2.loli.net/2024/08/19/3dOVXtECnAIUvuM.png" alt="进入网站选项" style="zoom:33%;"><p>在左侧栏中进入网站一栏，点击右方添加站点，第一次可能没有这个，但中间有一个可以直接添加</p><img src="https://s2.loli.net/2024/08/19/2g4ZDBu73IUnQzL.png" alt="添加站点" style="zoom:33%;"><p>输入自己的域名，注意不要带<code>www</code>或者<code>https</code>，比如我的就直接填写<code>qinyu.space</code></p><img src="https://s2.loli.net/2024/08/19/eOshYyxlUoM3JpP.png" alt="添加域名" style="zoom:50%;"><p>选择套餐，<code>free</code>即可</p><img src="https://s2.loli.net/2024/08/19/CmZ18OLqXItDFw7.png" alt="选择套餐" style="zoom: 33%;"><p>点击继续后 cloudflare 会自动扫描域名的 dns 记录，如果是刚刚创建的域名，可能扫描的结果为空。<strong>截图中的几条记录可以不用管</strong></p><img src="https://s2.loli.net/2024/08/19/vQ3KEqijzxAnGm4.png" alt="添加DNS记录" style="zoom: 33%;"><p>这一步很重要，点击添加记录，按照如下方式添加<code>类型为A</code>，名称为<code>@</code>，IPv4地址为<code>185.199.108.153</code>，<strong>按照上述方式再添加以下三条记录，类型和名称和上述相同，IPv4地址分别为</strong>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">185.199.109.153</span><br><span class="line">185.199.110.153</span><br><span class="line">185.199.111.153</span><br></pre></td></tr></table></figure><p>完成之后应该能看到列表中有以下四条这样的记录，除了名称是自己的域名外其他应该都和图中相同</p><img src="https://s2.loli.net/2024/08/19/tKYZCgTSnbExFhm.png" alt="添加后" style="zoom:50%;"><p>上述添加的4条ip地址均是GitHub Pages 的 IP 地址，具体可查看<a href="https://docs.github.com/zh/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site">地址</a></p><p>点击继续后，往下滑 cloudflare 会要求将我们DNS服务器修改为以下图中所示的的服务器，可以先截个图或者存文档里</p><img src="https://s2.loli.net/2024/08/19/XynqkHMOZBagd6Y.png" alt="DNS服务器" style="zoom:50%;"> <p>点击下方继续后会有一个快速入门指南，里面的配置可以都开启：</p><img src="https://s2.loli.net/2024/08/19/yZEQ6RPhUNkgYfn.png" alt="配置都开启" style="zoom: 50%;"><p>回到上面讲述修改DNS，DNS服务器更改后生效需要一段时间，少则几分钟，慢则需要几个小时</p><p>返回 cloudflare，如果看到 “Cloudflare 正在保护您的站点”说明已经配置成功了：</p><img src="https://s2.loli.net/2024/08/19/cO1BGk7CXFNMeTU.png" alt="配置成功" style="zoom:50%;"><h1 id="设置Github-page"><a href="#设置Github-page" class="headerlink" title="设置Github page"></a><center>设置Github page</center></h1><p>进入github.io对应的仓库，进入 <code>Settings</code>：</p><img src="https://s2.loli.net/2024/08/19/oe5MBzLKwDOriES.png" alt="进入设置" style="zoom: 33%;"><p>进入左栏中的<code>pages</code>，在 <code>Custom domain</code>中输入自己的域名，点击<code>save</code>，如果成功会显示下图：</p><img src="https://s2.loli.net/2024/08/19/x7vT54ZHGwgaWCM.png" alt="添加域名" style="zoom: 33%;"><p>这样就可以通过域名来访问自己的博客了，还可以在上图中勾选 <code>Enforcrs HTTPS</code>，这样网站仅会通过https提供服务。</p><blockquote><p>如果如下图显示dns配置不正确，推测可能是使用了cloudflare后，GitHub验证DNS时返回的是cdn服务器的ip地址，而不是在cloudflare上开始配置的4个GitHub page的ip地址，可以在线dig一下自己的域名验证一下。不过只要网站能通过域名正常访问就没什么问题。</p><img src="https://s2.loli.net/2024/08/19/1aWPU4ry8Obgj9l.png" alt="提示" style="zoom:50%;"></blockquote><p>本文参考：<a href="https://qinyu.space/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%88%A9%E7%94%A8cloudflare%E5%8A%A0%E9%80%9Fgithub%E4%B8%BB%E9%A1%B5%E8%AE%BF%E9%97%AE/#%E9%85%8D%E7%BD%AE-cloudflare">地址</a></p><h1 id="cloudflare自动部署博客"><a href="#cloudflare自动部署博客" class="headerlink" title="cloudflare自动部署博客"></a><center>cloudflare自动部署博客</center></h1><p>新建部署，绑定GitHub账号选择对应仓库绑定即可</p><img src="https://s2.loli.net/2024/08/19/uFgSrPBvxpLb4zK.png" alt="新建部署" style="zoom:33%;"><p>绑定自己的域名</p><img src="https://s2.loli.net/2024/08/19/sF9ChQeiypZRMO7.png" alt="绑定域名" style="zoom: 33%;"><p>关于GitHub仓库图片加速参考：<a href="https://d3iiz.top/post/3e643b17">链接</a>，不一定有作用，可以将图片编成格式：<code>WebP</code></p><p>可以把机器人导入仓库压缩图片：<a href="https://imgbot.net/">链接</a></p><p>或者使用免费图床，参考已写博文：<a href="https://d3iiz.top/post/2ec6e870">链接</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;域名购买&quot;&gt;&lt;a href=&quot;#域名购买&quot; class=&quot;headerlink&quot; title=&quot;域名购买&quot;&gt;&lt;/a&gt;&lt;center&gt;域名购买&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;阿里可能需要实名认证等，在注册账号是，按照提示注册即可，购买期间若需补充其它信息，按要求补</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="加速github博客访问" scheme="http://example.com/tags/%E5%8A%A0%E9%80%9Fgithub%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>2.外部中断(EXTI)</title>
    <link href="http://example.com/post/eb0bc4a3.html"/>
    <id>http://example.com/post/eb0bc4a3.html</id>
    <published>2024-08-03T09:21:42.000Z</published>
    <updated>2024-08-19T01:33:52.584Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>NVIC：嵌套向量中断控制器（<a href="https://blog.csdn.net/m0_74761015/article/details/136269042">解释教程</a>）</p><p>外部通用中断线(<code>EXTI0~EXTI15</code>)：每个GPIO设置成中断模式，与中断控制器连接的线</p><h2 id="外部中断触发方式"><a href="#外部中断触发方式" class="headerlink" title="外部中断触发方式"></a><center>外部中断触发方式</center></h2><p>上升沿触发、下降沿触发、双边沿触发</p><h2 id="外部中断触发函数"><a href="#外部中断触发函数" class="headerlink" title="外部中断触发函数"></a><center>外部中断触发函数</center></h2><p>在stm32f1xx_it.c文件里(大概204行)</p><table><thead><tr><th align="center">中断触发函数</th></tr></thead><tbody><tr><td align="center">EXTI0_IRQHandler</td></tr><tr><td align="center">EXTI1_IRQHandler</td></tr><tr><td align="center">EXTI2_IRQHandler</td></tr><tr><td align="center">EXTI3_IRQHandler</td></tr><tr><td align="center">EXTI4_IRQHandler</td></tr><tr><td align="center">EXTI9_5_IRQHandler</td></tr><tr><td align="center">EXTI15_10_IRQHandler</td></tr></tbody></table><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a><center>解析</center></h2><p>解析初始化中断过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//gpio.c中58</span></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PEPin PEPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = EXTI_Key1_Pin|EXTI_Key2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);<span class="comment">//将上面三行代码的数据传入这个函数解析初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_gpio.c中286</span></span><br><span class="line"><span class="comment">/*--------------------- EXTI Mode Configuration ------------------------*/</span></span><br><span class="line"><span class="comment">/* Configure the External Interrupt or event for the current IO */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; EXTI_MODE) == EXTI_MODE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Enable AFIO Clock */</span></span><br><span class="line">__HAL_RCC_AFIO_CLK_ENABLE();<span class="comment">//打开复用时钟</span></span><br><span class="line">temp = AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>];</span><br><span class="line">CLEAR_BIT(temp, (<span class="number">0x0F</span>u) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));</span><br><span class="line">SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));</span><br><span class="line">AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>] = temp;<span class="comment">//把固定引脚设置成复用模式(如复用成外部中断)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置上升沿还是下降沿</span></span><br><span class="line"><span class="comment">/* Enable or disable the rising trigger */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; RISING_EDGE) == RISING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;RTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;RTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable or disable the falling trigger */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; FALLING_EDGE) == FALLING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;FTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;FTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure the event mask */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_EVT) == GPIO_MODE_EVT)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;EMR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;EMR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开或关闭中断</span></span><br><span class="line"><span class="comment">/* Configure the interrupt mask */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_IT) == GPIO_MODE_IT)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;IMR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;IMR, iocurrent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中断实现过程</strong></p><ol><li>确认中断</li><li>清除中断标志位</li><li>执行中断回调函数</li></ol><img src="https://s2.loli.net/2024/08/19/cGwe9jfI5CtgXR3.png" alt="图示" style="zoom:50%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stm32f1xx_it.：大概204行</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI3_IRQHandler</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//中断入口函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 0 */</span></span><br><span class="line">  HAL_GPIO_EXTI_IRQHandler(EXTI_Key1_Pin);<span class="comment">//在库函数不能写</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span><span class="comment">//stm32f1xx_hal_gpio.c：大概546行</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* EXTI line interrupt detected */</span></span><br><span class="line">  <span class="keyword">if</span> (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != <span class="number">0x00</span>u)<span class="comment">//判断有没有中断触发(有:1,没:0)</span></span><br><span class="line">  &#123;</span><br><span class="line">    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);<span class="comment">//若进来则为1，为1则清除中断标志位</span></span><br><span class="line">    HAL_GPIO_EXTI_Callback(GPIO_Pin);<span class="comment">//回调函数(Callback)，执行函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_gpio.h中190</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__) (EXTI-&gt;PR &amp; (__EXTI_LINE__))<span class="comment">//挂起寄存器(EXTI_PR)(参考手册140) 有没有中断触发</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_gpio.h中198</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__) (EXTI-&gt;PR = (__EXTI_LINE__))<span class="comment">//赋值，(参考手册140)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用这个函数，__weak：弱声明，若别文件也有相同的函数，优先调用没有弱声明</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span><span class="comment">//stm32f1xx_hal_gpio.c：大概561行</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Prevent unused argument(s) compilation warning */</span></span><br><span class="line">  UNUSED(GPIO_Pin);</span><br><span class="line">  <span class="comment">/* <span class="doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span></span><br><span class="line"><span class="comment">           the HAL_GPIO_EXTI_Callback could be implemented in the user file</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若相同有一个PA0设置了中断，别的PB0等等都不能设置成中断</p><img src="https://s2.loli.net/2024/08/19/7RmikXrcqnvBgKs.png" alt="解析图" style="zoom: 50%;"><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>实验：按键PE3控制蜂鸣器(PB8)、按键PE4控制LED灯(PB5)</p><h2 id="LED灯、蜂鸣器、按键配置"><a href="#LED灯、蜂鸣器、按键配置" class="headerlink" title="LED灯、蜂鸣器、按键配置"></a><center>LED灯、蜂鸣器、按键配置</center></h2><p>LED灯、蜂鸣器配置，上一篇已经说过，<a href="https://d3iiz.top/post/adb202b7.html">地址</a></p><p>按键设置<code>下降沿触发</code>(也可上升沿触发)，GPIO Pull-up&#x2F;Pull-down：设置上拉，空闲状态为高电平</p><p>按键没按下时高电平，按下时有下降沿和上升沿，所以两个触发都可，按键这里是中断触发功能，不是GPIO输入功能</p><img src="https://s2.loli.net/2024/08/19/MlziWawDkUVYgQX.png" alt="按键设置图" style="zoom: 50%;"><p>配置NVIC(嵌套向量中断控制器)</p><img src="https://s2.loli.net/2024/08/19/58IR4kTWyzZQ3Hb.png" alt="配置NVIC" style="zoom:50%;"><p>调节不同中断优先级(数字越小优先级越高)</p><p>若抢占优先级相同，比较子优先级</p><img src="https://s2.loli.net/2024/08/19/cVDHdAL9rNEYSjW.png" alt="中断优先级" style="zoom: 50%;"><p>调节多少bit对应代码在：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HAL_Init();<span class="comment">//main.c(74)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HAL_StatusTypeDef HAL_Init(void)中的</span></span><br><span class="line">HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);<span class="comment">//stm32f1xx_hal.c(157)</span></span><br></pre></td></tr></table></figure><h2 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h2><p>main.c：144行（在mian函数外任意一个 &#x2F;* USER CODE BEGIN  <em>&#x2F;  &#x2F;</em> USER CODE END  *&#x2F;中）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//若需要延时需要将延时中断优先级比外部中断优先级高，优先级高才可以打断低优先级</span></span><br><span class="line">HAL_Delay(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key1_GPIO_Port, EXTI_Key1_Pin) == <span class="number">0</span>)<span class="comment">//读引脚，相同=0,不同=1</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key2_GPIO_Port, EXTI_Key2_Pin) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>中断处理程序要少用延时的原因<br>中断处理的要求是即时处理，尽快退出。如果在中断中使用延时函数或者使用IO阻塞函数，会影响到系统的实时性。如果下次中断来临，延时或者阻塞还没结束，那么就永远在中断里死循环了。<br>因此，对于中断处理程序的要求是：<br>&ensp;&ensp;&ensp;&ensp;短小精悍，不要处理过多任务<br>&ensp;&ensp;&ensp;&ensp;不使用延时函数或者IO阻塞的函数</p></blockquote><h2 id="Keil代码"><a href="#Keil代码" class="headerlink" title="Keil代码"></a><center>Keil代码</center></h2><p>需要修改的地方如下：</p><p>mian.c(144)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//若需要延时需要将延时中断优先级比外部中断优先级高，优先级高才可以打断低优先级</span></span><br><span class="line">HAL_Delay(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key1_GPIO_Port, EXTI_Key1_Pin) == <span class="number">0</span>)<span class="comment">//读引脚，相同=0,不同=1</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key2_GPIO_Port, EXTI_Key2_Pin) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.h(60)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key1_Pin GPIO_PIN_3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key1_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key1_EXTI_IRQn EXTI3_IRQn</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key2_Pin GPIO_PIN_4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key2_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key2_EXTI_IRQn EXTI4_IRQn</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_GPIO_Port GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_Pin GPIO_PIN_8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_GPIO_Port GPIOB</span></span><br></pre></td></tr></table></figure><p>gpio.c(42)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PEPin PEPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = EXTI_Key1_Pin|EXTI_Key2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PBPin PBPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = LED1_Pin|BEEP_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* EXTI interrupt init*/</span></span><br><span class="line">  HAL_NVIC_SetPriority(EXTI3_IRQn, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">  HAL_NVIC_EnableIRQ(EXTI3_IRQn);</span><br><span class="line"></span><br><span class="line">  HAL_NVIC_SetPriority(EXTI4_IRQn, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">  HAL_NVIC_EnableIRQ(EXTI4_IRQn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stm32f1xx_hal_it.c(204)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI3_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 0 */</span></span><br><span class="line">  HAL_GPIO_EXTI_IRQHandler(EXTI_Key1_Pin);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI4_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI4_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI4_IRQn 0 */</span></span><br><span class="line">  HAL_GPIO_EXTI_IRQHandler(EXTI_Key2_Pin);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI4_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI4_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改延时中断优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HAL_Init();<span class="comment">//main.c(74)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HAL_StatusTypeDef HAL_Init(void)中的</span></span><br><span class="line">HAL_InitTick(TICK_INT_PRIORITY);<span class="comment">//stm32f1xx_hal.c(160)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入参数里修改</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  TICK_INT_PRIORITY            1U<span class="comment">//stm32f1xx_hal_conf.h(132)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;NVIC：嵌套向量中断控制器（&lt;a href=&quot;https://blog.csdn.net/m0_7476</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ST-LINK未能串口keil识别的一个可能解决方案（前提驱动安装无问题）</title>
    <link href="http://example.com/post/a3ad0b3a.html"/>
    <id>http://example.com/post/a3ad0b3a.html</id>
    <published>2024-08-03T08:56:06.000Z</published>
    <updated>2024-08-19T09:22:11.129Z</updated>
    
    <content type="html"><![CDATA[<p>打开这个软件，在点击清除之前，按住单片机复位按钮不放，点击清除按钮，等待3-5秒放开复位按钮，即可清除重置，若提示没识别到，多重复几次，即可重置，重置完成之后再回到烧写软件，即可烧写成功</p><img src="https://s2.loli.net/2024/08/19/AQEx5HyvjGhpwu2.png" alt="软件图" style="zoom:50%;"><p>在烧写时提示烧写成功后会显示如图所示</p><img src="https://s2.loli.net/2024/08/19/BPqYOIGQ2v3UDVh.png" alt="错误提示图" style="zoom:80%;"><p>解决方法：可能某个地方设置错误，我这里是这个没有设置成 Serial Wire，可以把全部设置重新检查一遍</p><img src="https://s2.loli.net/2024/08/19/YKCqVMwZr7PJ5LG.png" alt="方法图" style="zoom:80%;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开这个软件，在点击清除之前，按住单片机复位按钮不放，点击清除按钮，等待3-5秒放开复位按钮，即可清除重置，若提示没识别到，多重复几次，即可重置，重置完成之后再回到烧写软件，即可烧写成功&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2024/08/1</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="ST-LINK未能串口keil识别解决方案" scheme="http://example.com/tags/ST-LINK%E6%9C%AA%E8%83%BD%E4%B8%B2%E5%8F%A3keil%E8%AF%86%E5%88%AB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeIDE代码字体大小</title>
    <link href="http://example.com/post/43a9b762.html"/>
    <id>http://example.com/post/43a9b762.html</id>
    <published>2024-08-03T08:52:40.000Z</published>
    <updated>2024-08-19T09:24:31.738Z</updated>
    
    <content type="html"><![CDATA[<p> 进入首选项设置</p><img src="https://s2.loli.net/2024/08/19/P1QzDuywg6JvdWh.png" alt="进入首选项" style="zoom:50%;"><p>搜索editor，按照图中标号，进行设置</p><img src="https://s2.loli.net/2024/08/19/ZszSKUNbqoRfLhE.png" style="zoom:50%;"><p>按图中标号进行设置，选择需要的字号</p><img src="https://s2.loli.net/2024/08/19/1Iuhj8c4EOGgbrU.png" alt="选字号" style="zoom:50%;"><p>到此设置完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 进入首选项设置&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2024/08/19/P1QzDuywg6JvdWh.png&quot; alt=&quot;进入首选项&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;搜索editor，按照图中标号，进行设置&lt;/p&gt;
&lt;i</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="STM32CubeIDE代码字体大小" scheme="http://example.com/tags/STM32CubeIDE%E4%BB%A3%E7%A0%81%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/"/>
    
  </entry>
  
  <entry>
    <title>DHT11dht11.c(18) error C174 return-expression on void-function</title>
    <link href="http://example.com/post/c4236caa.html"/>
    <id>http://example.com/post/c4236caa.html</id>
    <published>2024-08-03T08:46:17.000Z</published>
    <updated>2024-08-19T05:37:28.569Z</updated>
    
    <content type="html"><![CDATA[<p>表示在函数dht11.c的第18行，有一个返回表达式出现在了一个返回类型为void的函数中。在C语言中，如果一个函数的声明或定义中指定了返回类型为void，那么这个函数不能有任何返回值。</p><p>​    要解决这个问题，你需要检查dht11.c文件中第18行的代码，确保没有返回值。如果该行代码确实需要返回一个值，那么你需要将该函数的返回类型修改为非void类型</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;表示在函数dht11.c的第18行，有一个返回表达式出现在了一个返回类型为void的函数中。在C语言中，如果一个函数的声明或定义中指定了返回类型为void，那么这个函数不能有任何返回值。&lt;/p&gt;
&lt;p&gt;​    要解决这个问题，你需要检查dht11.c文件中第18行的代码，</summary>
      
    
    
    
    <category term="错误记录" scheme="http://example.com/categories/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>STM32烧录的时候报错：Error :Flash Download failed -“Cortex-M3“</title>
    <link href="http://example.com/post/63d3dd68.html"/>
    <id>http://example.com/post/63d3dd68.html</id>
    <published>2024-08-03T08:46:17.000Z</published>
    <updated>2024-08-19T05:41:10.459Z</updated>
    
    <content type="html"><![CDATA[<p> 点击图中标号1，按顺序点击进入设置</p><img src="https://s2.loli.net/2024/08/19/HUSwrAaseI4LKOD.png" alt="进入设置" style="zoom:50%;"><p>按图中标序，进入添加页面</p><img src="https://s2.loli.net/2024/08/19/6w1Kh5v2Bg74qud.png" alt="添加页面" style="zoom:50%;"><p>添加图中所选，然后一直确定退出即可，若没有图中所示选项，可能软件没下载对</p><img src="https://s2.loli.net/2024/08/19/t5pIKjw6uFSZmc1.png" alt="确定" style="zoom:50%;"><p>添加后，即可烧录成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 点击图中标号1，按顺序点击进入设置&lt;/p&gt;
&lt;img src=&quot;https://s2.loli.net/2024/08/19/HUSwrAaseI4LKOD.png&quot; alt=&quot;进入设置&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;按图中标序，进入添加页面&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="错误记录" scheme="http://example.com/categories/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>stm32cubeIDE与stm32cubeMX库文件安装路径自定义设置</title>
    <link href="http://example.com/post/32e9e993.html"/>
    <id>http://example.com/post/32e9e993.html</id>
    <published>2024-08-03T08:44:26.000Z</published>
    <updated>2024-08-19T09:27:01.694Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、-stm32cubeMX库文件安装路径自定义设置"><a href="#1、-stm32cubeMX库文件安装路径自定义设置" class="headerlink" title="1、 stm32cubeMX库文件安装路径自定义设置"></a>1、 stm32cubeMX库文件安装路径自定义设置</h1><p>打开stm32cubeMX软件，依次点击标题栏【Help】→【Updater Settings】 </p><img src="https://s2.loli.net/2024/08/19/JLheYWSMProxE9N.png" style="zoom:50%;"><hr><p>点击图中的【Browser】，选择自己想要存放库文件的文件夹，选择完成后点击【OK】即可设置成功。 </p><img src="https://s2.loli.net/2024/08/19/vfIDTXqhRkMzLuG.png" style="zoom:50%;"><p> PS：这里的路径建议选择软件的安装目录</p><h1 id="2、-stm32cubeIDE库安装路径自定义设置"><a href="#2、-stm32cubeIDE库安装路径自定义设置" class="headerlink" title="2、 stm32cubeIDE库安装路径自定义设置"></a>2、 stm32cubeIDE库安装路径自定义设置</h1><p>首先打开 stm32cubeIDE软件，然后依次点击【Window】→【Preference】</p><img src="https://s2.loli.net/2024/08/19/fFpBHGnV5LtIaQr.png" style="zoom:50%;"><hr><p> 依次点击左侧【STM32Cube】→【Firmware Updater】，点击上图中的【Browser】，选择自己想要存放库文件的文件夹，选择完成后点击【Apply and Close】即可设置成功</p><img src="https://s2.loli.net/2024/08/19/1CisUhRVynDZS4j.png" style="zoom: 67%;"><p>PS：stm32cubeIDE与stm32cubeMX的库文件是通用的，也可以直接选择了stm32cubeMX的库文件路径，这样stm32cubeIDE就可以自动识别文件夹中已有的库文件，避免库文件重复下载，节省了内存。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、-stm32cubeMX库文件安装路径自定义设置&quot;&gt;&lt;a href=&quot;#1、-stm32cubeMX库文件安装路径自定义设置&quot; class=&quot;headerlink&quot; title=&quot;1、 stm32cubeMX库文件安装路径自定义设置&quot;&gt;&lt;/a&gt;1、 stm32</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="IDE与MX库文件安装路径自定义设置" scheme="http://example.com/tags/IDE%E4%B8%8EMX%E5%BA%93%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
</feed>
