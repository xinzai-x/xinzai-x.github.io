<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星仔人生录</title>
  
  <subtitle>珍惜当下 不负此生</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-15T14:23:31.020Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>星仔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>9.DAC(数字信号转模拟信号)</title>
    <link href="http://example.com/post/52772f76.html"/>
    <id>http://example.com/post/52772f76.html</id>
    <published>2024-08-15T14:22:06.000Z</published>
    <updated>2024-08-15T14:23:31.020Z</updated>
    
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>8.看门狗(WDG)</title>
    <link href="http://example.com/post/f0812160.html"/>
    <id>http://example.com/post/f0812160.html</id>
    <published>2024-08-15T14:05:49.000Z</published>
    <updated>2024-08-15T14:23:31.018Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>防止系统跑飞</p><p>喂狗：让值为0</p><p>分类：独立看门狗(IWDG,0到100喂狗)、窗口看门狗(60到100喂狗)，值(60)，顶值(100)</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>按键喂狗</p><h2 id="独立看门狗配置"><a href="#独立看门狗配置" class="headerlink" title="独立看门狗配置"></a><center>独立看门狗配置</center></h2><p>超过10s，复位</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408152206794.png" alt="看门狗配置" style="zoom:50%;"><hr><p>注意时钟：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408152207964.png" alt="看门狗时钟" style="zoom:50%;"><p>按键、LED灯配置参考：<a href="https://d3iiz.top/post/adb202b7">链接</a></p><h2 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h2><p>mian.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="comment">//超过时间看门狗触发复位闪灯</span></span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">0</span>);<span class="comment">//93行</span></span><br><span class="line">HAL_Delay(<span class="number">500</span>);</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">1</span>);</span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin) == <span class="number">0</span>)<span class="comment">//102行,while里</span></span><br><span class="line">HAL_IWDG_Refresh(&amp;hiwdg);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;防止系统跑飞&lt;/p&gt;
&lt;p&gt;喂狗：让值为0&lt;/p&gt;
&lt;p&gt;分类：独立看门狗(IWDG,0到100喂狗)、窗</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>7.实时时钟(RTC)</title>
    <link href="http://example.com/post/e8bc8f26.html"/>
    <id>http://example.com/post/e8bc8f26.html</id>
    <published>2024-08-14T13:12:02.000Z</published>
    <updated>2024-08-15T14:04:58.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>使用时钟晶振：32.768KHz(2^{15}^)</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>OLED显示实时时间，串口打印</p><h2 id="晶体、RTC配置"><a href="#晶体、RTC配置" class="headerlink" title="晶体、RTC配置"></a><center>晶体、RTC配置</center></h2><h3 id="晶体配置"><a href="#晶体配置" class="headerlink" title="晶体配置"></a>晶体配置</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408151041859.png" alt="晶体配置" style="zoom:50%;"><hr><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408151041494.png" alt="配置时钟" style="zoom:50%;"><h3 id="RTC配置"><a href="#RTC配置" class="headerlink" title="RTC配置"></a>RTC配置</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408151041569.png" alt="RTC配置" style="zoom:50%;"><p>串口配置参考：<a href="https://d3iiz.top/post/2c4c3bc3">链接</a></p><h2 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h2><p>mian.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line">RTC_TimeTypeDef RTC_Time;<span class="comment">//48行</span></span><br><span class="line">RTC_DateTypeDef RTC_Date;</span><br><span class="line"><span class="type">uint8_t</span> RTC_Buff[<span class="number">200</span>];</span><br><span class="line"><span class="type">uint8_t</span> RTC_Buff1[<span class="number">200</span>];</span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while里，108行</span></span><br><span class="line"><span class="comment">/* 参数1：指向 RTC_HandleTypeDef 结构的指针，该结构包含RTC 的配置信息</span></span><br><span class="line"><span class="comment">* 参数2：指向时间结构的指针，参数3：RTC_FORMAT_BIN:二进制数据格式，RTC_FORMAT_BCD:十六进制数据格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">HAL_RTC_GetTime(&amp;hrtc, &amp;RTC_Time, RTC_FORMAT_BIN);<span class="comment">//获取时分秒</span></span><br><span class="line"><span class="built_in">sprintf</span>(RTC_Buff,<span class="string">&quot;Time:%d:%d:%d\r\n&quot;</span>, RTC_Time.Hours, RTC_Time.Minutes, RTC_Time.Seconds);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, RTC_Buff, <span class="built_in">strlen</span>(RTC_Buff), <span class="number">100</span>);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">HAL_RTC_GetDate(&amp;hrtc, &amp;RTC_Date, RTC_FORMAT_BIN);<span class="comment">//获取年月日星期</span></span><br><span class="line"><span class="built_in">sprintf</span>(RTC_Buff1,<span class="string">&quot;Date:%d:%d:%d,WeekDay:%d\r\n&quot;</span>, RTC_Date.Year, RTC_Date.Month, RTC_Date.Date, RTC_Date.WeekDay);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, RTC_Buff1, <span class="built_in">strlen</span>(RTC_Buff1), <span class="number">100</span>);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;使用时钟晶振：32.768KHz(2^{15}^)&lt;/p&gt;
&lt;h1 id=&quot;代码编写&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>6.IIC通信</title>
    <link href="http://example.com/post/f5fba2c3.html"/>
    <id>http://example.com/post/f5fba2c3.html</id>
    <published>2024-08-13T09:53:28.000Z</published>
    <updated>2024-08-15T12:58:23.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>参考51单片机IIC理论：<a href="https://d3iiz.top/post/f5fba2c3.html">链接</a></p><p>在起始信号后必须发送一个7位从机地址 + 1位方向位，用“0”表示主机发送数据，“1”表示主机接收数据</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><h2 id="IIC三个模式配置"><a href="#IIC三个模式配置" class="headerlink" title="IIC三个模式配置"></a><center>IIC三个模式配置</center></h2><h3 id="IIC-阻塞模式-配置"><a href="#IIC-阻塞模式-配置" class="headerlink" title="IIC(阻塞模式)配置"></a>IIC(阻塞模式)配置</h3><p>主要方式</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408142114842.png" alt="IIC(阻塞模式)配置" style="zoom:50%;"><h3 id="IIC-中断模式-配置"><a href="#IIC-中断模式-配置" class="headerlink" title="IIC(中断模式)配置"></a>IIC(中断模式)配置</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408142114758.png" alt="IIC(中断模式)配置" style="zoom:50%;"><h3 id="IIC-DMA模式-配置"><a href="#IIC-DMA模式-配置" class="headerlink" title="IIC(DMA模式)配置"></a>IIC(DMA模式)配置</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408142113463.png" alt="IIC(DMA模式)配置" style="zoom:50%;"><h2 id="阻塞模式"><a href="#阻塞模式" class="headerlink" title="阻塞模式"></a><center>阻塞模式</center></h2><p>mian.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span><br><span class="line">HAL_Init();<span class="comment">//75行</span></span><br><span class="line">MX_I2C1_Init();</span><br><span class="line"><span class="comment">/* USER CODE BEGIN Init */</span></span><br><span class="line">OLED_Init();<span class="comment">//初始化OLED</span></span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_ShowCHinese(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">18</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">36</span>,<span class="number">0</span>,<span class="number">2</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">54</span>,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">72</span>,<span class="number">0</span>,<span class="number">4</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">90</span>,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">108</span>,<span class="number">0</span>,<span class="number">6</span>);<span class="comment">//�?</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">0</span>,<span class="number">2</span>,<span class="number">6</span>);<span class="comment">//�?</span></span><br><span class="line"><span class="comment">/* USER CODE END Init */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>olde.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Command命令</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Command</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Command)</span><span class="comment">//10行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//   IIC_Start();</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x78);            //Slave address,SA0=0</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x00);//write command</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(IIC_Command);</span></span><br><span class="line"><span class="comment">//   IIC_Stop();</span></span><br><span class="line"> <span class="type">uint8_t</span> IIC_Send_Cmd[]=&#123;<span class="number">0x00</span>,IIC_Command&#125;;<span class="comment">//将两个数据放进数组</span></span><br><span class="line"> <span class="comment">/* 参数1：指向 I2C_HandleTypeDef 结构的指针，该结构包含指定 I2C 的配置信息</span></span><br><span class="line"><span class="comment">  * 参数2：设备地址，参数3：</span></span><br><span class="line"><span class="comment">  * 参数4：要发送的数据量，参数5：超时持续时间</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> HAL_I2C_Master_Transmit(&amp;hi2c1, <span class="number">0x78</span>, IIC_Send_Cmd, <span class="number">2</span>, <span class="number">100</span>);<span class="comment">//调用库函数阻塞发送IIC</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Data数据</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//   IIC_Start();</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x78);//D/C#=0; R/W#=0</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x40);//write data</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(IIC_Data);</span></span><br><span class="line"><span class="comment">//   IIC_Stop();</span></span><br><span class="line">   <span class="type">uint8_t</span> IIC_Send_Data[]=&#123;<span class="number">0x40</span>,IIC_Data&#125;;<span class="comment">//将两个数据放进数组</span></span><br><span class="line">   <span class="comment">/* 参数1：指向 I2C_HandleTypeDef 结构的指针，该结构包含指定 I2C 的配置信息</span></span><br><span class="line"><span class="comment">* 参数2：设备地址，参数3：</span></span><br><span class="line"><span class="comment">* 参数4：要发送的数据量，参数5：超时持续时间</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   HAL_I2C_Master_Transmit(&amp;hi2c1, <span class="number">0x78</span>, IIC_Send_Data, <span class="number">2</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="中断模式"><a href="#中断模式" class="headerlink" title="中断模式"></a><center>中断模式</center></h2><p>mian.c与阻塞相同</p><p>oled.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Command命令</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Command</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Command)</span><span class="comment">//10行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//   IIC_Start();</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x78);            //Slave address,SA0=0</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x00);//write command</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(IIC_Command);</span></span><br><span class="line"><span class="comment">//   IIC_Stop();</span></span><br><span class="line"> <span class="type">uint8_t</span> IIC_Send_Cmd[]=&#123;<span class="number">0x00</span>,IIC_Command&#125;;<span class="comment">//将两个数据放进数组</span></span><br><span class="line"> <span class="comment">/* 参数1：指向 I2C_HandleTypeDef 结构的指针，该结构包含指定 I2C 的配置信息</span></span><br><span class="line"><span class="comment">  * 参数2：设备地址，参数3：</span></span><br><span class="line"><span class="comment">  * 参数4：要发送的数据量</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> HAL_I2C_Master_Transmit_IT(&amp;hi2c1, <span class="number">0x78</span>, IIC_Send_Cmd, <span class="number">2</span>);</span><br><span class="line"> HAL_Delay(<span class="number">1</span>);<span class="comment">//如果不延时发太快不显示,但OLED显示太慢</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Data数据</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//   IIC_Start();</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x78);//D/C#=0; R/W#=0</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(0x40);//write data</span></span><br><span class="line"><span class="comment">//   IIC_Write_Byte(IIC_Data);</span></span><br><span class="line"><span class="comment">//   IIC_Stop();</span></span><br><span class="line">   <span class="type">uint8_t</span> IIC_Send_Data[]=&#123;<span class="number">0x40</span>,IIC_Data&#125;;<span class="comment">//将两个数据放进数组</span></span><br><span class="line">   <span class="comment">/* 参数1：指向 I2C_HandleTypeDef 结构的指针，该结构包含指定 I2C 的配置信息</span></span><br><span class="line"><span class="comment">* 参数2：设备地址，参数3：</span></span><br><span class="line"><span class="comment">* 参数4：要发送的数据量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">   HAL_I2C_Master_Transmit_IT(&amp;hi2c1, <span class="number">0x78</span>, IIC_Send_Data, <span class="number">2</span>);</span><br><span class="line">   HAL_Delay(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;参考51单片机IIC理论：&lt;a href=&quot;https://d3iiz.top/post/f5fba2c3</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>office无法初始化VisualBasic</title>
    <link href="http://example.com/post/6928cd3f.html"/>
    <id>http://example.com/post/6928cd3f.html</id>
    <published>2024-08-12T15:37:39.000Z</published>
    <updated>2024-08-15T12:47:20.412Z</updated>
    
    <content type="html"><![CDATA[<p>1.打开word，将 无法初始化visual basic 的弹出框先关掉</p><p>2.点击左上角的 <code>文件</code></p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408122338415.png" alt="点击文件" style="zoom:50%;"><p>3.点击帮助栏目下的 <code>选项</code>，然后点击 <code>加载项</code></p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408122338308.png" alt="进入选项" style="zoom:50%;"><hr><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408122339744.png" alt="进入设置" style="zoom:50%;"><p>4.在弹出的com加载项中将所有带√的选项都去掉(此处不是删除，只是将<code>√去掉</code>)，最后点击<code>确定</code>，重新打开文件</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408122339947.png" alt="取消" style="zoom:50%;"><p>5.大功告成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;1.打开word，将 无法初始化visual basic 的弹出框先关掉&lt;/p&gt;
&lt;p&gt;2.点击左上角的 &lt;code&gt;文件&lt;/code&gt;&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408</summary>
      
    
    
    
    <category term="Windows使用技巧" scheme="http://example.com/categories/Windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="office无法初始化VisualBasic" scheme="http://example.com/tags/office%E6%97%A0%E6%B3%95%E5%88%9D%E5%A7%8B%E5%8C%96VisualBasic/"/>
    
  </entry>
  
  <entry>
    <title>5.ADC(模拟信号转数字信号)</title>
    <link href="http://example.com/post/bfd038f5.html"/>
    <id>http://example.com/post/bfd038f5.html</id>
    <published>2024-08-10T06:45:10.000Z</published>
    <updated>2024-08-15T12:42:28.951Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>3个ADC控制器</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408121609746.png" alt="3个ADC控制器" style="zoom: 67%;"><p>转换：单次转换模式、 连续转换模式</p><p>转换时间 &#x3D; 采样时间 + 12.5周期</p><p>&ensp;&ensp;&ensp;&ensp;当ADCCLK(时钟) &#x3D; 14MHz，采样时间为1.5周期，TcoNv(转换时间) &#x3D; 1.5 + 12.5 &#x3D; 14 周期 &#x3D; 1us</p><p>采样精度：12位&#x2F;16位(2^12^ &#x3D; 4096)</p><p>实际电压值 &#x3D; <code>(通道采集的ADC值 * 3.3) / 4096</code></p><p>数据对齐：左对齐、右对齐</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>电压采集</p><h2 id="ADC、串口一配置"><a href="#ADC、串口一配置" class="headerlink" title="ADC、串口一配置"></a><center>ADC、串口一配置</center></h2><h3 id="ADC-阻塞模式-配置"><a href="#ADC-阻塞模式-配置" class="headerlink" title="ADC(阻塞模式)配置"></a>ADC(阻塞模式)配置</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408121609883.png" alt="配置ADC" style="zoom: 33%;"><hr><p>多个通道时，自动扫描会自动打开使能</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408121609749.png" alt="配置ADC" style="zoom:50%;"><hr><p>修改时钟分频：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408121609690.png" alt="修改时钟配置" style="zoom:33%;"><p>配置串口一打印采集到的电压值，配置方法参考：<a href="https://d3iiz.top/post/2c4c3bc3.html">链接</a></p><h3 id="ADC-DMA模式-配置"><a href="#ADC-DMA模式-配置" class="headerlink" title="ADC(DMA模式)配置"></a>ADC(DMA模式)配置</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408121608683.png" alt="ADC配置" style="zoom:50%;"><p>配置串口一打印采集到的电压值，配置方法参考：<a href="https://d3iiz.top/post/2c4c3bc3.html">链接</a></p><p>修改时钟分频（和上面相同）</p><p>配置DMA：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408121610011.png" alt="配置DMA" style="zoom:33%;"><h3 id="ADC-中断模式-配置"><a href="#ADC-中断模式-配置" class="headerlink" title="ADC(中断模式)配置"></a>ADC(中断模式)配置</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408121611895.png" alt="配置ADC" style="zoom: 50%;"><p>配置串口一打印采集到的电压值，配置方法参考：<a href="https://d3iiz.top/post/2c4c3bc3.html">链接</a></p><p>修改时钟分频（和上面相同）</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408121611274.png" alt="配置ADC中断" style="zoom: 33%;"><h2 id="阻塞模式"><a href="#阻塞模式" class="headerlink" title="阻塞模式"></a><center>阻塞模式</center></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadc1);<span class="comment">//校准，adc.c,94行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//main.c</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint16_t</span> AD_Buf[<span class="number">4</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">uint8_t</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> Send_Buf[<span class="number">50</span>];</span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while里,103行</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)<span class="comment">//4个通道一次采集采集一个通道for4</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_ADC_Start(&amp;hadc1);<span class="comment">//手动使能开始转换</span></span><br><span class="line">HAL_ADC_PollForConversion(&amp;hadc1,<span class="number">10</span>);<span class="comment">//等待转换完成，等待时间10ms，超时结束</span></span><br><span class="line">AD_Buf[i] = HAL_ADC_GetValue(&amp;hadc1);<span class="comment">//获取转换后的值</span></span><br><span class="line"><span class="built_in">sprintf</span>(Send_Buf,<span class="string">&quot;Channel:%d:  V:%1.2f  Value:%d\n\r&quot;</span>, i+<span class="number">1</span>, (<span class="type">float</span>)(AD_Buf[i])*<span class="number">3.3f</span>/<span class="number">4096.0</span>, AD_Buf[i]);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1,Send_Buf, <span class="built_in">strlen</span>(Send_Buf), <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="DMA模式"><a href="#DMA模式" class="headerlink" title="DMA模式"></a><center>DMA模式</center></h2><p>DMA会触发中断</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint16_t</span> AD_Buf[<span class="number">4</span>];<span class="comment">//49行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadc1);<span class="comment">//校准，96行</span></span><br><span class="line"><span class="comment">//参数1：ADC句柄,参数2：目标缓冲区地址,参数3：从 ADC 外设传输到存储器的数据长度(两个通道)</span></span><br><span class="line">HAL_ADC_Start_DMA(&amp;hadc1,(<span class="type">uint32_t</span> *)&amp;AD_Buf,<span class="number">2</span>);</span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AD1= V:%1.2f  Value:%d\n\r&quot;</span>, AD_Buf[<span class="number">0</span>]*<span class="number">3.3</span>/<span class="number">4096.0</span>, AD_Buf[<span class="number">0</span>]);<span class="comment">//105行</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;AD2= V:%1.2f  Value:%d\n\r&quot;</span>, AD_Buf[<span class="number">1</span>]*<span class="number">3.3</span>/<span class="number">4096.0</span>, AD_Buf[<span class="number">1</span>]);<span class="comment">//106行</span></span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="中断模式"><a href="#中断模式" class="headerlink" title="中断模式"></a><center>中断模式</center></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN ADC1_Init 2 */</span></span><br><span class="line">HAL_ADCEx_Calibration_Start(&amp;hadc1);<span class="comment">//校准，adc.c,67行</span></span><br><span class="line">HAL_ADC_Start_IT(&amp;hadc1);<span class="comment">//开启中断模式，即开始采集</span></span><br><span class="line"><span class="comment">/* USER CODE END ADC1_Init 2 */</span></span><br><span class="line"></span><br><span class="line">main.c</span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint16_t</span> Send_Buf[<span class="number">20</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">uint16_t</span> AD_Value;</span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while,102行</span></span><br><span class="line"><span class="built_in">sprintf</span>(Send_Buf,<span class="string">&quot;V:%1.2f  Value:%d\n\r&quot;</span>,(<span class="type">float</span>)(AD_Value)*<span class="number">3.3f</span>/<span class="number">4096.0</span>,AD_Value);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1,Send_Buf, <span class="built_in">strlen</span>(Send_Buf), <span class="number">10</span>);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_ADC_ConvCpltCallback</span><span class="params">(ADC_HandleTypeDef* hadc)</span><span class="comment">//159行</span></span><br><span class="line">&#123;</span><br><span class="line">AD_Value = HAL_ADC_GetValue(&amp;hadc1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;3个ADC控制器&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xi</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>4.定时器(TIMER)</title>
    <link href="http://example.com/post/f71d0ad2.html"/>
    <id>http://example.com/post/f71d0ad2.html</id>
    <published>2024-08-06T08:19:27.000Z</published>
    <updated>2024-08-15T12:42:24.774Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>预分频寄存器(TIMx_PSC)：由于时钟源为：72MHz，T &#x3D; 1&#x2F;f &#x3D; 1&#x2F;72MHz，由于不好计算周期时间，则需要分频，若分72则T &#x3D; 1&#x2F;1MHz &#x3D; 1us(1MHz &#x3D; 一百万秒)</p><p>计数方式：向上(递增到某个数触发中断)、向下(递减到某一个数触发中断)、中心计数(递增到某一个数触发中断，再递减到某一个数触发中断)</p><p>比较值(参考：<a href="https://blog.csdn.net/qq_36553707/article/details/109527645">链接</a>)：</p><p>&ensp;&ensp;&ensp;&ensp;PWM1模式：若计数值小于有效值则高电平，计数值大于有效值则低电平，可以控制比较值来调节占空比</p><p>&ensp;&ensp;&ensp;&ensp;PWM2模式：与PWM1模式相反，计数值小于有效值则低电平，大于有效值则高电平</p><p>复用：Pin脚本身除了支持普通GPIO功能之外，还支持别的功能(使用别的功能就叫复用)</p><p>重映射：Pin脚本身不支持这些功能，配置重映射寄存器，使其具备别的功能</p><h2 id="定时器分类"><a href="#定时器分类" class="headerlink" title="定时器分类"></a><center>定时器分类</center></h2><p>型号：STM32F103ZET6</p><p>基本定时器：TIM6、TIM7</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092327771.png" alt="基本定时器功能" style="zoom: 50%;"><p>通用定时器：TIM2~TIM5</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092327567.png" alt="通用定时器功能" style="zoom:50%;"><p>高级定时器：TIM1、TIM8</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092327762.png" alt="高级定时器功能" style="zoom:50%;"><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>定时器中断实验：LED灯一秒闪烁一次、LED灯两秒闪烁一次、计算单片机运行时间、串口5秒返回单片机运行时间</p><p>PWM信号输出：呼吸灯、电机(由慢到快)、舵机</p><p>输入捕获：检测信号脉冲宽度(舵机脉冲宽度)</p><h2 id="LED灯、UART、定时器、PWM配置"><a href="#LED灯、UART、定时器、PWM配置" class="headerlink" title="LED灯、UART、定时器、PWM配置"></a><center>LED灯、UART、定时器、PWM配置</center></h2><p>LED灯配置请看：<a href="https://d3iiz.top/post/adb202b7.html">链接</a></p><p>串口配置请看：<a href="https://d3iiz.top/post/2c4c3bc3.html">链接</a></p><h3 id="配置定时器："><a href="#配置定时器：" class="headerlink" title="配置定时器："></a>配置定时器：</h3><p>72&#x2F;7200 &#x3D; 0.01，T &#x3D; 1&#x2F;f &#x3D; 1&#x2F;0.01MHz &#x3D; 100us，计数10000，触发中断，100us * 10000 &#x3D; 1s，1s &#x3D; 1000000us，但单片机都是以0开始，所以分频值以及计数值都 -1</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092327709.png" alt="定时器配置" style="zoom: 50%;"><h3 id="配置定时器向上计数溢出中断NVIC-嵌套向量中断控制器"><a href="#配置定时器向上计数溢出中断NVIC-嵌套向量中断控制器" class="headerlink" title="配置定时器向上计数溢出中断NVIC(嵌套向量中断控制器)"></a>配置定时器向上计数溢出中断NVIC(嵌套向量中断控制器)</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408100951812.png" alt="配置定时器NVIC" style="zoom:50%;"><h3 id="定时器-PWM-控制LED灯配置"><a href="#定时器-PWM-控制LED灯配置" class="headerlink" title="定时器(PWM)控制LED灯配置"></a>定时器(PWM)控制LED灯配置</h3><p>LED(PB5)引脚说明：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092327266.png" alt="PWMLED灯配置" style="zoom:50%;"><p>所以配置定时器3，通道二，但配置完发现图中不符，需手动修改</p><p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092327594.png" alt="定时器配置LED灯"></p><h3 id="定时器-PWM-控制电机配置"><a href="#定时器-PWM-控制电机配置" class="headerlink" title="定时器(PWM)控制电机配置"></a>定时器(PWM)控制电机配置</h3><p>配置PB4引脚PWM控制电机速度</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092330260.png" alt="配置PWM控制电机速度" style="zoom:33%;"><h3 id="定时器-PWM-控制舵机配置"><a href="#定时器-PWM-控制舵机配置" class="headerlink" title="定时器(PWM)控制舵机配置"></a>定时器(PWM)控制舵机配置</h3><p>舵机脉冲周期：20ms</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092331367.png" alt="PWM控制舵机配置" style="zoom: 33%;"><h3 id="输入捕获定时器配置"><a href="#输入捕获定时器配置" class="headerlink" title="输入捕获定时器配置"></a>输入捕获定时器配置</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092328847.png" alt="输入捕获定时器配置" style="zoom: 33%;"><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092332188.png" alt="输入捕获定时器配置" style="zoom:50%;"><h3 id="配置定时器全局中断NVIC"><a href="#配置定时器全局中断NVIC" class="headerlink" title="配置定时器全局中断NVIC"></a>配置定时器全局中断NVIC</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408092332662.png" alt="开启中断" style="zoom:50%;"><h3 id="DHT11-温湿度传感器-配置"><a href="#DHT11-温湿度传感器-配置" class="headerlink" title="DHT11(温湿度传感器)配置"></a>DHT11(温湿度传感器)配置</h3><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408101440952.png" alt="DHT11(温湿度传感器)配置" style="zoom: 50%;"><h2 id="LED灯闪烁、串口输出运行时间"><a href="#LED灯闪烁、串口输出运行时间" class="headerlink" title="LED灯闪烁、串口输出运行时间"></a><center>LED灯闪烁、串口输出运行时间</center></h2><p>LED1每隔一秒电平翻转一次，LED2每隔两秒电平翻转一次，串口输出单片机运行时间</p><h3 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//28行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"><span class="type">uint32_t</span> G_Timer_Count = <span class="number">0</span>;<span class="comment">//59行</span></span><br><span class="line"><span class="type">uint8_t</span> UART_Count[<span class="number">200</span>];</span><br><span class="line"><span class="type">uint8_t</span> UART_Flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim1);<span class="comment">//开启定时器，97行</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(UART_Flag)<span class="comment">//104行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(UART_Count,<span class="string">&quot;MCU run time is %lus&quot;</span>,G_Timer_Count);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, UART_Count, <span class="built_in">strlen</span>(UART_Count), <span class="number">1000</span>);</span><br><span class="line">UART_Flag = <span class="number">0</span>;<span class="comment">//打印一次后标志=0，等中断五次(5s)后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span><span class="comment">//定时器触发函数,157行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(htim == &amp;htim1)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">G_Timer_Count++;</span><br><span class="line"><span class="keyword">if</span>((G_Timer_Count % <span class="number">5</span>) == <span class="number">0</span>)</span><br><span class="line">UART_Flag = <span class="number">1</span>;<span class="comment">//每隔五秒，让标志=1</span></span><br><span class="line"><span class="keyword">if</span>((G_Timer_Count % <span class="number">2</span>) == <span class="number">0</span>)<span class="comment">//LED2每隔两秒翻转电平</span></span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="PWM信号LED呼吸灯、电机、舵机"><a href="#PWM信号LED呼吸灯、电机、舵机" class="headerlink" title="PWM信号LED呼吸灯、电机、舵机"></a><center>PWM信号LED呼吸灯、电机、舵机</center></h2><p>理论参考：<a href="https://d3iiz.top/post/93c966f3.html">链接</a></p><p>PWM信号控制LED，产生一个呼吸灯效果，以及对电机控制，控制速度由慢到快</p><h3 id="Cube-IDE代码-1"><a href="#Cube-IDE代码-1" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> PWM_Value = <span class="number">0</span>,LED_PWM_Value = <span class="number">0</span>,SG_PWM = <span class="number">5</span>;<span class="comment">//47行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="comment">//参数1：定时器句柄(指向配置好的定时器结构体的指针)，参数2：定时器通道,93行</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_2);<span class="comment">//开启定时器3，通道2 PWM</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_1);<span class="comment">//开启定时器3，通道1 PWM</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim4, TIM_CHANNEL_1);<span class="comment">//开启定时器4，通道1 PWM</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//103行</span></span><br><span class="line">PWM_Value++;</span><br><span class="line">PWM_Value = PWM_Value % <span class="number">200</span>;</span><br><span class="line"><span class="keyword">if</span>(PWM_Value &gt; <span class="number">99</span>)</span><br><span class="line">LED_PWM_Value = <span class="number">200</span> - PWM_Value;<span class="comment">//大于99时，从大到小(100,99...)</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">LED_PWM_Value = PWM_Value;</span><br><span class="line">HAL_Delay(<span class="number">25</span>);</span><br><span class="line"><span class="comment">//参数1：定时器句柄，参数2：定时器通道,参数3：比较值</span></span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_2, LED_PWM_Value);<span class="comment">//设置LED比较值</span></span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_1, LED_PWM_Value);<span class="comment">//设置电机比较值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(PWM_Value % <span class="number">30</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//每0.1ms计数值+1则0.5ms，比较值模式1，则占空比(高电平)0.5ms</span></span><br><span class="line">SG_PWM += <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span>(SG_PWM &gt; <span class="number">25</span>)</span><br><span class="line">SG_PWM = <span class="number">5</span>;</span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim4, TIM_CHANNEL_1, SG_PWM);<span class="comment">//设置舵机比较值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入捕获-IC"><a href="#输入捕获-IC" class="headerlink" title="输入捕获(IC)"></a><center>输入捕获(IC)</center></h2><p>捕获高电平持续时间</p><h3 id="Cube-IDE代码-2"><a href="#Cube-IDE代码-2" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>捕获PWM高电平的时间</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PTD */</span></span><br><span class="line"><span class="type">uint32_t</span> ic_state=<span class="number">0</span>,period_count=<span class="number">0</span>,ic_count=<span class="number">0</span>,us_count;<span class="comment">//32行</span></span><br><span class="line"><span class="comment">/* USER CODE END PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim2);<span class="comment">//开启普通定时器中断</span></span><br><span class="line">  HAL_TIM_IC_Start_IT(&amp;htim2, TIM_CHANNEL_2);<span class="comment">//开启捕获定时器中断</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please connect MCU51 P2.0,and let SG90 run to detect signal!\n&quot;</span>);<span class="comment">//串口输出捕获的时间(记得配置串口重定向)</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ic_state== <span class="number">2</span> )<span class="comment">//103行(while里)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 始终设置的是1us触发计数值加1</span></span><br><span class="line"><span class="comment">* 一个周期大概65ms，若大于65只有捕获中断函数不好使</span></span><br><span class="line"><span class="comment">* 若period_count为1，则代表过了一个中断周期，时间(1*65535)us</span></span><br><span class="line"><span class="comment">* 若没有到整个中断周期时间则剩下的为：ic_count</span></span><br><span class="line"><span class="comment">* 所以两个相加等于整个高电平时间*/</span></span><br><span class="line">us_count = ic_count + period_count * <span class="number">0xFFFF</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;High level duration:  %ldus \n&quot;</span>,us_count);<span class="comment">//(float)(us_count)/1000.000</span></span><br><span class="line">ic_state = <span class="number">0</span>;<span class="comment">//再将中间键恢复0，方便下次上升沿触发中断计时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span><span class="comment">//输入捕获触发函数,161行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(TIM2 == htim-&gt;Instance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( ic_state == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">__HAL_TIM_SET_COUNTER(htim,<span class="number">0</span>);<span class="comment">//将定时器从零开始计时</span></span><br><span class="line">__HAL_TIM_SET_CAPTUREPOLARITY(&amp;htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);<span class="comment">//设置成下降沿触发</span></span><br><span class="line">ic_state = <span class="number">1</span>;<span class="comment">//下次触发中断时(下降沿)则运行else</span></span><br><span class="line">period_count = <span class="number">0</span>;</span><br><span class="line">ic_count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ic_count = HAL_TIM_ReadCapturedValue(&amp;htim2,TIM_CHANNEL_2);<span class="comment">//读取定时器计数值</span></span><br><span class="line">__HAL_TIM_SET_CAPTUREPOLARITY(&amp;htim2, TIM_CHANNEL_2,   TIM_INPUTCHANNELPOLARITY_RISING);<span class="comment">//设置成上降沿触发</span></span><br><span class="line">ic_state = <span class="number">2</span>;<span class="comment">//进入while里面的判断</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span><span class="comment">//普通定时器中断触发函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(TIM2 == htim-&gt;Instance)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span>(ic_state==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(period_count==<span class="number">0XFFFF</span>)<span class="comment">//一次周期大约65ms，若进入这个需要(65*65535)ms</span></span><br><span class="line">&#123;</span><br><span class="line">ic_state=<span class="number">2</span>;</span><br><span class="line">ic_count=<span class="number">0XFFFF</span>;<span class="comment">//返回一个超大数显示错误</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">period_count++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="DHT11"><a href="#DHT11" class="headerlink" title="DHT11"></a><center>DHT11</center></h2><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dht11.h&quot;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(DHT_Read())<span class="comment">//while里,101行</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; H:%u  T:%u \r\n&quot;</span>,Data[<span class="number">0</span>],Data[<span class="number">2</span>]);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>dht11.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dht11.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> Data[<span class="number">5</span>]=&#123;<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span><span class="comment">//微秒延迟</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">uint16_t</span> differ = <span class="number">0xffff</span>-us;</span><br><span class="line">__HAL_TIM_SET_COUNTER(&amp;htim1,differ);</span><br><span class="line">HAL_TIM_Base_Start(&amp;htim1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(differ &lt; <span class="number">0xffff</span>)&#123;</span><br><span class="line">differ = __HAL_TIM_GET_COUNTER(&amp;htim1);</span><br><span class="line">&#125;</span><br><span class="line">HAL_TIM_Base_Stop(&amp;htim1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT_GPIO_SET_OUTPUT</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.Pin=GPIO_PIN_5;</span><br><span class="line">GPIO_InitStructure.Mode=GPIO_MODE_OUTPUT_PP;<span class="comment">//PA5设置输出</span></span><br><span class="line"><span class="comment">//GPIO_InitStructure.Pull=;</span></span><br><span class="line">GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT_GPIO_SET_INPUT</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line">GPIO_InitStructure.Pin=GPIO_PIN_5;</span><br><span class="line">GPIO_InitStructure.Mode=GPIO_MODE_INPUT;<span class="comment">//PA5设置输入</span></span><br><span class="line">GPIO_InitStructure.Speed=GPIO_SPEED_FREQ_HIGH;</span><br><span class="line">HAL_GPIO_Init(GPIOA,&amp;GPIO_InitStructure);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">DHT_Read_Byte</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">uint8_t</span> ReadData=<span class="number">0</span>;</span><br><span class="line"> <span class="type">uint8_t</span> temp;</span><br><span class="line"> <span class="type">uint8_t</span> retry=<span class="number">0</span>;</span><br><span class="line"> <span class="type">uint8_t</span> i;    </span><br><span class="line"> <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">8</span>; i++)</span><br><span class="line"> &#123;</span><br><span class="line"><span class="keyword">while</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">0</span> &amp;&amp; retry&lt;<span class="number">100</span>)  </span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">Delay_us(<span class="number">1</span>);</span><br><span class="line">  retry++;</span><br><span class="line">&#125;</span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line">Delay_us(<span class="number">40</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">1</span>)   temp=<span class="number">1</span>;</span><br><span class="line"> <span class="keyword">else</span>   temp=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">while</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">1</span> &amp;&amp; retry&lt;<span class="number">100</span>)</span><br><span class="line"> &#123;</span><br><span class="line"> Delay_us(<span class="number">1</span>);</span><br><span class="line"> retry++;</span><br><span class="line"> &#125;</span><br><span class="line"> retry=<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"> ReadData&lt;&lt;=<span class="number">1</span>;</span><br><span class="line"> ReadData |= temp;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ReadData;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">DHT_Read</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="type">uint8_t</span> retry=<span class="number">0</span>;</span><br><span class="line"> <span class="type">uint8_t</span> i;</span><br><span class="line"></span><br><span class="line"> DHT_GPIO_SET_OUTPUT();</span><br><span class="line"> HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);</span><br><span class="line"> HAL_Delay(<span class="number">18</span>);</span><br><span class="line"> HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);</span><br><span class="line"> Delay_us(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DHT_GPIO_SET_INPUT();</span><br><span class="line">Delay_us(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">0</span> &amp;&amp; retry&lt;<span class="number">100</span>)  </span><br><span class="line">&#123;</span><br><span class="line">   Delay_us(<span class="number">1</span>);</span><br><span class="line"> retry++;</span><br><span class="line">&#125;</span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_5)==<span class="number">1</span> &amp;&amp; retry&lt;<span class="number">100</span>) </span><br><span class="line">&#123;</span><br><span class="line">   Delay_us(<span class="number">1</span>);</span><br><span class="line"> retry++;</span><br><span class="line">&#125;</span><br><span class="line">retry=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"> Data[i] = DHT_Read_Byte();</span><br><span class="line">&#125;</span><br><span class="line">Delay_us(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="type">uint32_t</span> sum=Data[<span class="number">0</span>]+Data[<span class="number">1</span>]+Data[<span class="number">2</span>]+Data[<span class="number">3</span>];</span><br><span class="line"> <span class="keyword">if</span>((sum)==Data[<span class="number">4</span>])    <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">   <span class="keyword">else</span>   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dht11.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DHT11_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DHT11_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx_hal.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stm32f1xx.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> Data[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> TIM_HandleTypeDef htim1;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_us</span><span class="params">(<span class="type">uint16_t</span> us)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT_GPIO_SET_OUTPUT</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DHT_GPIO_SET_INPUT</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">DHT_Read_Byte</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">DHT_Read</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;预分频寄存器(TIMx_PSC)：由于时钟源为：72MHz，T &amp;#x3D; 1&amp;#x2F;f &amp;#x3D</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>3.串口(UART)</title>
    <link href="http://example.com/post/2c4c3bc3.html"/>
    <id>http://example.com/post/2c4c3bc3.html</id>
    <published>2024-08-05T10:02:46.000Z</published>
    <updated>2024-08-15T12:42:20.597Z</updated>
    
    <content type="html"><![CDATA[<p>串口理论部分可看51部分：<a href="https://blog.csdn.net/qq_65047384/article/details/140470283">链接</a></p><p>数据帧 &#x3D; 帧头(2字节，例如AA、BB) + 数据长度（2字节）+ 数据 + CRC16校验（2字节） + 帧尾（2字节）</p><p>回调函数在：stm32f1xx_it.c里找对应的函数转进入里面找</p><p>中断函数：stm32f1xx_hal_uart.c（别的只是uart不同）</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>串口一发送命令控制LED灯(PB5、PE5)</p><h2 id="LED灯、串口、串口打印浮点数据、串口重定向配置"><a href="#LED灯、串口、串口打印浮点数据、串口重定向配置" class="headerlink" title="LED灯、串口、串口打印浮点数据、串口重定向配置"></a><center>LED灯、串口、串口打印浮点数据、串口重定向配置</center></h2><p>LED灯配置请看：<a href="https://d3iiz.top/post/adb202b7.html">链接</a></p><p>串口配置：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408061554189.png" alt="串口配置" style="zoom:33%;"><p>配置串口中断NVIC(嵌套向量中断控制器)</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408061555432.png" alt="配置中断NVIC" style="zoom:33%;"><p>配置DMA：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408061554276.png" alt="配置DMA" style="zoom: 33%;"><p>Cube IDE中串口打印浮点数据配置方法(<a href="https://blog.csdn.net/caihaitao2000/article/details/112469098">参考</a>)：进入“Project→Properties”；显示界面如下。按照图片中的设置完成即可！</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408061554668.png" alt="打印浮点数配置" style="zoom: 33%;"><p>串口重定向配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> u_buf[<span class="number">256</span>];<span class="comment">//usart.c,24行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//usart.h,32行</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> u_buf[<span class="number">256</span>];<span class="comment">//usart.h，38行</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> printf(...)  HAL_UART_Transmit(&amp;huart1, (uint8_t *)u_buf, sprintf((char*)u_buf, __VA_ARGS__), 0xffff)<span class="comment">//usart.h，39行</span></span></span><br></pre></td></tr></table></figure><h2 id="轮询方式"><a href="#轮询方式" class="headerlink" title="轮询方式"></a><center>轮询方式</center></h2><p>缺点：</p><p>&ensp;&ensp;&ensp;&ensp;必须要等待数据发送完或者等待时间超时，代码才会往下走</p><p>&ensp;&ensp;&ensp;&ensp;必须要等待数据接收到固定的字节长度，超时，代码才往下走</p><h3 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>mian.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//26行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> UART_Recv[<span class="number">5</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">char</span> UART_Str[<span class="number">30</span>];<span class="comment">//49行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数1：UART 模块的配置信息的指针,参数2：数据缓冲区的指针，参数3：接收字节长度，参数4：接收超时时间(单位为毫秒)</span></span><br><span class="line">HAL_UART_Receive(&amp;huart1, UART_Recv, <span class="number">4</span>, <span class="number">1000</span>);<span class="comment">//接收数据函数</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;LED1&quot;</span>, (<span class="type">char</span> *)UART_Recv) == <span class="number">0</span>)<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line"><span class="built_in">memset</span>(UART_Recv,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);<span class="comment">//替换字符函数，常用于清除指定空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2&quot;</span>, (<span class="type">char</span> *)UART_Recv))<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span><br><span class="line"><span class="built_in">memset</span>(UART_Recv,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(UART_Str, <span class="string">&quot;%f\n&quot;</span>, <span class="number">666.6</span>);</span><br><span class="line"><span class="comment">//参数1：UART 模块的配置信息的指针,参数2：发送的字符串或字符数组，参数3：发送字节长度，参数4：接收超时时间(单位为毫秒)</span></span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (<span class="type">char</span> *)UART_Str, <span class="built_in">strlen</span>(UART_Str), <span class="number">1000</span>);<span class="comment">//发送数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;xinzai\n&quot;</span>);<span class="comment">//配置串口重定向后才可使用</span></span><br></pre></td></tr></table></figure><h2 id="中断-IT-方式"><a href="#中断-IT-方式" class="headerlink" title="中断(IT)方式"></a><center>中断(IT)方式</center></h2><h3 id="Cube-IDE代码-1"><a href="#Cube-IDE代码-1" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HAL_UART_RxCpltCallback(huart);<span class="comment">//stm32f1xx_hal_uart.c,3660行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_uart.c,2619行</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span><span class="comment">//中断回调函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//26行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> UART_Recv_IT[<span class="number">5</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">char</span> UART_Str[<span class="number">30</span>];<span class="comment">//49行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="comment">//参数1：UART 模块的配置信息的指针,参数2：数据缓冲区的指针，参数3：接收字节长度</span></span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, UART_Recv_IT, <span class="number">4</span>);<span class="comment">//串口中断接收函数，95行</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while函数里</span></span><br><span class="line"><span class="built_in">sprintf</span>(UART_Str, <span class="string">&quot;%d\n&quot;</span>, <span class="number">666</span>);<span class="comment">//102</span></span><br><span class="line">HAL_UART_Transmit_IT(&amp;huart1, UART_Str, <span class="built_in">strlen</span>(UART_Str));<span class="comment">//串口中断发送函数,103</span></span><br><span class="line">HAL_Delay(<span class="number">1000</span>);<span class="comment">//104</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//151行开始</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span><span class="comment">//串口中断接收触发函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(huart == &amp;huart1)<span class="comment">//判断传进来的串口是哪个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;LED1&quot;</span>, (<span class="type">char</span> *)UART_Recv_IT) == <span class="number">0</span>)<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IT,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);<span class="comment">//替换字符函数，常用于清除指定空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2&quot;</span>, (<span class="type">char</span> *)UART_Recv_IT))<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IT,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为只能接受一次串口中断，所以在串口中断触发函数需要重新调用</span></span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, UART_Recv_IT, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="空闲中断-IDLE-DMA"><a href="#空闲中断-IDLE-DMA" class="headerlink" title="空闲中断(IDLE) + DMA"></a><center>空闲中断(IDLE) + DMA</center></h2><p>不受接收字符长度影响，可以随意接收字符长度并判断，DMA会触发中断</p><p>空闲状态：在多个字节传输结束后，通信线路将会维持高电平，这个状态称为空闲状态（没有数据传输时的空闲状态，数据传输刚结束的空闲状态）</p><p>空闲中断产生条件：在数据传输过程中，当CPU检测到通信线路处于空闲状态时，且空闲状态的持续时间大于一个字节传输时间时，空闲状态标志IDLE将由硬件置1，产生空闲中断</p><h3 id="Cube-IDE代码-2"><a href="#Cube-IDE代码-2" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stm32f1xx_hal_uart.h,2710行</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span><span class="comment">//空闲中断接收回调函数</span></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RECV_Size 100<span class="comment">//37行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_UARTEx_ReceiveToIdle_DMA(&amp;huart1, UART_Recv_IDLE, RECV_Size);<span class="comment">//空闲中断接收函数,94行</span></span><br><span class="line"><span class="comment">//数据接收RECV_Size一半时会重新触发中断，需要关闭DMA接收中断使能</span></span><br><span class="line">HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);<span class="comment">//96行</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//150行</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span><span class="comment">//空闲中断接收触发函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(huart == &amp;huart1)<span class="comment">//判断传进来的串口是哪个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;LED1&quot;</span>, (<span class="type">char</span> *)UART_Recv_IDLE) == <span class="number">0</span>)<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IDLE,<span class="string">&#x27;\0&#x27;</span>,Size);<span class="comment">//替换字符函数，常用于清除指定空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2ON&quot;</span>, (<span class="type">char</span> *)UART_Recv_IDLE))<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span></span><br><span class="line">  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IDLE,<span class="string">&#x27;\0&#x27;</span>,Size);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2OFF&quot;</span>, (<span class="type">char</span> *)UART_Recv_IDLE))</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(UART_Recv_IDLE,<span class="string">&#x27;\0&#x27;</span>,Size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为只能接受一次串口中断，所以在串口中断触发函数需要重新调用</span></span><br><span class="line">HAL_UARTEx_ReceiveToIdle_DMA(&amp;huart1, UART_Recv_IDLE, RECV_Size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;串口理论部分可看51部分：&lt;a href=&quot;https://blog.csdn.net/qq_65047384/article/details/140470283&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据帧 &amp;#x3D; 帧头(2字节，例如AA、BB) + 数据长度（2字节）+ </summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>完美解决443端口被vmware占用的问题</title>
    <link href="http://example.com/post/b94c2cf2.html"/>
    <id>http://example.com/post/b94c2cf2.html</id>
    <published>2024-08-04T14:54:51.000Z</published>
    <updated>2024-08-15T12:47:24.191Z</updated>
    
    <content type="html"><![CDATA[<p> 第一步，打开虚拟机，找到首选项</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408042305038.png" alt="进入首选项" style="zoom:50%;"><p>第二步，选择共享虚拟机，修改端口号，保存</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408042304709.png" alt="修改端口" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 第一步，打开虚拟机，找到首选项&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408042305038.png&quot; alt=&quot;进入首选项&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;第二</summary>
      
    
    
    
    <category term="Windows使用技巧" scheme="http://example.com/categories/Windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="解决443端口被vmware占用" scheme="http://example.com/tags/%E8%A7%A3%E5%86%B3443%E7%AB%AF%E5%8F%A3%E8%A2%ABvmware%E5%8D%A0%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>win10桌面图标变白</title>
    <link href="http://example.com/post/a06b5fda.html"/>
    <id>http://example.com/post/a06b5fda.html</id>
    <published>2024-08-04T14:54:31.000Z</published>
    <updated>2024-08-15T12:47:28.952Z</updated>
    
    <content type="html"><![CDATA[<p> 1、双击打开此电脑，点击【查看】，勾选<strong>【隐藏的项目】</strong></p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408042300201.png" alt="关闭隐藏" style="zoom:50%;"><p>2、同时按 【Win + R】键打开运行，输入<strong>【%localappdata%】</strong>回车确定</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408042257970.png" alt="打开命令" style="zoom:50%;"><p>3、右键选择删除<strong>lconCache.db</strong>文件</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408042257244.png" alt="删除文件" style="zoom: 67%;"><p>4、同时按【Shift + Ctrl + Esc】键打开任务管理器，找到<strong>Windows 资源管理器</strong>，右键选择重新启动</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408042258681.png" alt="资源管理器" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 1、双击打开此电脑，点击【查看】，勾选&lt;strong&gt;【隐藏的项目】&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408042300201.png&quot; alt=&quot;关闭隐藏</summary>
      
    
    
    
    <category term="Windows使用技巧" scheme="http://example.com/categories/Windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="win10桌面图标变白" scheme="http://example.com/tags/win10%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87%E5%8F%98%E7%99%BD/"/>
    
  </entry>
  
  <entry>
    <title>通过 Cloudflare 和 JsDelivr 免费加速博客 GitHub 图床等静态资源</title>
    <link href="http://example.com/post/3e643b17.html"/>
    <id>http://example.com/post/3e643b17.html</id>
    <published>2024-08-03T09:25:05.000Z</published>
    <updated>2024-08-15T12:52:29.511Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bc49ef421fda85a7efafefe0e477e66b4cecf073d336128e43f3ce4d392f5338">d0082e95ce53ece4a4c0f5b8a727fc3f962b5c64e8654922e002aaab68a80fee44659e4ed481944adba9187c18a549696eb845bfa6a1cd0190d87af65317bf0556e6003eaf2e57f4faffd9d5095487d749f4baae378a311e09dcce66eeab912ac4701baa5dd63ec753c525efac934109102b75663fa19d2d1b179fe6a5bb9adbb69749d9a983dad87682f2332eff7dff76347dfd37b7626947f2ae9e1a239a3b15f8504a5cbf1a27530c16e0e1ff89a2848b86074ea4d6d304f104026e796a57d932698fe0f67e0078e91f3e72e15c2b1dc34c0123be4fe4f7273e6355fb018dadde48c0f9e308629f0a8d1de2bd0f017d5f2283d25fcb967dcfacf686c1ec607a3f18edcfdec9a61386b9957d0b959c9cf373de4d46657725c081d28313b42f3127612a27b06fa4e81489d37f86e30df43266280b207184a2de27af22c257b28c68008d73f3020982c72f87bf8a11e627ade32279fada559e38954d534a7668c06c8f1a89c598d799d5690acc6d621bd4b6dcb7043c6852ead49d8f1a5097f563b168dedd5e34dd3324e16fa8f624adaef0047a3bc0422febc28e6470d318cbf21c0a2df3d7b76948e436c5723cbb5aafa639f810ae257c8c4a39de99abf541ae3b69316187d2b3cf65e5059d83b79056f76e95ac47a3514dc0ba02cc5de07a7d0c99199d3548da29b2c05498ee27164ea50af3d780fa538fab36da198892c77c0f4538a06340f5c2ecce98487810962657452c84b519a1f5a0750198bd0a5234778ae451d476dbc40388f0d655c21acf381e04b6c32df16831ee1ba04bb54df50f64c50581c30118fa2ea6b19fe7d7390d309017725d50e733f809b242adc5c521fa8022a9493bbab4beac16206f88e3074ec10b6a632311e2a3061ae0f6d6c5f1d2e41a765e65aa1540cb72f97c2af5b4319e6e198521173fe6536defe4b2538e241b40b38d92945843a3c792eaeb77fb452ecde97dbfde700512a40aff0ecef38f1eec3485f8815dee1aba4c6dcc9bf2a531c6e95a46a5c7fd12a5b905ab3dbb4d5729c43a9cf3eeb2a544e7435d8fd3a7866857433e0cb09e8da127c80681a082a2bbdaaefb2a6f566481baff8eedcd2f15052f82051e1714f98aa6e16c09d83f2b67a1100737604af999f1c8a3334facb6e8fdcfefeade046620ce73e1a395c3e2ac8e391d5e0f29602ec3097058e3f9621965be7c060a6819e4b43733b0345a70ab4765758a6a6860ab4b305f8819c5e7fcf16d298f275b9cbc006dd7074eb4266e66ca83562dd718706915b048b25b9874e52409cc7d4d937f15bcfa305c30a7010854d5d654ae29c42158cf7c82e74e927b83e2c2fc853b2a607bc342822f6c84740c6e87c2a3792f068e1c38ef64ddd6efcaccb3b724d0e21d152d6074597bfbec24beb1de4fc9ae16b3f6fdab0abb9d1e344517a396d07d81b8fa6e46f83ce90b5ebac9d283792844cbb0390c3713a9715827e726e195d0eb0b9f4c44b706e76c4aca147931ab326afdf3b2ca6b3233f6178a95538113d4fd0b6558a8178d43e0f15d7a90378421215ac975e8a66ce040029ef31d769fa4af961e4b72f560fac7191326ea4118c22a12b5f5552122d7f80f6e16d150f1d71b047482d8c819733c3d1fd8abc5d8724c9f253baba454e715d4f597dba0e80fe58a112f90b951bdadf23d1c8261e47f0d18259004432425f18ada554458a3c9240602cabcba3233db429331c151103b088ce057eae16580d840e35ef558a99d0a23722045e15908b5fb1b1efb29e33eb6ecd8d35049b52f19fb99e494d3f5f19b9508daa3e8b69764512a666b6704beded201e8a6737ec8fa4e65c5af26f77424294fc55fafdca00c7ec8dbba5fc14365d93a83bc59ea1a0670473586f60d0b4c65f6772fab5d0f062b1d838914157ef0539aa4194a9edde1b1e32b4a540fd385158ce91f888e4b64041b671c2cb6ef432ec9c71f5fc907962a64f39732255ce52d35f03122012cdcb88ff881ef619ae2e8bf3ff653b61c3afd53df8c07333459db8eb49ea24e91e657fa99a4b2539bf90a5ddceb4bf0b54dd8c8e24571780288bb7b010cbde4dc29184eb28bda65f8258ee88d650268dc4968517311a3fea20777e7558ec65c15dc008adad09612a36ef66d2d5c48c3e1bbe27dacd8048cd749a9341e07251bb06f3acd557216fcaf3ed9e5c37d5b6d6d2bf1c910822537b860087701c03ea5533f798a8684b2896bb11a4dee31ef2a1fae23209afe1f83992e42bb37439f7d25385f2dd4aa739dc32cbd38d4323fa50e5a62f2579bc860c1e3b01e97fa31da402540992ab370695c62518e83da65dbb4e012b26010490bbb578b93492eeadd483568a15f29e727f4544fb28ee24086879330d14f1468a64480c5c5cae2c2a80bc6276c264683a504edaa98057b7eb4a8afdb5b7cc32c068a6a3d17bbb1f48f7a7d52a5d76a1679a1d78e2ab25ad1fe8cb197e6f614ffabaa35a2a16ecbc81506c0d5825dd637f440b4ec67843c014f30b0af3c81a2917b6d8a7509e5adc14599107aaa92618a446f2644e720c0b1701b369240978e26199ff7615991e88366ec174cc9e878c0bd3f0b5444e95a6a2fd7808019df1bc0eac79ba88851ec948e7d01e82dfdf86b5ac4c8dfa0d36a17cb09294aee45133a303fb1e8dcde64d141106c3f9ba50eaf09b1aa3b779f7db0713ed05991ba34587215f94fc5a5baf37c7f3304f5ab7159cc156f8699ac394ca12f874d3ec9b6fe203b32b3f9e1eaa71dd1655fd6126c3980d8c19dfadfa5dea906512d86b1968bba296a896ba6661f3d9fc853a8db420edd215b21fb798c3e42d74b51eae684e2d1adee11e563acf5b3cb554fddd8dbc554c27cff182caee9b34804c71be110a4a13cbe32ff3184180d9f22519fe194ccefefd3dc8f663b877605a59450e7880a4cf0d0ddff4d9eddc2b5d79b0daf16100f4b125602d7c2d375277725926e95eea840cf7b645f9c6a61ac9178af17c1b1cef2cc0ca4bdef4b3fc6d8950d5b483496199f0cca58cd2bc021c07c573d851564ef6219e0c72899fb1d17e691a0a013e999638bcda260a2cd209bcc26662e4887374a60fc22c61ebd5843a0e12e2250c2583954438681b86a2c00bc24807269e0f390992ea147edc8ef844e06afd00ed8a5866da0aba472b53def4a9c7362fa8580e5eb766c3af8cd6185fd5da41552843e6152a965fbbb36bb8c6669459f2db8853661fb47b1fbbb83653a3067c30ec9454dcf84a4df83b2d36b6b886ed1b1ce8720440f5ceb7946a7eb57867b0f2d4afbb3243a9ff58a84837e4e5408c80c480a82c9d9a3547649be1a90f5496c273b13691e6c66544dc60a238eea8498810c6a3bc6d7f5ec0799e17f1c7f0576139b3347825db61f6f17a9007828a20ca9f501dd41849f9506f8720e81efd07adf2c67dbf56a0071dd3b7461cf1a8d02dfba39f028b23c1ab2daa5f4edcb0375987d83f526df790c0c491a8eb0e29714c8237c71e5db958200e61aed02a316ab646c991b2b5051d132ef8514c654be710e76c21fd3aa839ca125e3491f3e84344fbf48573187653573b3317f723286522505db19d755a3e48fa7b9bc772bbfde10d7870444ae6bf4c0456ddb769079fb80f14bef69a0ed7d18771921db62289a468bfe3c6d2c5b2e631ffa1eeb96cc35d9d2aaa82a02c817a0e4cb60711e4e8f2f6fe85fedd91328b308c1459a351f015723ccf98f4207ffe4688a2aac4bb7e6269922745cdd254b567f4001f158e4986b44c66c6ea1eb53b27ecca74d4109b7cf62818275cd573872f6ba3ff4f53c6b6e9f8b23144490a78ff881374c542dedd1ee80dd40ab730f7f8276a074b7db343b493b8dffddfe5471f57ca37f85c1a41bdf8e49f231d8e8e5b9eef58636cefe89787a588f1f7fb36cb94cc94724faee5ae955c609a266ed46f965828a24cfc118ce5ed1770ecb060ee22ab12a5e66ce150bce593fe676da2828ee2269d1766e42378e1d162f1ec401185f2544f1b8b55c596b7e7fba7d7a3015536b0c5cd6b63a2bc037f82e44792735dc9b5607c5751bb2ac1d8c6904cf1637f232374998632bf47c58cdc20073db086321d9b53a0e31aa799e777d5e70f78f242939d19a9dde64adcb8752e6ca711ba66e5def2515636cb8dca0ba7ec8a6a17a6e6b0f55fb1119f65852e75accb30dee55c24b19008a0bf06c83c98d8e1430f40b75efc5617006c0f5d9590ff74a5f27b5717c27338e2885bae24852bb943d02998339b8c153599f0aba978c0e97232fad19b187eec09305ac2c698927c27a9d051a74049eae5e8eb96492757465952f580c16131fd4bc73d9aecdc15360c14425b61c3ae76121aea016a412b7c31e4d234c711eec3ba07a938333b943bc8ca804b4f75b9bdb4e0d90cf7d98d7b66aad5a5b2ddb8dd7808a1f4dd7f9d0d510b235e3aef84fd8bb1283ed0550bfe5e1245c1a0f69def1b3493a2417d3553d0a2873b50b63ed1121499f8f41fbda65e0195a60e321f4eba0982b2c976cbccd612b5af9b4fafbc5f6831597f87395f38494a61a030260f50c259b0db4198f37db31643bdcbd5cae4717cd8622c43a28090203329045644d52fbeb066c0a734119ac6b07b766b5fe4894bf23e3eea1f646a42de73b90569f51856fd3b71dc71bccfcc3270a687be6724234e240f4c842170d7be29dc99e1d63c2fd194fac684181cfdddcfc560fd0384332192675e1750048dd2e000116fb1a1e5b028c1bca57fccb96040d477551446c3612cca0281f406f52dd1620a66755aa68c9a47f4c929a9f126f4130e94b5232ef3f70f25012fbe6c2240a76c8c4dd3e8825b20aede323ecbbafbc6e60c70266e8c18e9a5fb62a1a21df983cd077f244cfd6f9bd410627db2140d05282341428a5868c9b2ce8d9458e1e34ee231f43aee9e4724e56568c124b5f895150fa317b8e13f1320a0b1ea991bc769af742eade80035e400fe615d992293a4401c0a19764c7827223aa58cb3336cde6c465e7bd8b884cf3252a382b2a2940d7201a9facb33a29866e662f9c160f719cc60e70a9853951123ea31144433dd8811ea6e4a148ff576c72929ac89e5f982f7e6d7df99ce7f4ffcbe92cea5adb4e211a9a301d1bfe6b5308f5dbaff8d3604477668e08303dfb7304127febb9674e4e3e980149069852839e2671a95f9bc1241739b2b0936c54b2b735572764613621c527e78de02ea9900c378af97da538fb079bc8f7526b4fd883975b0de2f510ad04001ce403bf67224aa80b31db094418e24693f3a7b7ff6ce4e37eaea1665a359c9f92c7a5b975</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</summary>
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="博客加速图床" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E5%8A%A0%E9%80%9F%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>利用cloudflare加速github博客访问</title>
    <link href="http://example.com/post/b7e3ace9.html"/>
    <id>http://example.com/post/b7e3ace9.html</id>
    <published>2024-08-03T09:24:43.000Z</published>
    <updated>2024-08-15T14:19:36.230Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="92ad0c0fd82dbbc85cedec911630ebd41b9642b2a24979c44ee363f9eaf167fd"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</summary>
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="加速github博客访问" scheme="http://example.com/tags/%E5%8A%A0%E9%80%9Fgithub%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>2.外部中断(EXTI)</title>
    <link href="http://example.com/post/eb0bc4a3.html"/>
    <id>http://example.com/post/eb0bc4a3.html</id>
    <published>2024-08-03T09:21:42.000Z</published>
    <updated>2024-08-15T12:42:17.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>NVIC：嵌套向量中断控制器（<a href="https://blog.csdn.net/m0_74761015/article/details/136269042">解释教程</a>）</p><p>外部通用中断线(<code>EXTI0~EXTI15</code>)：每个GPIO设置成中断模式，与中断控制器连接的线</p><h2 id="外部中断触发方式"><a href="#外部中断触发方式" class="headerlink" title="外部中断触发方式"></a><center>外部中断触发方式</center></h2><p>上升沿触发、下降沿触发、双边沿触发</p><h2 id="外部中断触发函数"><a href="#外部中断触发函数" class="headerlink" title="外部中断触发函数"></a><center>外部中断触发函数</center></h2><p>在stm32f1xx_it.c文件里(大概204行)</p><table><thead><tr><th align="center">中断触发函数</th></tr></thead><tbody><tr><td align="center">EXTI0_IRQHandler</td></tr><tr><td align="center">EXTI1_IRQHandler</td></tr><tr><td align="center">EXTI2_IRQHandler</td></tr><tr><td align="center">EXTI3_IRQHandler</td></tr><tr><td align="center">EXTI4_IRQHandler</td></tr><tr><td align="center">EXTI9_5_IRQHandler</td></tr><tr><td align="center">EXTI15_10_IRQHandler</td></tr></tbody></table><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a><center>解析</center></h2><p>解析初始化中断过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//gpio.c中58</span></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PEPin PEPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = EXTI_Key1_Pin|EXTI_Key2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);<span class="comment">//将上面三行代码的数据传入这个函数解析初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_gpio.c中286</span></span><br><span class="line"><span class="comment">/*--------------------- EXTI Mode Configuration ------------------------*/</span></span><br><span class="line"><span class="comment">/* Configure the External Interrupt or event for the current IO */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; EXTI_MODE) == EXTI_MODE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Enable AFIO Clock */</span></span><br><span class="line">__HAL_RCC_AFIO_CLK_ENABLE();<span class="comment">//打开复用时钟</span></span><br><span class="line">temp = AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>];</span><br><span class="line">CLEAR_BIT(temp, (<span class="number">0x0F</span>u) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));</span><br><span class="line">SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));</span><br><span class="line">AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>] = temp;<span class="comment">//把固定引脚设置成复用模式(如复用成外部中断)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置上升沿还是下降沿</span></span><br><span class="line"><span class="comment">/* Enable or disable the rising trigger */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; RISING_EDGE) == RISING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;RTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;RTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable or disable the falling trigger */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; FALLING_EDGE) == FALLING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;FTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;FTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure the event mask */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_EVT) == GPIO_MODE_EVT)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;EMR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;EMR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开或关闭中断</span></span><br><span class="line"><span class="comment">/* Configure the interrupt mask */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_IT) == GPIO_MODE_IT)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;IMR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;IMR, iocurrent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中断实现过程</strong></p><ol><li>确认中断</li><li>清除中断标志位</li><li>执行中断回调函数</li></ol><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408041510330.png" alt="图示" style="zoom:50%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stm32f1xx_it.：大概204行</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI3_IRQHandler</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//中断入口函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 0 */</span></span><br><span class="line">  HAL_GPIO_EXTI_IRQHandler(EXTI_Key1_Pin);<span class="comment">//在库函数不能写</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span><span class="comment">//stm32f1xx_hal_gpio.c：大概546行</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* EXTI line interrupt detected */</span></span><br><span class="line">  <span class="keyword">if</span> (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != <span class="number">0x00</span>u)<span class="comment">//判断有没有中断触发(有:1,没:0)</span></span><br><span class="line">  &#123;</span><br><span class="line">    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);<span class="comment">//若进来则为1，为1则清除中断标志位</span></span><br><span class="line">    HAL_GPIO_EXTI_Callback(GPIO_Pin);<span class="comment">//回调函数(Callback)，执行函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_gpio.h中190</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__) (EXTI-&gt;PR &amp; (__EXTI_LINE__))<span class="comment">//挂起寄存器(EXTI_PR)(参考手册140) 有没有中断触发</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_gpio.h中198</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__) (EXTI-&gt;PR = (__EXTI_LINE__))<span class="comment">//赋值，(参考手册140)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用这个函数，__weak：弱声明，若别文件也有相同的函数，优先调用没有弱声明</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span><span class="comment">//stm32f1xx_hal_gpio.c：大概561行</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Prevent unused argument(s) compilation warning */</span></span><br><span class="line">  UNUSED(GPIO_Pin);</span><br><span class="line">  <span class="comment">/* <span class="doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span></span><br><span class="line"><span class="comment">           the HAL_GPIO_EXTI_Callback could be implemented in the user file</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若相同有一个PA0设置了中断，别的PB0等等都不能设置成中断</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408041510079.png" alt="解析图" style="zoom:50%;"><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>实验：按键PE3控制蜂鸣器(PB8)、按键PE4控制LED灯(PB5)</p><h2 id="LED灯、蜂鸣器、按键配置"><a href="#LED灯、蜂鸣器、按键配置" class="headerlink" title="LED灯、蜂鸣器、按键配置"></a><center>LED灯、蜂鸣器、按键配置</center></h2><p>LED灯、蜂鸣器配置，上一篇已经说过，<a href="https://d3iiz.top/post/adb202b7.html">地址</a></p><p>按键设置<code>下降沿触发</code>(也可上升沿触发)，GPIO Pull-up&#x2F;Pull-down：设置上拉，空闲状态为高电平</p><p>按键没按下时高电平，按下时有下降沿和上升沿，所以两个触发都可，按键这里是中断触发功能，不是GPIO输入功能</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408041510669.png" alt="按键设置图" style="zoom: 33%;"><p>配置NVIC(嵌套向量中断控制器)</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408041512291.png" alt="配置NVIC" style="zoom: 50%;"><p>调节不同中断优先级(数字越小优先级越高)</p><p>若抢占优先级相同，比较子优先级</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408041510564.png" alt="中断优先级" style="zoom:33%;"><p>调节多少bit对应代码在：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HAL_Init();<span class="comment">//main.c(74)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HAL_StatusTypeDef HAL_Init(void)中的</span></span><br><span class="line">HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);<span class="comment">//stm32f1xx_hal.c(157)</span></span><br></pre></td></tr></table></figure><h2 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h2><p>main.c：144行（在mian函数外任意一个 &#x2F;* USER CODE BEGIN  <em>&#x2F;  &#x2F;</em> USER CODE END  *&#x2F;中）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//若需要延时需要将延时中断优先级比外部中断优先级高，优先级高才可以打断低优先级</span></span><br><span class="line">HAL_Delay(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key1_GPIO_Port, EXTI_Key1_Pin) == <span class="number">0</span>)<span class="comment">//读引脚，相同=0,不同=1</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key2_GPIO_Port, EXTI_Key2_Pin) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>中断处理程序要少用延时的原因<br>中断处理的要求是即时处理，尽快退出。如果在中断中使用延时函数或者使用IO阻塞函数，会影响到系统的实时性。如果下次中断来临，延时或者阻塞还没结束，那么就永远在中断里死循环了。<br>因此，对于中断处理程序的要求是：<br>&ensp;&ensp;&ensp;&ensp;短小精悍，不要处理过多任务<br>&ensp;&ensp;&ensp;&ensp;不使用延时函数或者IO阻塞的函数</p></blockquote><h2 id="Keil代码"><a href="#Keil代码" class="headerlink" title="Keil代码"></a><center>Keil代码</center></h2><p>需要修改的地方如下：</p><p>mian.c(144)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//若需要延时需要将延时中断优先级比外部中断优先级高，优先级高才可以打断低优先级</span></span><br><span class="line">HAL_Delay(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key1_GPIO_Port, EXTI_Key1_Pin) == <span class="number">0</span>)<span class="comment">//读引脚，相同=0,不同=1</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key2_GPIO_Port, EXTI_Key2_Pin) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.h(60)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key1_Pin GPIO_PIN_3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key1_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key1_EXTI_IRQn EXTI3_IRQn</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key2_Pin GPIO_PIN_4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key2_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key2_EXTI_IRQn EXTI4_IRQn</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_GPIO_Port GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_Pin GPIO_PIN_8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_GPIO_Port GPIOB</span></span><br></pre></td></tr></table></figure><p>gpio.c(42)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PEPin PEPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = EXTI_Key1_Pin|EXTI_Key2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PBPin PBPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = LED1_Pin|BEEP_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* EXTI interrupt init*/</span></span><br><span class="line">  HAL_NVIC_SetPriority(EXTI3_IRQn, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">  HAL_NVIC_EnableIRQ(EXTI3_IRQn);</span><br><span class="line"></span><br><span class="line">  HAL_NVIC_SetPriority(EXTI4_IRQn, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">  HAL_NVIC_EnableIRQ(EXTI4_IRQn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stm32f1xx_hal_it.c(204)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI3_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 0 */</span></span><br><span class="line">  HAL_GPIO_EXTI_IRQHandler(EXTI_Key1_Pin);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI4_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI4_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI4_IRQn 0 */</span></span><br><span class="line">  HAL_GPIO_EXTI_IRQHandler(EXTI_Key2_Pin);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI4_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI4_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改延时中断优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HAL_Init();<span class="comment">//main.c(74)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HAL_StatusTypeDef HAL_Init(void)中的</span></span><br><span class="line">HAL_InitTick(TICK_INT_PRIORITY);<span class="comment">//stm32f1xx_hal.c(160)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入参数里修改</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  TICK_INT_PRIORITY            1U<span class="comment">//stm32f1xx_hal_conf.h(132)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;NVIC：嵌套向量中断控制器（&lt;a href=&quot;https://blog.csdn.net/m0_7476</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ST-LINK未能串口keil识别的一个可能解决方案（前提驱动安装无问题）</title>
    <link href="http://example.com/post/a3ad0b3a.html"/>
    <id>http://example.com/post/a3ad0b3a.html</id>
    <published>2024-08-03T08:56:06.000Z</published>
    <updated>2024-08-15T12:52:53.437Z</updated>
    
    <content type="html"><![CDATA[<p>打开这个软件，在点击清除之前，按住单片机复位按钮不放，点击清除按钮，等待3-5秒放开复位按钮，即可清除重置，若提示没识别到，多重复几次，即可重置，重置完成之后再回到烧写软件，即可烧写成功</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031657478.png" alt="软件图" style="zoom:50%;"><p>在烧写时提示烧写成功后会显示如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031658168.png" alt="错误提示图"></p><p>解决方法：可能某个地方设置错误，我这里是这个没有设置成 Serial Wire，可以把全部设置重新检查一遍</p><p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031657360.png" alt="方法图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开这个软件，在点击清除之前，按住单片机复位按钮不放，点击清除按钮，等待3-5秒放开复位按钮，即可清除重置，若提示没识别到，多重复几次，即可重置，重置完成之后再回到烧写软件，即可烧写成功&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/x</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="ST-LINK未能串口keil识别解决方案" scheme="http://example.com/tags/ST-LINK%E6%9C%AA%E8%83%BD%E4%B8%B2%E5%8F%A3keil%E8%AF%86%E5%88%AB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeIDE代码字体大小</title>
    <link href="http://example.com/post/43a9b762.html"/>
    <id>http://example.com/post/43a9b762.html</id>
    <published>2024-08-03T08:52:40.000Z</published>
    <updated>2024-08-15T12:52:57.349Z</updated>
    
    <content type="html"><![CDATA[<p> 进入首选项设置</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031654048.png" alt="img" style="zoom:50%;"><p>搜索editor，按照图中标号，进行设置</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031654274.png" alt="img" style="zoom:50%;"><p>按图中标号进行设置，选择需要的字号</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031654824.png" alt="img" style="zoom:50%;"><p>到此设置完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 进入首选项设置&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031654048.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;搜索editor，按照图</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="STM32CubeIDE代码字体大小" scheme="http://example.com/tags/STM32CubeIDE%E4%BB%A3%E7%A0%81%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/"/>
    
  </entry>
  
  <entry>
    <title>STM32烧录的时候报错：Error :Flash Download failed -“Cortex-M3“</title>
    <link href="http://example.com/post/63d3dd68.html"/>
    <id>http://example.com/post/63d3dd68.html</id>
    <published>2024-08-03T08:46:17.000Z</published>
    <updated>2024-08-15T12:51:33.561Z</updated>
    
    <content type="html"><![CDATA[<p> 点击图中标号1，按顺序点击进入设置</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031700928.png" alt="img" style="zoom:50%;"><p>按图中标序，进入添加页面</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031700487.png" alt="img" style="zoom:50%;"><p>添加图中所选，然后一直确定退出即可，若没有图中所示选项，可能软件没下载对</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031700644.png" alt="img" style="zoom:50%;"><p>添加后，即可烧录成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 点击图中标号1，按顺序点击进入设置&lt;/p&gt;
&lt;img src=&quot;https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031700928.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;按图</summary>
      
    
    
    
    <category term="错误记录" scheme="http://example.com/categories/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>DHT11dht11.c(18) error C174 return-expression on void-function</title>
    <link href="http://example.com/post/c4236caa.html"/>
    <id>http://example.com/post/c4236caa.html</id>
    <published>2024-08-03T08:46:17.000Z</published>
    <updated>2024-08-15T12:51:29.504Z</updated>
    
    <content type="html"><![CDATA[<p>表示在函数dht11.c的第18行，有一个返回表达式出现在了一个返回类型为void的函数中。在C语言中，如果一个函数的声明或定义中指定了返回类型为void，那么这个函数不能有任何返回值。</p><p>​    要解决这个问题，你需要检查dht11.c文件中第18行的代码，确保没有返回值。如果该行代码确实需要返回一个值，那么你需要将该函数的返回类型修改为非void类型</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;表示在函数dht11.c的第18行，有一个返回表达式出现在了一个返回类型为void的函数中。在C语言中，如果一个函数的声明或定义中指定了返回类型为void，那么这个函数不能有任何返回值。&lt;/p&gt;
&lt;p&gt;​    要解决这个问题，你需要检查dht11.c文件中第18行的代码，</summary>
      
    
    
    
    <category term="错误记录" scheme="http://example.com/categories/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>stm32cubeIDE与stm32cubeMX库文件安装路径自定义设置</title>
    <link href="http://example.com/post/32e9e993.html"/>
    <id>http://example.com/post/32e9e993.html</id>
    <published>2024-08-03T08:44:26.000Z</published>
    <updated>2024-08-15T12:53:01.546Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、-stm32cubeMX库文件安装路径自定义设置"><a href="#1、-stm32cubeMX库文件安装路径自定义设置" class="headerlink" title="1、 stm32cubeMX库文件安装路径自定义设置"></a>1、 stm32cubeMX库文件安装路径自定义设置</h1><p>打开stm32cubeMX软件，依次点击标题栏【Help】→【Updater Settings】 </p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031651690.png" alt="img" style="zoom:33%;"><hr><p>点击图中的【Browser】，选择自己想要存放库文件的文件夹，选择完成后点击【OK】即可设置成功。 </p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031649589.png" alt="img" style="zoom:33%;"><p> PS：这里的路径建议选择软件的安装目录</p><h1 id="2、-stm32cubeIDE库安装路径自定义设置"><a href="#2、-stm32cubeIDE库安装路径自定义设置" class="headerlink" title="2、 stm32cubeIDE库安装路径自定义设置"></a>2、 stm32cubeIDE库安装路径自定义设置</h1><p>首先打开 stm32cubeIDE软件，然后依次点击【Window】→【Preference】</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031649667.png" alt="img" style="zoom: 50%;"><hr><p> 依次点击左侧【STM32Cube】→【Firmware Updater】，点击上图中的【Browser】，选择自己想要存放库文件的文件夹，选择完成后点击【Apply and Close】即可设置成功</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031650943.png" alt="img" style="zoom: 33%;"><p>PS：stm32cubeIDE与stm32cubeMX的库文件是通用的，也可以直接选择了stm32cubeMX的库文件路径，这样stm32cubeIDE就可以自动识别文件夹中已有的库文件，避免库文件重复下载，节省了内存。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、-stm32cubeMX库文件安装路径自定义设置&quot;&gt;&lt;a href=&quot;#1、-stm32cubeMX库文件安装路径自定义设置&quot; class=&quot;headerlink&quot; title=&quot;1、 stm32cubeMX库文件安装路径自定义设置&quot;&gt;&lt;/a&gt;1、 stm32</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="IDE与MX库文件安装路径自定义设置" scheme="http://example.com/tags/IDE%E4%B8%8EMX%E5%BA%93%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>新电脑 个人博客迁移</title>
    <link href="http://example.com/post/362c3b0.html"/>
    <id>http://example.com/post/362c3b0.html</id>
    <published>2024-08-03T08:29:18.000Z</published>
    <updated>2024-08-15T12:52:37.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装和配置所需要的软件"><a href="#安装和配置所需要的软件" class="headerlink" title="安装和配置所需要的软件"></a><center>安装和配置所需要的软件</center></h1><p>安装Git 客户端，安装过程省略，一般默认下一步</p><p>​    下载地址：<a href="https://git-scm.com/downloads">Git客户端</a></p><p>​    这个无脑下一步即可无需配置</p><p>安装node JS，安装过程省略，一般默认下一步</p><p>​    下载地址：<a href="https://nodejs.cn/download/">node JS</a></p><p>​    配置看这位大佬教程：<a href="https://blog.csdn.net/qq_38514863/article/details/123145473">地址</a></p><p>拷贝个人博客文件夹中，部分文件，到新电脑，存放个人博客文件的文件夹中</p><blockquote><p>_config.yml</p><p>package.json</p><p>scaffolds&#x2F;</p><p>source&#x2F;</p><p>themes&#x2F;</p><p>.gitignore    这个图中没标，注意保留</p></blockquote><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031631634.png" alt="img" style="zoom:33%;"><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a><center>安装hexo</center></h1><p>在 cmd 下输入下面指令安装 hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031631749.png" alt="img" style="zoom:50%;"><h1 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a><center>配置博客</center></h1><p>进入 F:&#x2F;Blog 目录（你拷贝到新电脑的目录），右键git，输入下面指令安装相关模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// “ ”内换成自己对应的</span><br><span class="line">git config --global user.name &quot;HuGen&quot;</span><br><span class="line">git config --global user.email &quot;LoveHuGen@126q.com&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;LoveHuGen@126q.com&quot;</span><br></pre></td></tr></table></figure><p>Github 添加 SSH Keys</p><p>1、在本地创建 <code>SSH Keys</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;wujiajiansh@163.com&quot;</span><br><span class="line">//一直回车，直到结束</span><br></pre></td></tr></table></figure><p>2、复制key</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031629005.png" alt="img" style="zoom:50%;"><p>进入登录GitHub，在设置中添加ssh key</p><img src="https://i-blog.csdnimg.cn/blog_migrate/3431a3fd067aaa03d8860c1652da41c9.png" alt="img" style="zoom: 33%;"><p>将上一步中的文件里面的内容全部复制进去 ，点击添加</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031629211.png" alt="img" style="zoom:33%;"><h1 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a><center>部署博客</center></h1><p>打开电脑的：Windows PowerShell 进入博客目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save  // 文章部署到 git 的模块</span><br><span class="line">（下面为选择安装）</span><br><span class="line">npm install hexo-generator-feed --save  // 建立 RSS 订阅</span><br><span class="line">npm install hexo-generator-sitemap --save // 建立站点地图</span><br></pre></td></tr></table></figure><p>依次命令安装 </p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic1/img/202408031629186.png" alt="img" style="zoom: 50%;"><p>全部安装完成之后，一键三连部署上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>到此全部完成，感谢观看！！！ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装和配置所需要的软件&quot;&gt;&lt;a href=&quot;#安装和配置所需要的软件&quot; class=&quot;headerlink&quot; title=&quot;安装和配置所需要的软件&quot;&gt;&lt;/a&gt;&lt;center&gt;安装和配置所需要的软件&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;安装Git 客户端，安装过程省略，</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="个人博客迁移" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>1.GPIO</title>
    <link href="http://example.com/post/adb202b7.html"/>
    <id>http://example.com/post/adb202b7.html</id>
    <published>2024-08-02T07:47:03.000Z</published>
    <updated>2024-08-15T12:42:13.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论说明"><a href="#理论说明" class="headerlink" title="理论说明"></a><center>理论说明</center></h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a><center>输入</center></h2><p>上拉输入：拉高电平</p><p>下拉输入：拉低电平</p><p>浮空输入：不拉高也不拉低电平</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a><center>输出</center></h2><p>开漏输出：不能输出高电平（P-MOS不可用，则只能低电平）</p><p>推挽输出：可输出高低电平</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022058509.png" alt="输入输出电路图" style="zoom:33%;"><p>输出速率</p><ul><li>Low：2MHz</li><li>Medium：10MHz</li><li>High：50MHz</li></ul><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>LED灯闪烁、按键PE3控制蜂鸣器(PB8)开关、按键PE4控制 LED2(PE5) 亮灭、光敏传感器(PB11)控制 LED1(PB5) 亮灭</p><h2 id="实验一：LED灯闪烁"><a href="#实验一：LED灯闪烁" class="headerlink" title="实验一：LED灯闪烁"></a><center>实验一：LED灯闪烁</center></h2><h3 id="LED灯配置"><a href="#LED灯配置" class="headerlink" title="LED灯配置"></a><center>LED灯配置</center></h3><p>配置引脚功能：</p><p>GPIO Pull-up&#x2F;Pull-down：因为LED灯初始化时就已经设置了高低电平，没有空闲状态，无论是上拉还是下拉都起不到作用</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022058550.png" alt="GPIO配置" style="zoom:33%;"><h3 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>在main.c文件，大概94行开始，代码必须写在 <code>/* USER CODE BEGIN WHILE */ </code> 和 <code>/* USER CODE END WHILE */</code>里面，否则在图形初始化设置后重新生成会把代码清除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//参数1：GPIO口名字(PB)，参数2：GPIO数字(PB5中的5)，参数3：高低电平(0,1)</span></span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">0</span>);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);//电平反转,无需设置高低电平</span></span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><h2 id="实验二：按键控制蜂鸣器、LED灯"><a href="#实验二：按键控制蜂鸣器、LED灯" class="headerlink" title="实验二：按键控制蜂鸣器、LED灯"></a><center>实验二：按键控制蜂鸣器、LED灯</center></h2><p>按键PE3控制蜂鸣器(PB8)开关、按键PE4控制 LED2(PE5) 亮灭、光敏传感器(PB11)控制 LED1(PB5) 亮灭</p><h3 id="按键、蜂鸣器配置"><a href="#按键、蜂鸣器配置" class="headerlink" title="按键、蜂鸣器配置"></a><center>按键、蜂鸣器配置</center></h3><p>按键：设置成<code>上拉输入</code>，PE4则为高电平，当按键按下时，PE4为0(可用if判断是否按下)，则按键按下(其它按钮同理)</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022058792.png" alt="按键电路图" style="zoom:50%;"><p>LED灯、蜂鸣器(PB8)：输出高低电平，设置<code>推挽输出</code></p><p>光敏传感器(PB11)：高低电平由外界光照强度来决定，设置<code>浮空输入</code></p><p>按键配置：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022102523.png" alt="按钮配置" style="zoom:33%;"><p>LED灯配置方面已经说明，直接配置</p><p>蜂鸣器配置(PB8)：</p><p>GPIO Pull-up&#x2F;Pull-down：因为蜂鸣器初始化时就已经设置了高低电平，没有空闲状态，无论是上拉还是下拉都起不到作用</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022102449.png" alt="蜂鸣器配置图" style="zoom: 33%;"><p>光敏传感器配置(PB11)：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022102960.png" alt="光敏传感器配置图" style="zoom:33%;"><p>光敏传感器AO  DO有什么区别？</p><p>AO：输出模拟信号</p><p>DO：输出数字信号（高低电平）</p><h3 id="Cube-IDE代码-1"><a href="#Cube-IDE代码-1" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>在main.c文件，大概94行开始</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(<span class="number">120</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);<span class="comment">//电平反转,无需设置高低电平</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin))<span class="comment">//检测读取按键输入高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(<span class="number">120</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);<span class="comment">//电平反转,无需设置高低电平</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(SUN_GPIO_Port, SUN_Pin))<span class="comment">//检测读取光敏传感器输入高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果展示：<br>[video(video-8ZdCXtcq-1722497936311)(type-csdn)(url-<a href="https://live.csdn.net/v/embed/414340)(image-https://img-blog.csdnimg.cn/img_convert/1ddf5e3e8fa7bae7111014a6e3b0bfed.jpeg)(title-)]">https://live.csdn.net/v/embed/414340)(image-https://img-blog.csdnimg.cn/img_convert/1ddf5e3e8fa7bae7111014a6e3b0bfed.jpeg)(title-)]</a></p><h3 id="代码过程"><a href="#代码过程" class="headerlink" title="代码过程"></a><center>代码过程</center></h3><p>初始化时钟</p><ol><li>初始化时钟</li></ol><p>APB2ENR：外设时钟使能寄存器</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022058546.png" alt="外设时钟使能寄存器图" style="zoom:50%;"><p>大概功能：将APB2ENR(外设时钟使能寄存器)初始化IO端口B时钟开启</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使能时钟初始化代码，在gpio.c中48行</span></span><br><span class="line">__HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line"><span class="comment">//__HAL_RCC_GPIOB_CLK_ENABLE(); 如下过程</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_RCC_GPIOB_CLK_ENABLE()   do &#123; \</span></span><br><span class="line"><span class="meta"> __IO uint32_t tmpreg;  <span class="comment">/*定义一个变量*/</span>\</span></span><br><span class="line"><span class="meta">SET_BIT(RCC-&gt;APB2ENR, RCC_APB2ENR_IOPBEN);\</span></span><br><span class="line"><span class="meta"><span class="comment">/* Delay after an RCC peripheral clock enabling(下方两个延时作用) */</span>\</span></span><br><span class="line"><span class="meta">tmpreg = READ_BIT(RCC-&gt;APB2ENR, RCC_APB2ENR_IOPBEN);\</span></span><br><span class="line"><span class="meta">UNUSED(tmpreg); \</span></span><br><span class="line"><span class="meta">&#125; while(0U)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//SET_BIT(RCC-&gt;APB2ENR, RCC_APB2ENR_IOPBEN); 的解释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.RCC_APB2ENR_IOPBEN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_APB2ENR_IOPBEN_Pos(3U)                              </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_APB2ENR_IOPBEN_Msk(0x1UL &lt;&lt; RCC_APB2ENR_IOPBEN_Pos)<span class="comment">/*RCC_APB2ENR_IOPBEN_Msk 等于0x1&lt;&lt; 3 结果：0x00000008 */</span></span></span><br><span class="line"><span class="comment">//0x1 = 0000 0001 &lt;&lt; 3 = 0000 1000(对应上图,位3为1) = 0x00000008 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_APB2ENR_IOPBENRCC_APB2ENR_IOPBEN_Msk<span class="comment">/* RCC_APB2ENR_IOPBEN 等于0x00000008 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.RCC寄存器，RCC_BASE强转成这个RCC_TypeDef类型的结构体</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC                 ((RCC_TypeDef *)RCC_BASE)</span></span><br><span class="line"><span class="comment">//RCC_BASE = 由总线矩阵偏移到AHB系统总线再偏移到复位和时钟控制(RCC)(可看参考手册的系统结构)(下面三行从下往上看)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_BASE              (AHBPERIPH_BASE + 0x00001000UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHBPERIPH_BASE        (PERIPH_BASE + 0x00020000UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE           0x40000000UL</span></span><br><span class="line"><span class="comment">//RCC_TypeDef（结构体）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> CR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> CFGR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> CIR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> APB2RSTR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> APB1RSTR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> AHBENR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> APB1ENR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> BDCR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> CSR;</span><br><span class="line">&#125; RCC_TypeDef;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.RCC-&gt;APB2ENR</span></span><br><span class="line">RCC指向APB2ENR，则就是结构体内的__IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将APB2ENR的位3置1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>初始化引脚</li></ol><p>GPIOx_BSRR：端口位设置&#x2F;清除寄存器</p><p>低16位中若有某一位 置1，则这个引脚为1(高电平)，若都为0，则不影响</p><p>高16位中若有某一位 置1，则这个引脚位0(低电平)，若都为0，则不影响</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022101304.png" alt="端口位设置/清除寄存器图" style="zoom:50%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gpio.c中第53行</span></span><br><span class="line"><span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_WritePin</span><span class="params">(GPIO_TypeDef *GPIOx, <span class="type">uint16_t</span> GPIO_Pin, GPIO_PinState PinState)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Check the parameters */</span></span><br><span class="line">  assert_param(IS_GPIO_PIN(GPIO_Pin));</span><br><span class="line">  assert_param(IS_GPIO_PIN_ACTION(PinState));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (PinState != GPIO_PIN_RESET)<span class="comment">//GPIO_PIN_RESET为0</span></span><br><span class="line">  &#123;</span><br><span class="line">    GPIOx-&gt;BSRR = GPIO_Pin;<span class="comment">//给BSRR寄存器 低16位赋值 置1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    GPIOx-&gt;BSRR = (<span class="type">uint32_t</span>)GPIO_Pin &lt;&lt; <span class="number">16u</span>;<span class="comment">//给BSRR寄存器 高16位赋值 置0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO_TypeDef *GPIOx 等于 LED2_GPIO_Port</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE((GPIO_TypeDef *)GPIOE_BASE)</span></span><br><span class="line"><span class="comment">//GPIO_TypeDef 强转</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> CRL;</span><br><span class="line">  __IO <span class="type">uint32_t</span> CRH;</span><br><span class="line">  __IO <span class="type">uint32_t</span> IDR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> ODR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> BSRR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> BRR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> LCKR;</span><br><span class="line">&#125; GPIO_TypeDef;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE_BASE            (APB2PERIPH_BASE + 0x00001800UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APB2PERIPH_BASE       (PERIPH_BASE + 0x00010000UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE           0x40000000UL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO_Pin 等于 LED2_Pin</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_5((uint16_t)0x0020)  <span class="comment">/* Pin 5 selected    */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>写实际需求（输入：read  判断，输出：write   0&#x2F;1）</li></ol><h2 id="Keil代码"><a href="#Keil代码" class="headerlink" title="Keil代码"></a><center>Keil代码</center></h2><p>代码必须写在 <code>/* USER CODE BEGIN WHILE */ </code> 和 <code>/* USER CODE END WHILE */</code>里面，否则在图形初始化设置后重新生成会把代码清除，若不打算使用图形初始化则可以随便写，修改的地方如下：</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main函数中</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(<span class="number">120</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);<span class="comment">//电平反转,无需设置高低电平</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin))<span class="comment">//检测读取按键输入高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(<span class="number">120</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);<span class="comment">//电平反转,无需设置高低电平</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(SUN_GPIO_Port, SUN_Pin))<span class="comment">//检测读取光敏传感器输入高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gpio.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MDK_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PEPin PEPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = LED2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(LED2_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = SUN_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  HAL_GPIO_Init(SUN_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = LED1_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(LED1_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = BEEP_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(BEEP_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//60行开始</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Key1_Pin GPIO_PIN_3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Key1_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Key2_Pin GPIO_PIN_4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Key2_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUN_Pin GPIO_PIN_11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUN_GPIO_Port GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_GPIO_Port GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_Pin GPIO_PIN_8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_GPIO_Port GPIOB</span></span><br></pre></td></tr></table></figure><p>若烧录完成后，需要按复位按键才可正常，可尝试以下设置</p><p>第一步：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022101639.png" alt="设置1" style="zoom:50%;"><p>第二步：</p><img src="https://cdn.jsdelivr.net/gh/xinzai-x/MyPic/img/202408022101545.png" alt="设置2" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论说明&quot;&gt;&lt;a href=&quot;#理论说明&quot; class=&quot;headerlink&quot; title=&quot;理论说明&quot;&gt;&lt;/a&gt;&lt;center&gt;理论说明&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
</feed>
