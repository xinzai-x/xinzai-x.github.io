<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>星仔人生录</title>
  
  <subtitle>珍惜当下 不负此生</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-08-09T15:33:19.015Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>星仔</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>4.定时器(TIMER)</title>
    <link href="http://example.com/post/f71d0ad2.html"/>
    <id>http://example.com/post/f71d0ad2.html</id>
    <published>2024-08-06T08:19:27.000Z</published>
    <updated>2024-08-09T15:33:19.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>预分频寄存器(TIMx_PSC)：由于时钟源为：72MHz，T &#x3D; 1&#x2F;f &#x3D; 1&#x2F;72MHz，由于不好计算周期时间，则需要分频，若分72则T &#x3D; 1&#x2F;1MHz &#x3D; 1us(1MHz &#x3D; 一百万秒)</p><p>计数方式：向上(递增到某个数触发中断)、向下(递减到某一个数触发中断)、中心计数(递增到某一个数触发中断，再递减到某一个数触发中断)</p><p>比较值(参考：<a href="https://blog.csdn.net/qq_36553707/article/details/109527645">链接</a>)：</p><p>&ensp;&ensp;&ensp;&ensp;PWM1模式：若计数值小于有效值则高电平，计数值大于有效值则低电平，可以控制比较值来调节占空比</p><p>&ensp;&ensp;&ensp;&ensp;PWM2模式：与PWM1模式相反，计数值小于有效值则低电平，大于有效值则高电平</p><p>复用：Pin脚本身除了支持普通GPIO功能之外，还支持别的功能(使用别的功能就叫复用)</p><p>重映射：Pin脚本身不支持这些功能，配置重映射寄存器，使其具备别的功能</p><h2 id="定时器分类"><a href="#定时器分类" class="headerlink" title="定时器分类"></a><center>定时器分类</center></h2><p>型号：STM32F103ZET6</p><p>基本定时器：TIM6、TIM7</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092327771.png" alt="基本定时器功能" style="zoom: 50%;"><p>通用定时器：TIM2~TIM5</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092327567.png" alt="通用定时器功能" style="zoom:50%;"><p>高级定时器：TIM1、TIM8</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092327762.png" alt="高级定时器功能" style="zoom:50%;"><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>定时器中断实验：LED灯一秒闪烁一次、LED灯两秒闪烁一次、计算单片机运行时间、串口5秒返回单片机运行时间</p><p>PWM信号输出：呼吸灯、电机(由慢到快)、舵机</p><p>输入捕获：检测信号脉冲宽度(舵机脉冲宽度)</p><h2 id="LED灯、UART、定时器、PWM配置"><a href="#LED灯、UART、定时器、PWM配置" class="headerlink" title="LED灯、UART、定时器、PWM配置"></a><center>LED灯、UART、定时器、PWM配置</center></h2><p>LED灯配置请看：<a href="https://d3iiz.top/post/adb202b7.html">链接</a></p><p>串口配置请看：<a href="https://d3iiz.top/post/2c4c3bc3.html">链接</a></p><h3 id="配置定时器："><a href="#配置定时器：" class="headerlink" title="配置定时器："></a>配置定时器：</h3><p>72&#x2F;7200 &#x3D; 0.01，T &#x3D; 1&#x2F;f &#x3D; 1&#x2F;0.01MHz &#x3D; 100us，计数10000，触发中断，100us * 10000 &#x3D; 1s，1s &#x3D; 1000000us，但单片机都是以0开始，所以分频值以及计数值都 -1</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092327709.png" alt="定时器配置" style="zoom: 50%;"><h3 id="配置定时器向上计数溢出中断NVIC-嵌套向量中断控制器"><a href="#配置定时器向上计数溢出中断NVIC-嵌套向量中断控制器" class="headerlink" title="配置定时器向上计数溢出中断NVIC(嵌套向量中断控制器)"></a>配置定时器向上计数溢出中断NVIC(嵌套向量中断控制器)</h3><img src="https://i-blog.csdnimg.cn/direct/40be602f8f2043afa5300919fcf60363.png#pic_center =600x" alt="配置定时器NVIC" style="zoom:50%;"><h3 id="定时器-PWM-控制LED灯配置"><a href="#定时器-PWM-控制LED灯配置" class="headerlink" title="定时器(PWM)控制LED灯配置"></a>定时器(PWM)控制LED灯配置</h3><p>LED(PB5)引脚说明：</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092327266.png" alt="PWMLED灯配置" style="zoom:50%;"><p>所以配置定时器3，通道二，但配置完发现图中不符，需手动修改</p><p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092327594.png" alt="定时器配置LED灯"></p><h3 id="定时器-PWM-控制电机配置"><a href="#定时器-PWM-控制电机配置" class="headerlink" title="定时器(PWM)控制电机配置"></a>定时器(PWM)控制电机配置</h3><p>配置PB4引脚PWM控制电机速度</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092330260.png" alt="配置PWM控制电机速度" style="zoom:33%;"><h3 id="定时器-PWM-控制舵机配置"><a href="#定时器-PWM-控制舵机配置" class="headerlink" title="定时器(PWM)控制舵机配置"></a>定时器(PWM)控制舵机配置</h3><p>舵机脉冲周期：20ms</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092331367.png" alt="PWM控制舵机配置" style="zoom: 33%;"><h3 id="输入捕获定时器配置"><a href="#输入捕获定时器配置" class="headerlink" title="输入捕获定时器配置"></a>输入捕获定时器配置</h3><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092328847.png" alt="输入捕获定时器配置" style="zoom: 33%;"><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092332188.png" alt="输入捕获定时器配置" style="zoom:50%;"><h3 id="配置定时器全局中断NVIC"><a href="#配置定时器全局中断NVIC" class="headerlink" title="配置定时器全局中断NVIC"></a>配置定时器全局中断NVIC</h3><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408092332662.png" alt="开启中断" style="zoom:50%;"><h2 id="LED灯闪烁、串口输出运行时间"><a href="#LED灯闪烁、串口输出运行时间" class="headerlink" title="LED灯闪烁、串口输出运行时间"></a><center>LED灯闪烁、串口输出运行时间</center></h2><p>LED1每隔一秒电平翻转一次，LED2每隔两秒电平翻转一次，串口输出单片机运行时间</p><h3 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//28行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"><span class="type">uint32_t</span> G_Timer_Count = <span class="number">0</span>;<span class="comment">//59行</span></span><br><span class="line"><span class="type">uint8_t</span> UART_Count[<span class="number">200</span>];</span><br><span class="line"><span class="type">uint8_t</span> UART_Flag = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim1);<span class="comment">//开启定时器，97行</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(UART_Flag)<span class="comment">//104行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(UART_Count,<span class="string">&quot;MCU run time is %lus&quot;</span>,G_Timer_Count);</span><br><span class="line">HAL_UART_Transmit(&amp;huart1, UART_Count, <span class="built_in">strlen</span>(UART_Count), <span class="number">1000</span>);</span><br><span class="line">UART_Flag = <span class="number">0</span>;<span class="comment">//打印一次后标志=0，等中断五次(5s)后</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span><span class="comment">//定时器触发函数,157行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(htim == &amp;htim1)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">G_Timer_Count++;</span><br><span class="line"><span class="keyword">if</span>((G_Timer_Count % <span class="number">5</span>) == <span class="number">0</span>)</span><br><span class="line">UART_Flag = <span class="number">1</span>;<span class="comment">//每隔五秒，让标志=1</span></span><br><span class="line"><span class="keyword">if</span>((G_Timer_Count % <span class="number">2</span>) == <span class="number">0</span>)<span class="comment">//LED2每隔两秒翻转电平</span></span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="PWM信号LED呼吸灯、电机、舵机"><a href="#PWM信号LED呼吸灯、电机、舵机" class="headerlink" title="PWM信号LED呼吸灯、电机、舵机"></a><center>PWM信号LED呼吸灯、电机、舵机</center></h2><p>理论参考：<a href="https://d3iiz.top/post/93c966f3.html">链接</a></p><p>PWM信号控制LED，产生一个呼吸灯效果，以及对电机控制，控制速度由慢到快</p><h3 id="Cube-IDE代码-1"><a href="#Cube-IDE代码-1" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> PWM_Value = <span class="number">0</span>,LED_PWM_Value = <span class="number">0</span>,SG_PWM = <span class="number">5</span>;<span class="comment">//47行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="comment">//参数1：定时器句柄(指向配置好的定时器结构体的指针)，参数2：定时器通道,93行</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_2);<span class="comment">//开启定时器3，通道2 PWM</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim3, TIM_CHANNEL_1);<span class="comment">//开启定时器3，通道1 PWM</span></span><br><span class="line">HAL_TIM_PWM_Start(&amp;htim4, TIM_CHANNEL_1);<span class="comment">//开启定时器4，通道1 PWM</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//103行</span></span><br><span class="line">PWM_Value++;</span><br><span class="line">PWM_Value = PWM_Value % <span class="number">200</span>;</span><br><span class="line"><span class="keyword">if</span>(PWM_Value &gt; <span class="number">99</span>)</span><br><span class="line">LED_PWM_Value = <span class="number">200</span> - PWM_Value;<span class="comment">//大于99时，从大到小(100,99...)</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">LED_PWM_Value = PWM_Value;</span><br><span class="line">HAL_Delay(<span class="number">25</span>);</span><br><span class="line"><span class="comment">//参数1：定时器句柄，参数2：定时器通道,参数3：比较值</span></span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_2, LED_PWM_Value);<span class="comment">//设置LED比较值</span></span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim3, TIM_CHANNEL_1, LED_PWM_Value);<span class="comment">//设置电机比较值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(PWM_Value % <span class="number">30</span> == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//每0.1ms计数值+1则0.5ms，比较值模式1，则占空比(高电平)0.5ms</span></span><br><span class="line">SG_PWM += <span class="number">5</span>;</span><br><span class="line"><span class="keyword">if</span>(SG_PWM &gt; <span class="number">25</span>)</span><br><span class="line">SG_PWM = <span class="number">5</span>;</span><br><span class="line">__HAL_TIM_SET_COMPARE(&amp;htim4, TIM_CHANNEL_1, SG_PWM);<span class="comment">//设置舵机比较值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入捕获-IC"><a href="#输入捕获-IC" class="headerlink" title="输入捕获(IC)"></a><center>输入捕获(IC)</center></h2><p>捕获高电平持续时间</p><h3 id="Cube-IDE代码-2"><a href="#Cube-IDE代码-2" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>捕获PWM高电平的时间</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PTD */</span></span><br><span class="line"><span class="type">uint32_t</span> ic_state=<span class="number">0</span>,period_count=<span class="number">0</span>,ic_count=<span class="number">0</span>,us_count;<span class="comment">//32行</span></span><br><span class="line"><span class="comment">/* USER CODE END PTD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_TIM_Base_Start_IT(&amp;htim2);<span class="comment">//开启普通定时器中断</span></span><br><span class="line">  HAL_TIM_IC_Start_IT(&amp;htim2, TIM_CHANNEL_2);<span class="comment">//开启捕获定时器中断</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Please connect MCU51 P2.0,and let SG90 run to detect signal!\n&quot;</span>);<span class="comment">//串口输出捕获的时间(记得配置串口重定向)</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(ic_state== <span class="number">2</span> )<span class="comment">//103行(while里)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* 始终设置的是1us触发计数值加1</span></span><br><span class="line"><span class="comment">* 一个周期大概65ms，若大于65只有捕获中断函数不好使</span></span><br><span class="line"><span class="comment">* 若period_count为1，则代表过了一个中断周期，时间(1*65535)us</span></span><br><span class="line"><span class="comment">* 若没有到整个中断周期时间则剩下的为：ic_count</span></span><br><span class="line"><span class="comment">* 所以两个相加等于整个高电平时间*/</span></span><br><span class="line">us_count = ic_count + period_count * <span class="number">0xFFFF</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;High level duration:  %ldus \n&quot;</span>,us_count);<span class="comment">//(float)(us_count)/1000.000</span></span><br><span class="line">ic_state = <span class="number">0</span>;<span class="comment">//再将中间键恢复0，方便下次上升沿触发中断计时</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_IC_CaptureCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span><span class="comment">//输入捕获触发函数,161行</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(TIM2 == htim-&gt;Instance)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ( ic_state == <span class="number">0</span> )</span><br><span class="line">&#123;</span><br><span class="line">__HAL_TIM_SET_COUNTER(htim,<span class="number">0</span>);<span class="comment">//将定时器从零开始计时</span></span><br><span class="line">__HAL_TIM_SET_CAPTUREPOLARITY(&amp;htim2, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);<span class="comment">//设置成下降沿触发</span></span><br><span class="line">ic_state = <span class="number">1</span>;<span class="comment">//下次触发中断时(下降沿)则运行else</span></span><br><span class="line">period_count = <span class="number">0</span>;</span><br><span class="line">ic_count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">ic_count = HAL_TIM_ReadCapturedValue(&amp;htim2,TIM_CHANNEL_2);<span class="comment">//读取定时器计数值</span></span><br><span class="line">__HAL_TIM_SET_CAPTUREPOLARITY(&amp;htim2, TIM_CHANNEL_2,   TIM_INPUTCHANNELPOLARITY_RISING);<span class="comment">//设置成上降沿触发</span></span><br><span class="line">ic_state = <span class="number">2</span>;<span class="comment">//进入while里面的判断</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_TIM_PeriodElapsedCallback</span><span class="params">(TIM_HandleTypeDef *htim)</span><span class="comment">//普通定时器中断触发函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(TIM2 == htim-&gt;Instance)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">if</span>(ic_state==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(period_count==<span class="number">0XFFFF</span>)<span class="comment">//一次周期大约65ms，若进入这个需要(65*65535)ms</span></span><br><span class="line">&#123;</span><br><span class="line">ic_state=<span class="number">2</span>;</span><br><span class="line">ic_count=<span class="number">0XFFFF</span>;<span class="comment">//返回一个超大数显示错误</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">period_count++;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;预分频寄存器(TIMx_PSC)：由于时钟源为：72MHz，T &amp;#x3D; 1&amp;#x2F;f &amp;#x3D</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>3.串口(UART)</title>
    <link href="http://example.com/post/2c4c3bc3.html"/>
    <id>http://example.com/post/2c4c3bc3.html</id>
    <published>2024-08-05T10:02:46.000Z</published>
    <updated>2024-08-07T02:25:56.792Z</updated>
    
    <content type="html"><![CDATA[<p>串口理论部分可看51部分：<a href="https://blog.csdn.net/qq_65047384/article/details/140470283">链接</a></p><p>数据帧 &#x3D; 帧头(2字节，例如AA、BB) + 数据长度（2字节）+ 数据 + CRC16校验（2字节） + 帧尾（2字节）</p><p>回调函数在：stm32f1xx_it.c里找对应的函数转进入里面找</p><p>中断函数：stm32f1xx_hal_uart.c（别的只是uart不同）</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>串口一发送命令控制LED灯(PB5、PE5)</p><h2 id="LED灯、串口、串口打印浮点数据、串口重定向配置"><a href="#LED灯、串口、串口打印浮点数据、串口重定向配置" class="headerlink" title="LED灯、串口、串口打印浮点数据、串口重定向配置"></a><center>LED灯、串口、串口打印浮点数据、串口重定向配置</center></h2><p>LED灯配置请看：<a href="https://d3iiz.top/post/adb202b7.html">链接</a></p><p>串口配置：</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408061554189.png" alt="串口配置" style="zoom:33%;"><p>配置串口中断NVIC(嵌套向量中断控制器)</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408061555432.png" alt="配置中断NVIC" style="zoom:33%;"><p>配置DMA：</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408061554276.png" alt="配置DMA" style="zoom: 33%;"><p>Cube IDE中串口打印浮点数据配置方法(<a href="https://blog.csdn.net/caihaitao2000/article/details/112469098">参考</a>)：进入“Project→Properties”；显示界面如下。按照图片中的设置完成即可！</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408061554668.png" alt="打印浮点数配置" style="zoom: 33%;"><p>串口重定向配置：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> u_buf[<span class="number">256</span>];<span class="comment">//usart.c,24行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//usart.h,32行</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">uint8_t</span> u_buf[<span class="number">256</span>];<span class="comment">//usart.h，38行</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> printf(...)  HAL_UART_Transmit(&amp;huart1, (uint8_t *)u_buf, sprintf((char*)u_buf, __VA_ARGS__), 0xffff)<span class="comment">//usart.h，39行</span></span></span><br></pre></td></tr></table></figure><h2 id="轮询方式"><a href="#轮询方式" class="headerlink" title="轮询方式"></a><center>轮询方式</center></h2><p>缺点：</p><p>&ensp;&ensp;&ensp;&ensp;必须要等待数据发送完或者等待时间超时，代码才会往下走</p><p>&ensp;&ensp;&ensp;&ensp;必须要等待数据接收到固定的字节长度，超时，代码才往下走</p><h3 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>mian.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//26行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> UART_Recv[<span class="number">5</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">char</span> UART_Str[<span class="number">30</span>];<span class="comment">//49行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数1：UART 模块的配置信息的指针,参数2：数据缓冲区的指针，参数3：接收字节长度，参数4：接收超时时间(单位为毫秒)</span></span><br><span class="line">HAL_UART_Receive(&amp;huart1, UART_Recv, <span class="number">4</span>, <span class="number">1000</span>);<span class="comment">//接收数据函数</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;LED1&quot;</span>, (<span class="type">char</span> *)UART_Recv) == <span class="number">0</span>)<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line"><span class="built_in">memset</span>(UART_Recv,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);<span class="comment">//替换字符函数，常用于清除指定空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2&quot;</span>, (<span class="type">char</span> *)UART_Recv))<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span><br><span class="line"><span class="built_in">memset</span>(UART_Recv,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">sprintf</span>(UART_Str, <span class="string">&quot;%f\n&quot;</span>, <span class="number">666.6</span>);</span><br><span class="line"><span class="comment">//参数1：UART 模块的配置信息的指针,参数2：发送的字符串或字符数组，参数3：发送字节长度，参数4：接收超时时间(单位为毫秒)</span></span><br><span class="line">HAL_UART_Transmit(&amp;huart1, (<span class="type">char</span> *)UART_Str, <span class="built_in">strlen</span>(UART_Str), <span class="number">1000</span>);<span class="comment">//发送数据</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;xinzai\n&quot;</span>);<span class="comment">//配置串口重定向后才可使用</span></span><br></pre></td></tr></table></figure><h2 id="中断-IT-方式"><a href="#中断-IT-方式" class="headerlink" title="中断(IT)方式"></a><center>中断(IT)方式</center></h2><h3 id="Cube-IDE代码-1"><a href="#Cube-IDE代码-1" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HAL_UART_RxCpltCallback(huart);<span class="comment">//stm32f1xx_hal_uart.c,3660行</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_uart.c,2619行</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span><span class="comment">//中断回调函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//26行</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PV */</span></span><br><span class="line"><span class="type">uint8_t</span> UART_Recv_IT[<span class="number">5</span>];<span class="comment">//48行</span></span><br><span class="line"><span class="type">char</span> UART_Str[<span class="number">30</span>];<span class="comment">//49行</span></span><br><span class="line"><span class="comment">/* USER CODE END PV */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line"><span class="comment">//参数1：UART 模块的配置信息的指针,参数2：数据缓冲区的指针，参数3：接收字节长度</span></span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, UART_Recv_IT, <span class="number">4</span>);<span class="comment">//串口中断接收函数，95行</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//while函数里</span></span><br><span class="line"><span class="built_in">sprintf</span>(UART_Str, <span class="string">&quot;%d\n&quot;</span>, <span class="number">666</span>);<span class="comment">//102</span></span><br><span class="line">HAL_UART_Transmit_IT(&amp;huart1, UART_Str, <span class="built_in">strlen</span>(UART_Str));<span class="comment">//串口中断发送函数,103</span></span><br><span class="line">HAL_Delay(<span class="number">1000</span>);<span class="comment">//104</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//151行开始</span></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 4 */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UART_RxCpltCallback</span><span class="params">(UART_HandleTypeDef *huart)</span><span class="comment">//串口中断接收触发函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(huart == &amp;huart1)<span class="comment">//判断传进来的串口是哪个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;LED1&quot;</span>, (<span class="type">char</span> *)UART_Recv_IT) == <span class="number">0</span>)<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IT,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);<span class="comment">//替换字符函数，常用于清除指定空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2&quot;</span>, (<span class="type">char</span> *)UART_Recv_IT))<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IT,<span class="string">&#x27;\0&#x27;</span>,<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为只能接受一次串口中断，所以在串口中断触发函数需要重新调用</span></span><br><span class="line">HAL_UART_Receive_IT(&amp;huart1, UART_Recv_IT, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 4 */</span></span><br></pre></td></tr></table></figure><h2 id="空闲中断-IDLE-DMA"><a href="#空闲中断-IDLE-DMA" class="headerlink" title="空闲中断(IDLE) + DMA"></a><center>空闲中断(IDLE) + DMA</center></h2><p>不受接收字符长度影响，可以随意接收字符长度并判断</p><p>空闲状态：在多个字节传输结束后，通信线路将会维持高电平，这个状态称为空闲状态（没有数据传输时的空闲状态，数据传输刚结束的空闲状态）</p><p>空闲中断产生条件：在数据传输过程中，当CPU检测到通信线路处于空闲状态时，且空闲状态的持续时间大于一个字节传输时间时，空闲状态标志IDLE将由硬件置1，产生空闲中断</p><h3 id="Cube-IDE代码-2"><a href="#Cube-IDE代码-2" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stm32f1xx_hal_uart.h,2710行</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span><span class="comment">//空闲中断接收回调函数</span></span><br></pre></td></tr></table></figure><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span><span class="comment">//27行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN PD */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RECV_Size 100<span class="comment">//37行</span></span></span><br><span class="line"><span class="comment">/* USER CODE END PD */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 2 */</span></span><br><span class="line">HAL_UARTEx_ReceiveToIdle_DMA(&amp;huart1, UART_Recv_IDLE, RECV_Size);<span class="comment">//空闲中断接收函数,94行</span></span><br><span class="line"><span class="comment">//数据接收RECV_Size一半时会重新触发中断，需要关闭DMA接收中断使能</span></span><br><span class="line">HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);<span class="comment">//96行</span></span><br><span class="line"><span class="comment">/* USER CODE END 2 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//150行</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_UARTEx_RxEventCallback</span><span class="params">(UART_HandleTypeDef *huart, <span class="type">uint16_t</span> Size)</span><span class="comment">//空闲中断接收触发函数</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(huart == &amp;huart1)<span class="comment">//判断传进来的串口是哪个</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;LED1&quot;</span>, (<span class="type">char</span> *)UART_Recv_IDLE) == <span class="number">0</span>)<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IDLE,<span class="string">&#x27;\0&#x27;</span>,Size);<span class="comment">//替换字符函数，常用于清除指定空间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2ON&quot;</span>, (<span class="type">char</span> *)UART_Recv_IDLE))<span class="comment">//字符串比较函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);</span></span><br><span class="line">  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">memset</span>(UART_Recv_IDLE,<span class="string">&#x27;\0&#x27;</span>,Size);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LED2OFF&quot;</span>, (<span class="type">char</span> *)UART_Recv_IDLE))</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memset</span>(UART_Recv_IDLE,<span class="string">&#x27;\0&#x27;</span>,Size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为只能接受一次串口中断，所以在串口中断触发函数需要重新调用</span></span><br><span class="line">HAL_UARTEx_ReceiveToIdle_DMA(&amp;huart1, UART_Recv_IDLE, RECV_Size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;串口理论部分可看51部分：&lt;a href=&quot;https://blog.csdn.net/qq_65047384/article/details/140470283&quot;&gt;链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;数据帧 &amp;#x3D; 帧头(2字节，例如AA、BB) + 数据长度（2字节）+ </summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>完美解决443端口被vmware占用的问题</title>
    <link href="http://example.com/post/b94c2cf2.html"/>
    <id>http://example.com/post/b94c2cf2.html</id>
    <published>2024-08-04T14:54:51.000Z</published>
    <updated>2024-08-05T10:03:43.785Z</updated>
    
    <content type="html"><![CDATA[<p> 第一步，打开虚拟机，找到首选项</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408042305038.png" alt="进入首选项" style="zoom:50%;"><p>第二步，选择共享虚拟机，修改端口号，保存</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408042304709.png" alt="修改端口" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 第一步，打开虚拟机，找到首选项&lt;/p&gt;
&lt;img src=&quot;https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408042305038.png&quot; alt=&quot;进入首选项&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;第二步，选</summary>
      
    
    
    
    <category term="Windows使用技巧" scheme="http://example.com/categories/Windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="解决443端口被vmware占用" scheme="http://example.com/tags/%E8%A7%A3%E5%86%B3443%E7%AB%AF%E5%8F%A3%E8%A2%ABvmware%E5%8D%A0%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>win10桌面图标变白</title>
    <link href="http://example.com/post/a06b5fda.html"/>
    <id>http://example.com/post/a06b5fda.html</id>
    <published>2024-08-04T14:54:31.000Z</published>
    <updated>2024-08-05T10:03:43.785Z</updated>
    
    <content type="html"><![CDATA[<p> 1、双击打开此电脑，点击【查看】，勾选<strong>【隐藏的项目】</strong></p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408042300201.png" alt="关闭隐藏" style="zoom:50%;"><p>2、同时按 【Win + R】键打开运行，输入<strong>【%localappdata%】</strong>回车确定</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408042257970.png" alt="打开命令" style="zoom:50%;"><p>3、右键选择删除<strong>lconCache.db</strong>文件</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408042257244.png" alt="删除文件" style="zoom: 67%;"><p>4、同时按【Shift + Ctrl + Esc】键打开任务管理器，找到<strong>Windows 资源管理器</strong>，右键选择重新启动</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408042258681.png" alt="资源管理器" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 1、双击打开此电脑，点击【查看】，勾选&lt;strong&gt;【隐藏的项目】&lt;/strong&gt;&lt;/p&gt;
&lt;img src=&quot;https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408042300201.png&quot; alt=&quot;关闭隐藏&quot; s</summary>
      
    
    
    
    <category term="Windows使用技巧" scheme="http://example.com/categories/Windows%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="win10桌面图标变白" scheme="http://example.com/tags/win10%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87%E5%8F%98%E7%99%BD/"/>
    
  </entry>
  
  <entry>
    <title>通过 Cloudflare 和 JsDelivr 免费加速博客 GitHub 图床等静态资源</title>
    <link href="http://example.com/post/3e643b17.html"/>
    <id>http://example.com/post/3e643b17.html</id>
    <published>2024-08-03T09:25:05.000Z</published>
    <updated>2024-08-03T09:42:00.254Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9646e9724ae92f705f7a96d85b5ab68cc226132556d154bb3fc0d62b8c047962">d0082e95ce53ece4a4c0f5b8a727fc3f962b5c64e8654922e002aaab68a80fee44659e4ed481944adba9187c18a549696eb845bfa6a1cd0190d87af65317bf0556e6003eaf2e57f4faffd9d5095487d749f4baae378a311e09dcce66eeab912ac4701baa5dd63ec753c525efac934109102b75663fa19d2d1b179fe6a5bb9adbb69749d9a983dad87682f2332eff7dff76347dfd37b7626947f2ae9e1a239a3b15f8504a5cbf1a27530c16e0e1ff89a2848b86074ea4d6d304f104026e796a57d932698fe0f67e0078e91f3e72e15c2b1dc34c0123be4fe4f7273e6355fb018dadde48c0f9e308629f0a8d1de2bd0f017d5f2283d25fcb967dcfacf686c1ec607a3f18edcfdec9a61386b9957d0b959c9cf373de4d46657725c081d28313b42f3127612a27b06fa4e81489d37f86e30df43266280b207184a2de27af22c257b28c68008d73f3020982c72f87bf8a11e627ade32279fada559e38954d534a7668c06c8f1a89c598d799d5690acc6d621bd4b6dcb7043c6852ead49d8f1a5097f563b168dedd5e34dd3324e16fa8f624adaef0047a3bc0422febc28e6470d318cbf21c0a2df3d7b76948e436c5723cbb5aafa639f810ae257c8c4a39de99abf541ae3b69316187d2b3cf65e5059d83b79056f76e95ac47a3514dc0ba02cc5de07a7d0c99199d3548da29b2c05498ee27164ea50af3d780fa538fab36da198892c77c0f4538a06340f5c2ecce98487810962657452c84b519a1f5a0750198bd0a5234778ae451d476dbc40388f0d655c21acf381e04b6c32df16831ee1ba04bb54df50f64c50581c30118fa2ea6b19fe7d7390d309017725d50e733f809b242adc5c521fa8022a9493bbab4beac16206f88e3074ec10b6a632311e2a3061ae0f6d6c5f1d2e41a765e65aa1540cb72f97c2af5b4319e6e198521173fe6536defe4b2538e241b40b38d92945843a3c792eaeb77fb452ecde97dbfde700512a40aff0ecef38f1eec3485f8815dee1aba4c6dcc9bf2a531c6e95a46a5c7fd12a5b905ab3dbb4d5729c43a9cf3eeb2a544e7435d6b09431494b0c16312964189a8a59368a7e429ff1f25a655570c6e679f7779e62b4ee34ee1f31e1d911d627b0003564d81ec6c38df1db57419d106208dc33010226b78194c9194c19436605a59bc6f1efe489f4b2c6788a6300c761a4f09e00f155e67c83e1352bb39fe20ff46be21eacdb1884dbb0ad78bd84af4c7aa5e6b26dc3659601f8e58c4ed198cdb64fbf83c0abd537f775f0b25741e8a8724299c5a3e24a2dcc076e70ffbb73b024f367efe1cd2200d2be4d243924ad1e93903a748022fb72973c2079e17ee1a7bd4bb34de41e7aa0a5694e600f5bd4ce9bf38e63e6e2ec0df1116a4ea1e7595ab182a94da14aad10ee24d922e1594c43a0b1722eb304141f3ea0949cbc10ce6a30819e1588d7f15a48404857c089c37050b179f9e3011827ca4e870c69127d7967fac6052044a9ff49c2b9d3d689ee09555583b0943546aeb7848599e3289e2eca9772999de745bd5fc8aebf00297dbc6a5d7671df28eb693310d85255a1af2ca2dfc91b255a44d91b5d5b65eedd3df95ea6fabdbde49108760049e16b578f351c318a921e2be2a45b7f8453a3722ecc02533be71fa53a5ae888d1555f629427ef0226010ef385427e8d01f33174d9c5f1417efd71cbef03090ffef959422a452c9ec5f8caa356c1991b91d8a41c2dc07ced212692dfa8d2230da25bd6035baacd37b9c85fdb7b780cf76121fcc8607c20ebdb076ab97fdfe0a6b710d0792b944bd5a4a30255185fbc5912bf26577070260713b33825c8151e1de6b210f4f230262d0bf09a76b7b38ef5a5b88e0ce47a83c003e44b46195d72448b6fc2f0ab1f1f3099025c98018c1b0ae5ef593fb0dc7be100faf469ec2f5c88f777eaaae9db25cf488f9ae0e50946c12984d5451dd55b6778aba8546d14a0895d9d2c78e0384da653fa51b082ac8c081d60b204e38fc3ec71db8e1ac9c88a82bc04174470ee9e0d1b5dcb910b822439ab9ce9e26fb7a438ecb9e029be795cac31f50fff9c8d7fb2875d9ad7e6e826d1dd8a94db67d5bbbf74ff0b0092aea9315ce0bfb79f454be73232970df6c30c611354327f9fd9fec91109b4b95e2ef55a2352e7acd347a9e9c8df8bcbf8d886cf972eafaddb67475305092e2361f87895d049ea61b3f8b900fd7f36dc8b5447f69765b9a5d6c85be196a4bef75206c1a85117dbd1a94f7eae7b6a382c80d9512d2eeb32b9bdafaf407d572013957d5fc35fdf4b17b92e79c7b4c2dbdcfdd5dd47d4d0023085173d6c980c0a50ff9feff84a800c632e87afdd3a33611e983daa937d2f6dc225dca513e7a9025a0d56182cd908de55befba39fd1e22889e56f6f112b537144037916113a2af21415118f89f4f3ba281c5fabaad490e469a6dcdd65db1e92010f5f363c47f67133e87a530ceaaa94ebf3ac7db8710c210f93b0c897a6c08533e8e6580968e09e0e465851b60b9ea29c6ba0186cbb2deeaa9dce514e8af0d87c799c2e2a361fe814f45efecbc59a0836bf14f8d0e8a3b4f3f99484e87c86f150c3736673f8683a2a8616173d3921f1e6364c8e906f28d75a8e8e1b7261bc3a3fb13aa003e646e8777eebb95efc906c8c7fd4c83c03224f67fbcfacb22ac7e16a8fc254ff85d66433f6aa16ac0da45a370aad933c43aac76b02fe8303d22bc62155fb4ece10f8b15aa840a570263324489ac45d099a1a929fa42950baf132d89f691e024366c639b4bc25324f9ef61fefd8e4ba5f847f7b83055fb3000200cc92d91e101a23931d184a34064c4fb5cd2cf2ed1ff6b60888d5c2774ea34a14c1ad659985562ea00d1a55696f700114542698f6188fe0aed6c89b6e46fab7a18fac5cb5898d1b5ccf8e12ee70940136cc0797c7e20532e48ecdd502523852a03ed89425e3bd8b0f507a92e3dbd7e9e278288e340130661eadceb6ca4b8e493bc0aceba158ab67f47722a4a4d45b89725669c2e7ea5dd8473dd00b49a7250ab8979c59054a6bd24b604bb2ba959dd41d482c05af755eb62c5282db2f22a934765c013aede426fbf7254a1e6df970f41f2022b7ff28ea43fdd890f10298d6a006a38095d925d35955aa75ce799a7fe3f19456efa518be52d190407b29efdf8935f5df7f61da0b9f72fdb5ed3939c0f60256db886662e793644f2b167baa50fbfa1bd2df03967f151938a441aec234722bb1ba4c98620cc9751a5390d4919834c20f2c6395a8dfbb3be9d817fec1f55efeb94cce5b11225e21e32de0bb4f3406ea1de724c13639803ca742ad191631051d197a20dcd8f0be7fa6802071c987734a3aaafc8e418be707bdd58a34dd35d1ce4ed7de8b9196731159bed15cf1b43cf38ff5cd94c78d9e2e9d62d53c753c5242fb21ccf5ff82b30588c015e0b11f85d81383049b26329aaa895f2c0f1f7545ad470caada617129795eaaa553fb7aad1b15a08e8e5c717055496420a37a546d8f8704fa95842bb6d8a9344a4bd46e3f75f2c9ef15727c90063d260edd72b66679d675448bf3dfa50feabe4c62c37b24ab51e0e8a6210d7e0d5073303cb038dfca1cb5f90600ae74f365849e502682dbbbd57a15698f5877e3dddc4ae2a2ed9d8776c582e61c54fc2407d3469b0071af5c5bd32d3f4ac4c2ec7499100a3c567c02c5c24647fec2ed150e71a3c882b4122bd3e98e12311c394a4fa0f13cc6513a183c59ee1b4108ecf60c066d18ced28dfc0a22b3feaf3ec3168691309ee028abafea8d7768418f321556fe3ab9ea16484debbc05ee9d815031fb2f6ebd1c8b14f3dd170007a05074e00b7053e3e4a37ba3d4d72d82a9eeb60f6a8f1314bcc0596bcd514e2545944288571f1f3224c93c0c669c510d2ca7c58c2b00b29e4661f96ebbeada866028cf33c048675e40628b98e8c396c62f35af953c4e5fdea6af7f8fedfa2fbde581f06dbaae55fc08b89e5aeec6f875b44de4a7a1f704d0e8578a51d1ee27bb5861e96d59d76a621d0485e6d0a34baf3d7241ff0e83e28afb648245914b99019f9717dffa54802b5546d5a27f1b4f7ffebdeb467829f4f0864e14aed96c49f8a7d6872d924f642dd486abcecb23b0e8a0d8d5e00ef14e7420ce22656d03f4f34093607e1850dc7e3ebbb5c08e5bba0b4ba6e8ed02f9bb18272bf8a6f8c2a2f9cacc603dc566a8439ea3a43c7dd1ffeea86e1e13c4ad7d36bfb25996cb69708bd561b62e9dcd998628fc729f6c4e37eec0bdb5c17d2b1059c68a3745123188e167dc59c7a301a772faad917670a5add126d30ecdea86e26e21f6f9794211c83c21c536aa84346ecbad736f7d5049a6c1d8627b315f86a13a4da8177f08d9236ac6c57b39a7dc3d13188b449092640bce3f14fcb8fbf5e80f4c470f7d311372807b77ae4cd12873951e1e3b7a358cfae8bf8b024085cb5ec2c8828ddf2e4083d7e298073ae70474693f88812aefaf6a23a6f92e07ced47c943f75f5b590ec81824959e4ee63516025829483433d59645d1cc0c1c1e98416432a2c8b4596668cc4e18e205157ae773a80a97eb34e35b7839db8b82d3c980335da99c3881d29381ebb57696b4c5dad45934a15889ce1434231991f9821108f2b96a6f443236a2087dafbf237489f03d04624c4624468f27ee46919ff3da8e9f50830a5fc2ad8a49443ade3da99c33634f4f5c12216417b22bb785180bc5358660cfd83623285f1a1292d3722bf3a47badc52310c6c017059ec1296207dce7f3ca848e8b8a5c1485d152c3c6d1ea9a2192810a04c8e3f6a094023721c518be18305416517c6aa18b5406db8f73d82cb68cf284118b60a15f16dc5b4bf25e7da0cd021eb34f101b4019f492284bc0d7e78e8db859504113cbfafa16cc61728e47c9ccef01050624897a7a2f5fe5f95f6fb5e9579a1e1ff3626d6430eafb1414f88ed659cfe841e35a0eb0f98c61188d02b2e42d3b857f75e7c1384bdd7cf31fe8fbfcdfde9301fcff9c0f1401ae6c9171c44a37a5b158bc93fdabc4350ba0e786b2e734a202826e3fdb62bdcf3aaed92f50716ff5c1849f5342cf252837262856886de73ed0264fa358cc01802a3529f4de48eccd54b2455273e3ad2acdd72bc29f597fd4f49089c3dd091b3e8a639967ce48b1b8a3273badbf85e19794b5f3f57f31cbb840960628642e7a191ec704252e3f795960abda40daa472415101704a93716fd08972a9bf30d531b6f9cadfe2ed3c07229e3fa0bbeaaab313ae87c8caa676323e85a905c71f193ec187</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</summary>
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="博客加速图床" scheme="http://example.com/tags/%E5%8D%9A%E5%AE%A2%E5%8A%A0%E9%80%9F%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>利用cloudflare加速github博客访问</title>
    <link href="http://example.com/post/b7e3ace9.html"/>
    <id>http://example.com/post/b7e3ace9.html</id>
    <published>2024-08-03T09:24:43.000Z</published>
    <updated>2024-08-03T09:41:56.950Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="38fc50883cdc84802e0b80820bedd2c692f44c0c23f6f17b7c25862b35698eec"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">输入密码，查看文章。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">这是一篇加密文章，内容可能是个人情感宣泄或者收费技术。如果你非常好奇，请与我联系。</summary>
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="加速github博客访问" scheme="http://example.com/tags/%E5%8A%A0%E9%80%9Fgithub%E5%8D%9A%E5%AE%A2%E8%AE%BF%E9%97%AE/"/>
    
  </entry>
  
  <entry>
    <title>2.外部中断(EXTI)</title>
    <link href="http://example.com/post/eb0bc4a3.html"/>
    <id>http://example.com/post/eb0bc4a3.html</id>
    <published>2024-08-03T09:21:42.000Z</published>
    <updated>2024-08-05T02:44:39.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论"><a href="#理论" class="headerlink" title="理论"></a><center>理论</center></h1><p>NVIC：嵌套向量中断控制器（<a href="https://blog.csdn.net/m0_74761015/article/details/136269042">解释教程</a>）</p><p>外部通用中断线(<code>EXTI0~EXTI15</code>)：每个GPIO设置成中断模式，与中断控制器连接的线</p><h2 id="外部中断触发方式"><a href="#外部中断触发方式" class="headerlink" title="外部中断触发方式"></a><center>外部中断触发方式</center></h2><p>上升沿触发、下降沿触发、双边沿触发</p><h2 id="外部中断触发函数"><a href="#外部中断触发函数" class="headerlink" title="外部中断触发函数"></a><center>外部中断触发函数</center></h2><p>在stm32f1xx_it.c文件里(大概204行)</p><table><thead><tr><th align="center">中断触发函数</th></tr></thead><tbody><tr><td align="center">EXTI0_IRQHandler</td></tr><tr><td align="center">EXTI1_IRQHandler</td></tr><tr><td align="center">EXTI2_IRQHandler</td></tr><tr><td align="center">EXTI3_IRQHandler</td></tr><tr><td align="center">EXTI4_IRQHandler</td></tr><tr><td align="center">EXTI9_5_IRQHandler</td></tr><tr><td align="center">EXTI15_10_IRQHandler</td></tr></tbody></table><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a><center>解析</center></h2><p>解析初始化中断过程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//gpio.c中58</span></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PEPin PEPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = EXTI_Key1_Pin|EXTI_Key2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);<span class="comment">//将上面三行代码的数据传入这个函数解析初始化</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_gpio.c中286</span></span><br><span class="line"><span class="comment">/*--------------------- EXTI Mode Configuration ------------------------*/</span></span><br><span class="line"><span class="comment">/* Configure the External Interrupt or event for the current IO */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; EXTI_MODE) == EXTI_MODE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">/* Enable AFIO Clock */</span></span><br><span class="line">__HAL_RCC_AFIO_CLK_ENABLE();<span class="comment">//打开复用时钟</span></span><br><span class="line">temp = AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>];</span><br><span class="line">CLEAR_BIT(temp, (<span class="number">0x0F</span>u) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));</span><br><span class="line">SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) &lt;&lt; (<span class="number">4u</span> * (position &amp; <span class="number">0x03</span>u)));</span><br><span class="line">AFIO-&gt;EXTICR[position &gt;&gt; <span class="number">2u</span>] = temp;<span class="comment">//把固定引脚设置成复用模式(如复用成外部中断)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//配置上升沿还是下降沿</span></span><br><span class="line"><span class="comment">/* Enable or disable the rising trigger */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; RISING_EDGE) == RISING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;RTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;RTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Enable or disable the falling trigger */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; FALLING_EDGE) == FALLING_EDGE)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;FTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;FTSR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Configure the event mask */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_EVT) == GPIO_MODE_EVT)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;EMR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;EMR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打开或关闭中断</span></span><br><span class="line"><span class="comment">/* Configure the interrupt mask */</span></span><br><span class="line"><span class="keyword">if</span> ((GPIO_Init-&gt;Mode &amp; GPIO_MODE_IT) == GPIO_MODE_IT)</span><br><span class="line">&#123;</span><br><span class="line">  SET_BIT(EXTI-&gt;IMR, iocurrent);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  CLEAR_BIT(EXTI-&gt;IMR, iocurrent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>中断实现过程</strong></p><ol><li>确认中断</li><li>清除中断标志位</li><li>执行中断回调函数</li></ol><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408041510330.png" alt="图示" style="zoom:50%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//stm32f1xx_it.：大概204行</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI3_IRQHandler</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//中断入口函数</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 0 */</span></span><br><span class="line">  HAL_GPIO_EXTI_IRQHandler(EXTI_Key1_Pin);<span class="comment">//在库函数不能写</span></span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_IRQHandler</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span><span class="comment">//stm32f1xx_hal_gpio.c：大概546行</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* EXTI line interrupt detected */</span></span><br><span class="line">  <span class="keyword">if</span> (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != <span class="number">0x00</span>u)<span class="comment">//判断有没有中断触发(有:1,没:0)</span></span><br><span class="line">  &#123;</span><br><span class="line">    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);<span class="comment">//若进来则为1，为1则清除中断标志位</span></span><br><span class="line">    HAL_GPIO_EXTI_Callback(GPIO_Pin);<span class="comment">//回调函数(Callback)，执行函数</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_gpio.h中190</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__) (EXTI-&gt;PR &amp; (__EXTI_LINE__))<span class="comment">//挂起寄存器(EXTI_PR)(参考手册140) 有没有中断触发</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//stm32f1xx_hal_gpio.h中198</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__) (EXTI-&gt;PR = (__EXTI_LINE__))<span class="comment">//赋值，(参考手册140)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用这个函数，__weak：弱声明，若别文件也有相同的函数，优先调用没有弱声明</span></span><br><span class="line">__weak <span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span><span class="comment">//stm32f1xx_hal_gpio.c：大概561行</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Prevent unused argument(s) compilation warning */</span></span><br><span class="line">  UNUSED(GPIO_Pin);</span><br><span class="line">  <span class="comment">/* <span class="doctag">NOTE:</span> This function Should not be modified, when the callback is needed,</span></span><br><span class="line"><span class="comment">           the HAL_GPIO_EXTI_Callback could be implemented in the user file</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若相同有一个PA0设置了中断，别的PB0等等都不能设置成中断</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408041510079.png" alt="解析图" style="zoom:50%;"><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>实验：按键PE3控制蜂鸣器(PB8)、按键PE4控制LED灯(PB5)</p><h2 id="LED灯、蜂鸣器、按键配置"><a href="#LED灯、蜂鸣器、按键配置" class="headerlink" title="LED灯、蜂鸣器、按键配置"></a><center>LED灯、蜂鸣器、按键配置</center></h2><p>LED灯、蜂鸣器配置，上一篇已经说过，<a href="https://d3iiz.top/post/adb202b7.html">地址</a></p><p>按键设置<code>下降沿触发</code>(也可上升沿触发)，GPIO Pull-up&#x2F;Pull-down：设置上拉，空闲状态为高电平</p><p>按键没按下时高电平，按下时有下降沿和上升沿，所以两个触发都可，按键这里是中断触发功能，不是GPIO输入功能</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408041510669.png" alt="按键设置图" style="zoom: 33%;"><p>配置NVIC(嵌套向量中断控制器)</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408041512291.png" alt="配置NVIC" style="zoom: 50%;"><p>调节不同中断优先级(数字越小优先级越高)</p><p>若抢占优先级相同，比较子优先级</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408041510564.png" alt="中断优先级" style="zoom:33%;"><p>调节多少bit对应代码在：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HAL_Init();<span class="comment">//main.c(74)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HAL_StatusTypeDef HAL_Init(void)中的</span></span><br><span class="line">HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);<span class="comment">//stm32f1xx_hal.c(157)</span></span><br></pre></td></tr></table></figure><h2 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h2><p>main.c：144行（在mian函数外任意一个 &#x2F;* USER CODE BEGIN  <em>&#x2F;  &#x2F;</em> USER CODE END  *&#x2F;中）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//若需要延时需要将延时中断优先级比外部中断优先级高，优先级高才可以打断低优先级</span></span><br><span class="line">HAL_Delay(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key1_GPIO_Port, EXTI_Key1_Pin) == <span class="number">0</span>)<span class="comment">//读引脚，相同=0,不同=1</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key2_GPIO_Port, EXTI_Key2_Pin) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>中断处理程序要少用延时的原因<br>中断处理的要求是即时处理，尽快退出。如果在中断中使用延时函数或者使用IO阻塞函数，会影响到系统的实时性。如果下次中断来临，延时或者阻塞还没结束，那么就永远在中断里死循环了。<br>因此，对于中断处理程序的要求是：<br>&ensp;&ensp;&ensp;&ensp;短小精悍，不要处理过多任务<br>&ensp;&ensp;&ensp;&ensp;不使用延时函数或者IO阻塞的函数</p></blockquote><h2 id="Keil代码"><a href="#Keil代码" class="headerlink" title="Keil代码"></a><center>Keil代码</center></h2><p>需要修改的地方如下：</p><p>mian.c(144)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_EXTI_Callback</span><span class="params">(<span class="type">uint16_t</span> GPIO_Pin)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//若需要延时需要将延时中断优先级比外部中断优先级高，优先级高才可以打断低优先级</span></span><br><span class="line">HAL_Delay(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key1_GPIO_Port, EXTI_Key1_Pin) == <span class="number">0</span>)<span class="comment">//读引脚，相同=0,不同=1</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(HAL_GPIO_ReadPin(EXTI_Key2_GPIO_Port, EXTI_Key2_Pin) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.h(60)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key1_Pin GPIO_PIN_3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key1_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key1_EXTI_IRQn EXTI3_IRQn</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key2_Pin GPIO_PIN_4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key2_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXTI_Key2_EXTI_IRQn EXTI4_IRQn</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_GPIO_Port GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_Pin GPIO_PIN_8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_GPIO_Port GPIOB</span></span><br></pre></td></tr></table></figure><p>gpio.c(42)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MX_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PEPin PEPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = EXTI_Key1_Pin|EXTI_Key2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PBPin PBPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = LED1_Pin|BEEP_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(GPIOB, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* EXTI interrupt init*/</span></span><br><span class="line">  HAL_NVIC_SetPriority(EXTI3_IRQn, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">  HAL_NVIC_EnableIRQ(EXTI3_IRQn);</span><br><span class="line"></span><br><span class="line">  HAL_NVIC_SetPriority(EXTI4_IRQn, <span class="number">5</span>, <span class="number">0</span>);</span><br><span class="line">  HAL_NVIC_EnableIRQ(EXTI4_IRQn);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>stm32f1xx_hal_it.c(204)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EXTI3_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 0 */</span></span><br><span class="line">  HAL_GPIO_EXTI_IRQHandler(EXTI_Key1_Pin);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI3_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI3_IRQn 1 */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">EXTI4_IRQHandler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI4_IRQn 0 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI4_IRQn 0 */</span></span><br><span class="line">  HAL_GPIO_EXTI_IRQHandler(EXTI_Key2_Pin);</span><br><span class="line">  <span class="comment">/* USER CODE BEGIN EXTI4_IRQn 1 */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* USER CODE END EXTI4_IRQn 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改延时中断优先级</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HAL_Init();<span class="comment">//main.c(74)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HAL_StatusTypeDef HAL_Init(void)中的</span></span><br><span class="line">HAL_InitTick(TICK_INT_PRIORITY);<span class="comment">//stm32f1xx_hal.c(160)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//进入参数里修改</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  TICK_INT_PRIORITY            1U<span class="comment">//stm32f1xx_hal_conf.h(132)</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;&lt;center&gt;理论&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;NVIC：嵌套向量中断控制器（&lt;a href=&quot;https://blog.csdn.net/m0_7476</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>ST-LINK未能串口keil识别的一个可能解决方案（前提驱动安装无问题）</title>
    <link href="http://example.com/post/a3ad0b3a.html"/>
    <id>http://example.com/post/a3ad0b3a.html</id>
    <published>2024-08-03T08:56:06.000Z</published>
    <updated>2024-08-03T09:38:00.406Z</updated>
    
    <content type="html"><![CDATA[<p>打开这个软件，在点击清除之前，按住单片机复位按钮不放，点击清除按钮，等待3-5秒放开复位按钮，即可清除重置，若提示没识别到，多重复几次，即可重置，重置完成之后再回到烧写软件，即可烧写成功</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031657478.png" alt="软件图" style="zoom:50%;"><p>在烧写时提示烧写成功后会显示如图所示</p><p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031658168.png" alt="错误提示图"></p><p>解决方法：可能某个地方设置错误，我这里是这个没有设置成 Serial Wire，可以把全部设置重新检查一遍</p><p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031657360.png" alt="方法图"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;打开这个软件，在点击清除之前，按住单片机复位按钮不放，点击清除按钮，等待3-5秒放开复位按钮，即可清除重置，若提示没识别到，多重复几次，即可重置，重置完成之后再回到烧写软件，即可烧写成功&lt;/p&gt;
&lt;img src=&quot;https://cdn.d3iiz.top/gh/xinz</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="ST-LINK未能串口keil识别解决方案" scheme="http://example.com/tags/ST-LINK%E6%9C%AA%E8%83%BD%E4%B8%B2%E5%8F%A3keil%E8%AF%86%E5%88%AB%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
  </entry>
  
  <entry>
    <title>STM32CubeIDE代码字体大小</title>
    <link href="http://example.com/post/43a9b762.html"/>
    <id>http://example.com/post/43a9b762.html</id>
    <published>2024-08-03T08:52:40.000Z</published>
    <updated>2024-08-03T09:38:00.406Z</updated>
    
    <content type="html"><![CDATA[<p> 进入首选项设置</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031654048.png" alt="img" style="zoom:50%;"><p>搜索editor，按照图中标号，进行设置</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031654274.png" alt="img" style="zoom:50%;"><p>按图中标号进行设置，选择需要的字号</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031654824.png" alt="img" style="zoom:50%;"><p>到此设置完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 进入首选项设置&lt;/p&gt;
&lt;img src=&quot;https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031654048.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;搜索editor，按照图中标号</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="STM32CubeIDE代码字体大小" scheme="http://example.com/tags/STM32CubeIDE%E4%BB%A3%E7%A0%81%E5%AD%97%E4%BD%93%E5%A4%A7%E5%B0%8F/"/>
    
  </entry>
  
  <entry>
    <title>DHT11dht11.c(18) error C174 return-expression on void-function</title>
    <link href="http://example.com/post/c4236caa.html"/>
    <id>http://example.com/post/c4236caa.html</id>
    <published>2024-08-03T08:46:17.000Z</published>
    <updated>2024-08-03T09:38:00.406Z</updated>
    
    <content type="html"><![CDATA[<p>表示在函数dht11.c的第18行，有一个返回表达式出现在了一个返回类型为void的函数中。在C语言中，如果一个函数的声明或定义中指定了返回类型为void，那么这个函数不能有任何返回值。</p><p>​    要解决这个问题，你需要检查dht11.c文件中第18行的代码，确保没有返回值。如果该行代码确实需要返回一个值，那么你需要将该函数的返回类型修改为非void类型</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;表示在函数dht11.c的第18行，有一个返回表达式出现在了一个返回类型为void的函数中。在C语言中，如果一个函数的声明或定义中指定了返回类型为void，那么这个函数不能有任何返回值。&lt;/p&gt;
&lt;p&gt;​    要解决这个问题，你需要检查dht11.c文件中第18行的代码，</summary>
      
    
    
    
    <category term="错误记录" scheme="http://example.com/categories/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>STM32烧录的时候报错：Error :Flash Download failed -“Cortex-M3“</title>
    <link href="http://example.com/post/63d3dd68.html"/>
    <id>http://example.com/post/63d3dd68.html</id>
    <published>2024-08-03T08:46:17.000Z</published>
    <updated>2024-08-03T09:38:00.406Z</updated>
    
    <content type="html"><![CDATA[<p> 点击图中标号1，按顺序点击进入设置</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031700928.png" alt="img" style="zoom:50%;"><p>按图中标序，进入添加页面</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031700487.png" alt="img" style="zoom:50%;"><p>添加图中所选，然后一直确定退出即可，若没有图中所示选项，可能软件没下载对</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031700644.png" alt="img" style="zoom:50%;"><p>添加后，即可烧录成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt; 点击图中标号1，按顺序点击进入设置&lt;/p&gt;
&lt;img src=&quot;https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031700928.png&quot; alt=&quot;img&quot; style=&quot;zoom:50%;&quot;&gt;

&lt;p&gt;按图中标序</summary>
      
    
    
    
    <category term="错误记录" scheme="http://example.com/categories/%E9%94%99%E8%AF%AF%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>stm32cubeIDE与stm32cubeMX库文件安装路径自定义设置</title>
    <link href="http://example.com/post/32e9e993.html"/>
    <id>http://example.com/post/32e9e993.html</id>
    <published>2024-08-03T08:44:26.000Z</published>
    <updated>2024-08-03T09:38:00.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1、-stm32cubeMX库文件安装路径自定义设置"><a href="#1、-stm32cubeMX库文件安装路径自定义设置" class="headerlink" title="1、 stm32cubeMX库文件安装路径自定义设置"></a>1、 stm32cubeMX库文件安装路径自定义设置</h1><p>打开stm32cubeMX软件，依次点击标题栏【Help】→【Updater Settings】 </p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031651690.png" alt="img" style="zoom:33%;"><hr><p>点击图中的【Browser】，选择自己想要存放库文件的文件夹，选择完成后点击【OK】即可设置成功。 </p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031649589.png" alt="img" style="zoom:33%;"><p> PS：这里的路径建议选择软件的安装目录</p><h1 id="2、-stm32cubeIDE库安装路径自定义设置"><a href="#2、-stm32cubeIDE库安装路径自定义设置" class="headerlink" title="2、 stm32cubeIDE库安装路径自定义设置"></a>2、 stm32cubeIDE库安装路径自定义设置</h1><p>首先打开 stm32cubeIDE软件，然后依次点击【Window】→【Preference】</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031649667.png" alt="img" style="zoom: 50%;"><hr><p> 依次点击左侧【STM32Cube】→【Firmware Updater】，点击上图中的【Browser】，选择自己想要存放库文件的文件夹，选择完成后点击【Apply and Close】即可设置成功</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031650943.png" alt="img" style="zoom: 33%;"><p>PS：stm32cubeIDE与stm32cubeMX的库文件是通用的，也可以直接选择了stm32cubeMX的库文件路径，这样stm32cubeIDE就可以自动识别文件夹中已有的库文件，避免库文件重复下载，节省了内存。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1、-stm32cubeMX库文件安装路径自定义设置&quot;&gt;&lt;a href=&quot;#1、-stm32cubeMX库文件安装路径自定义设置&quot; class=&quot;headerlink&quot; title=&quot;1、 stm32cubeMX库文件安装路径自定义设置&quot;&gt;&lt;/a&gt;1、 stm32</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="IDE与MX库文件安装路径自定义设置" scheme="http://example.com/tags/IDE%E4%B8%8EMX%E5%BA%93%E6%96%87%E4%BB%B6%E5%AE%89%E8%A3%85%E8%B7%AF%E5%BE%84%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AE%BE%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>新电脑 个人博客迁移</title>
    <link href="http://example.com/post/362c3b0.html"/>
    <id>http://example.com/post/362c3b0.html</id>
    <published>2024-08-03T08:29:18.000Z</published>
    <updated>2024-08-03T09:38:00.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装和配置所需要的软件"><a href="#安装和配置所需要的软件" class="headerlink" title="安装和配置所需要的软件"></a><center>安装和配置所需要的软件</center></h1><p>安装Git 客户端，安装过程省略，一般默认下一步</p><p>​    下载地址：<a href="https://git-scm.com/downloads">Git客户端</a></p><p>​    这个无脑下一步即可无需配置</p><p>安装node JS，安装过程省略，一般默认下一步</p><p>​    下载地址：<a href="https://nodejs.cn/download/">node JS</a></p><p>​    配置看这位大佬教程：<a href="https://blog.csdn.net/qq_38514863/article/details/123145473">地址</a></p><p>拷贝个人博客文件夹中，部分文件，到新电脑，存放个人博客文件的文件夹中</p><blockquote><p>_config.yml</p><p>package.json</p><p>scaffolds&#x2F;</p><p>source&#x2F;</p><p>themes&#x2F;</p><p>.gitignore    这个图中没标，注意保留</p></blockquote><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031631634.png" alt="img" style="zoom:33%;"><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a><center>安装hexo</center></h1><p>在 cmd 下输入下面指令安装 hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031631749.png" alt="img" style="zoom:50%;"><h1 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a><center>配置博客</center></h1><p>进入 F:&#x2F;Blog 目录（你拷贝到新电脑的目录），右键git，输入下面指令安装相关模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// “ ”内换成自己对应的</span><br><span class="line">git config --global user.name &quot;HuGen&quot;</span><br><span class="line">git config --global user.email &quot;LoveHuGen@126q.com&quot;</span><br><span class="line">ssh-keygen -t rsa -C &quot;LoveHuGen@126q.com&quot;</span><br></pre></td></tr></table></figure><p>Github 添加 SSH Keys</p><p>1、在本地创建 <code>SSH Keys</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;wujiajiansh@163.com&quot;</span><br><span class="line">//一直回车，直到结束</span><br></pre></td></tr></table></figure><p>2、复制key</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031629005.png" alt="img" style="zoom:50%;"><p>进入登录GitHub，在设置中添加ssh key</p><img src="https://i-blog.csdnimg.cn/blog_migrate/3431a3fd067aaa03d8860c1652da41c9.png" alt="img" style="zoom: 33%;"><p>将上一步中的文件里面的内容全部复制进去 ，点击添加</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031629211.png" alt="img" style="zoom:33%;"><h1 id="部署博客"><a href="#部署博客" class="headerlink" title="部署博客"></a><center>部署博客</center></h1><p>打开电脑的：Windows PowerShell 进入博客目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save  // 文章部署到 git 的模块</span><br><span class="line">（下面为选择安装）</span><br><span class="line">npm install hexo-generator-feed --save  // 建立 RSS 订阅</span><br><span class="line">npm install hexo-generator-sitemap --save // 建立站点地图</span><br></pre></td></tr></table></figure><p>依次命令安装 </p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031629186.png" alt="img" style="zoom: 50%;"><p>全部安装完成之后，一键三连部署上传</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo cl &amp;&amp; hexo g  &amp;&amp; hexo d</span><br></pre></td></tr></table></figure><p>到此全部完成，感谢观看！！！ </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;安装和配置所需要的软件&quot;&gt;&lt;a href=&quot;#安装和配置所需要的软件&quot; class=&quot;headerlink&quot; title=&quot;安装和配置所需要的软件&quot;&gt;&lt;/a&gt;&lt;center&gt;安装和配置所需要的软件&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;安装Git 客户端，安装过程省略，</summary>
      
    
    
    
    <category term="技术积累记录" scheme="http://example.com/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="个人博客迁移" scheme="http://example.com/tags/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB/"/>
    
  </entry>
  
  <entry>
    <title>1.GPIO</title>
    <link href="http://example.com/post/adb202b7.html"/>
    <id>http://example.com/post/adb202b7.html</id>
    <published>2024-08-02T07:47:03.000Z</published>
    <updated>2024-08-05T02:24:54.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="理论说明"><a href="#理论说明" class="headerlink" title="理论说明"></a><center>理论说明</center></h1><h2 id="输入"><a href="#输入" class="headerlink" title="输入"></a><center>输入</center></h2><p>上拉输入：拉高电平</p><p>下拉输入：拉低电平</p><p>浮空输入：不拉高也不拉低电平</p><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a><center>输出</center></h2><p>开漏输出：不能输出高电平（P-MOS不可用，则只能低电平）</p><p>推挽输出：可输出高低电平</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022058509.png" alt="输入输出电路图" style="zoom:33%;"><p>输出速率</p><ul><li>Low：2MHz</li><li>Medium：10MHz</li><li>High：50MHz</li></ul><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>LED灯闪烁、按键PE3控制蜂鸣器(PB8)开关、按键PE4控制 LED2(PE5) 亮灭、光敏传感器(PB11)控制 LED1(PB5) 亮灭</p><h2 id="实验一：LED灯闪烁"><a href="#实验一：LED灯闪烁" class="headerlink" title="实验一：LED灯闪烁"></a><center>实验一：LED灯闪烁</center></h2><h3 id="LED灯配置"><a href="#LED灯配置" class="headerlink" title="LED灯配置"></a><center>LED灯配置</center></h3><p>配置引脚功能：</p><p>GPIO Pull-up&#x2F;Pull-down：因为LED灯初始化时就已经设置了高低电平，没有空闲状态，无论是上拉还是下拉都起不到作用</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022058550.png" alt="GPIO配置" style="zoom:33%;"><h3 id="Cube-IDE代码"><a href="#Cube-IDE代码" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>在main.c文件，大概94行开始，代码必须写在 <code>/* USER CODE BEGIN WHILE */ </code> 和 <code>/* USER CODE END WHILE */</code>里面，否则在图形初始化设置后重新生成会把代码清除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//参数1：GPIO口名字(PB)，参数2：GPIO数字(PB5中的5)，参数3：高低电平(0,1)</span></span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">0</span>);</span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);//电平反转,无需设置高低电平</span></span><br><span class="line">HAL_Delay(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* USER CODE END 3 */</span></span><br></pre></td></tr></table></figure><h2 id="实验二：按键控制蜂鸣器、LED灯"><a href="#实验二：按键控制蜂鸣器、LED灯" class="headerlink" title="实验二：按键控制蜂鸣器、LED灯"></a><center>实验二：按键控制蜂鸣器、LED灯</center></h2><p>按键PE3控制蜂鸣器(PB8)开关、按键PE4控制 LED2(PE5) 亮灭、光敏传感器(PB11)控制 LED1(PB5) 亮灭</p><h3 id="按键、蜂鸣器配置"><a href="#按键、蜂鸣器配置" class="headerlink" title="按键、蜂鸣器配置"></a><center>按键、蜂鸣器配置</center></h3><p>按键：设置成<code>上拉输入</code>，PE4则为高电平，当按键按下时，PE4为0(可用if判断是否按下)，则按键按下(其它按钮同理)</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022058792.png" alt="按键电路图" style="zoom:50%;"><p>LED灯、蜂鸣器(PB8)：输出高低电平，设置<code>推挽输出</code></p><p>光敏传感器(PB11)：高低电平由外界光照强度来决定，设置<code>浮空输入</code></p><p>按键配置：</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022102523.png" alt="按钮配置" style="zoom:33%;"><p>LED灯配置方面已经说明，直接配置</p><p>蜂鸣器配置(PB8)：</p><p>GPIO Pull-up&#x2F;Pull-down：因为蜂鸣器初始化时就已经设置了高低电平，没有空闲状态，无论是上拉还是下拉都起不到作用</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022102449.png" alt="蜂鸣器配置图" style="zoom: 33%;"><p>光敏传感器配置(PB11)：</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022102960.png" alt="光敏传感器配置图" style="zoom:33%;"><p>光敏传感器AO  DO有什么区别？</p><p>AO：输出模拟信号</p><p>DO：输出数字信号（高低电平）</p><h3 id="Cube-IDE代码-1"><a href="#Cube-IDE代码-1" class="headerlink" title="Cube IDE代码"></a><center>Cube IDE代码</center></h3><p>在main.c文件，大概94行开始</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN WHILE */</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(<span class="number">120</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);<span class="comment">//电平反转,无需设置高低电平</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin))<span class="comment">//检测读取按键输入高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(<span class="number">120</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);<span class="comment">//电平反转,无需设置高低电平</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(SUN_GPIO_Port, SUN_Pin))<span class="comment">//检测读取光敏传感器输入高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">/* USER CODE END WHILE */</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/* USER CODE BEGIN 3 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果展示：<br>[video(video-8ZdCXtcq-1722497936311)(type-csdn)(url-<a href="https://live.csdn.net/v/embed/414340)(image-https://img-blog.csdnimg.cn/img_convert/1ddf5e3e8fa7bae7111014a6e3b0bfed.jpeg)(title-)]">https://live.csdn.net/v/embed/414340)(image-https://img-blog.csdnimg.cn/img_convert/1ddf5e3e8fa7bae7111014a6e3b0bfed.jpeg)(title-)]</a></p><h3 id="代码过程"><a href="#代码过程" class="headerlink" title="代码过程"></a><center>代码过程</center></h3><p>初始化时钟</p><ol><li>初始化时钟</li></ol><p>APB2ENR：外设时钟使能寄存器</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022058546.png" alt="外设时钟使能寄存器图" style="zoom:50%;"><p>大概功能：将APB2ENR(外设时钟使能寄存器)初始化IO端口B时钟开启</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使能时钟初始化代码，在gpio.c中48行</span></span><br><span class="line">__HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line">__HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line"><span class="comment">//__HAL_RCC_GPIOB_CLK_ENABLE(); 如下过程</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_RCC_GPIOB_CLK_ENABLE()   do &#123; \</span></span><br><span class="line"><span class="meta"> __IO uint32_t tmpreg;  <span class="comment">/*定义一个变量*/</span>\</span></span><br><span class="line"><span class="meta">SET_BIT(RCC-&gt;APB2ENR, RCC_APB2ENR_IOPBEN);\</span></span><br><span class="line"><span class="meta"><span class="comment">/* Delay after an RCC peripheral clock enabling(下方两个延时作用) */</span>\</span></span><br><span class="line"><span class="meta">tmpreg = READ_BIT(RCC-&gt;APB2ENR, RCC_APB2ENR_IOPBEN);\</span></span><br><span class="line"><span class="meta">UNUSED(tmpreg); \</span></span><br><span class="line"><span class="meta">&#125; while(0U)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//SET_BIT(RCC-&gt;APB2ENR, RCC_APB2ENR_IOPBEN); 的解释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.RCC_APB2ENR_IOPBEN</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_APB2ENR_IOPBEN_Pos(3U)                              </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_APB2ENR_IOPBEN_Msk(0x1UL &lt;&lt; RCC_APB2ENR_IOPBEN_Pos)<span class="comment">/*RCC_APB2ENR_IOPBEN_Msk 等于0x1&lt;&lt; 3 结果：0x00000008 */</span></span></span><br><span class="line"><span class="comment">//0x1 = 0000 0001 &lt;&lt; 3 = 0000 1000(对应上图,位3为1) = 0x00000008 </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_APB2ENR_IOPBENRCC_APB2ENR_IOPBEN_Msk<span class="comment">/* RCC_APB2ENR_IOPBEN 等于0x00000008 */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.RCC寄存器，RCC_BASE强转成这个RCC_TypeDef类型的结构体</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC                 ((RCC_TypeDef *)RCC_BASE)</span></span><br><span class="line"><span class="comment">//RCC_BASE = 由总线矩阵偏移到AHB系统总线再偏移到复位和时钟控制(RCC)(可看参考手册的系统结构)(下面三行从下往上看)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_BASE              (AHBPERIPH_BASE + 0x00001000UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AHBPERIPH_BASE        (PERIPH_BASE + 0x00020000UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE           0x40000000UL</span></span><br><span class="line"><span class="comment">//RCC_TypeDef（结构体）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> CR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> CFGR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> CIR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> APB2RSTR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> APB1RSTR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> AHBENR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> APB1ENR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> BDCR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> CSR;</span><br><span class="line">&#125; RCC_TypeDef;</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.RCC-&gt;APB2ENR</span></span><br><span class="line">RCC指向APB2ENR，则就是结构体内的__IO <span class="type">uint32_t</span> APB2ENR;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将APB2ENR的位3置1</span></span><br></pre></td></tr></table></figure><ol start="2"><li>初始化引脚</li></ol><p>GPIOx_BSRR：端口位设置&#x2F;清除寄存器</p><p>低16位中若有某一位 置1，则这个引脚为1(高电平)，若都为0，则不影响</p><p>高16位中若有某一位 置1，则这个引脚位0(低电平)，若都为0，则不影响</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022101304.png" alt="端口位设置/清除寄存器图" style="zoom:50%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gpio.c中第53行</span></span><br><span class="line"><span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HAL_GPIO_WritePin</span><span class="params">(GPIO_TypeDef *GPIOx, <span class="type">uint16_t</span> GPIO_Pin, GPIO_PinState PinState)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">/* Check the parameters */</span></span><br><span class="line">  assert_param(IS_GPIO_PIN(GPIO_Pin));</span><br><span class="line">  assert_param(IS_GPIO_PIN_ACTION(PinState));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (PinState != GPIO_PIN_RESET)<span class="comment">//GPIO_PIN_RESET为0</span></span><br><span class="line">  &#123;</span><br><span class="line">    GPIOx-&gt;BSRR = GPIO_Pin;<span class="comment">//给BSRR寄存器 低16位赋值 置1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    GPIOx-&gt;BSRR = (<span class="type">uint32_t</span>)GPIO_Pin &lt;&lt; <span class="number">16u</span>;<span class="comment">//给BSRR寄存器 高16位赋值 置0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO_TypeDef *GPIOx 等于 LED2_GPIO_Port</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE((GPIO_TypeDef *)GPIOE_BASE)</span></span><br><span class="line"><span class="comment">//GPIO_TypeDef 强转</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  __IO <span class="type">uint32_t</span> CRL;</span><br><span class="line">  __IO <span class="type">uint32_t</span> CRH;</span><br><span class="line">  __IO <span class="type">uint32_t</span> IDR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> ODR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> BSRR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> BRR;</span><br><span class="line">  __IO <span class="type">uint32_t</span> LCKR;</span><br><span class="line">&#125; GPIO_TypeDef;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIOE_BASE            (APB2PERIPH_BASE + 0x00001800UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> APB2PERIPH_BASE       (PERIPH_BASE + 0x00010000UL)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PERIPH_BASE           0x40000000UL</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//GPIO_Pin 等于 LED2_Pin</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GPIO_PIN_5((uint16_t)0x0020)  <span class="comment">/* Pin 5 selected    */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>写实际需求（输入：read  判断，输出：write   0&#x2F;1）</li></ol><h2 id="Keil代码"><a href="#Keil代码" class="headerlink" title="Keil代码"></a><center>Keil代码</center></h2><p>代码必须写在 <code>/* USER CODE BEGIN WHILE */ </code> 和 <code>/* USER CODE END WHILE */</code>里面，否则在图形初始化设置后重新生成会把代码清除，若不打算使用图形初始化则可以随便写，修改的地方如下：</p><p>main.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//main函数中</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(<span class="number">120</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key1_GPIO_Port, Key1_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(BEEP_GPIO_Port, BEEP_Pin);<span class="comment">//电平反转,无需设置高低电平</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin))<span class="comment">//检测读取按键输入高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_Delay(<span class="number">120</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(Key2_GPIO_Port, Key2_Pin))<span class="comment">//检测读取按键高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);<span class="comment">//电平反转,无需设置高低电平</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="number">0</span> == HAL_GPIO_ReadPin(SUN_GPIO_Port, SUN_Pin))<span class="comment">//检测读取光敏传感器输入高低电平</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gpio.c</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MDK_GPIO_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStruct = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* GPIO Ports Clock Enable */</span></span><br><span class="line">  __HAL_RCC_GPIOE_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOB_CLK_ENABLE();</span><br><span class="line">  __HAL_RCC_GPIOA_CLK_ENABLE();</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin Output Level */</span></span><br><span class="line">  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pins : PEPin PEPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = Key1_Pin|Key2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  HAL_GPIO_Init(GPIOE, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = LED2_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(LED2_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = SUN_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  HAL_GPIO_Init(SUN_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = LED1_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_NOPULL;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(LED1_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*Configure GPIO pin : PtPin */</span></span><br><span class="line">  GPIO_InitStruct.Pin = BEEP_Pin;</span><br><span class="line">  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;</span><br><span class="line">  GPIO_InitStruct.Pull = GPIO_PULLUP;</span><br><span class="line">  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;</span><br><span class="line">  HAL_GPIO_Init(BEEP_GPIO_Port, &amp;GPIO_InitStruct);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//60行开始</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Key1_Pin GPIO_PIN_3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Key1_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Key2_Pin GPIO_PIN_4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Key2_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED2_GPIO_Port GPIOE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUN_Pin GPIO_PIN_11</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUN_GPIO_Port GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_Pin GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LED1_GPIO_Port GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_Pin GPIO_PIN_8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BEEP_GPIO_Port GPIOB</span></span><br></pre></td></tr></table></figure><p>若烧录完成后，需要按复位按键才可正常，可尝试以下设置</p><p>第一步：</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022101639.png" alt="设置1" style="zoom:50%;"><p>第二步：</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022101545.png" alt="设置2" style="zoom:50%;">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;理论说明&quot;&gt;&lt;a href=&quot;#理论说明&quot; class=&quot;headerlink&quot; title=&quot;理论说明&quot;&gt;&lt;/a&gt;&lt;center&gt;理论说明&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;输入&quot;&gt;&lt;a href=&quot;#输入&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>0.SMT32原理概述</title>
    <link href="http://example.com/post/99cd7d8.html"/>
    <id>http://example.com/post/99cd7d8.html</id>
    <published>2024-08-02T07:41:35.000Z</published>
    <updated>2024-08-03T08:01:22.525Z</updated>
    
    <content type="html"><![CDATA[<h1 id="51和32区别"><a href="#51和32区别" class="headerlink" title="51和32区别"></a><center>51和32区别</center></h1><p>位数：</p><p>&ensp;&ensp;&ensp;&ensp;51：8位（STC89C52）</p><p>&ensp;&ensp;&ensp;&ensp;32：32位（STM32F103ZET6）</p><p>时钟：</p><ul><li>51：11.0592Mhz晶振</li><li>32<ul><li>F103：8Mhz晶振(×9)，主频：72Mhz</li><li>F103：12Mhz晶振(×6)，主频：72Mhz</li><li>F407：168Mhz主频</li></ul></li></ul><h1 id="时钟"><a href="#时钟" class="headerlink" title="时钟"></a><center>时钟</center></h1><p>E：外部，I：内部</p><p>高速外部晶振：HSE</p><p>低速外部晶振：LSE</p><p>高速内部晶振：HSI</p><p>低速内部晶振：LSI</p><p>锁相环：让8MHz晶振变成72MHz主频</p><p>每个外设初始化的大致流程</p><ol><li>把图形化界面配置的参数赋值给对应的结构体的成员变量</li><li>把结构体地址当做参数传给初始化函数</li><li>初始化函数根据每个结构体成员变量操作对应的寄存器</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//时钟初始化</span></span><br><span class="line">SystemClock_Config();</span><br><span class="line"></span><br><span class="line">RCC_OscInitTypeDef RCC_OscInitStruct = &#123;<span class="number">0</span>&#125;;<span class="comment">//结构体类型变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在void SystemClock_Config(void)中(main.c第133)</span></span><br><span class="line">RCC_OscInitStruct.HSEState = RCC_HSE_ON;<span class="comment">//(144行)</span></span><br><span class="line"></span><br><span class="line">HAL_RCC_OscConfig(&amp;RCC_OscInitStruct);<span class="comment">//(main.c第148)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)中</span></span><br><span class="line">__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct-&gt;HSEState);<span class="comment">//377行</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __HAL_RCC_HSE_CONFIG(__STATE__)<span class="comment">//__STATE__ = RCC_OscInitStruct-&gt;HSEState(RCC_HSE_ON)           </span></span></span><br><span class="line">   <span class="keyword">do</span>&#123;                                                     </span><br><span class="line">     <span class="keyword">if</span> ((__STATE__) == RCC_HSE_ON)                        </span><br><span class="line">     &#123;                                                     </span><br><span class="line">       SET_BIT(RCC-&gt;CR, RCC_CR_HSEON);<span class="comment">//RCC-&gt;CR = 时钟控制寄存器(RCC_CR)</span></span><br><span class="line">     &#125; </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_CR_HSEON_Pos           (16U)</span></span><br><span class="line"><span class="comment">//0x1左移16位（注意是二进制左移）               </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_CR_HSEON_Msk           (0x1UL &lt;&lt; RCC_CR_HSEON_Pos)   <span class="comment">/*!&lt; 0x00010000 */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RCC_CR_HSEON               RCC_CR_HSEON_Msk</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第17个数为1，则是第十六位，第16位：0：HSE振荡器关闭，1：HSE振荡器开启。</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET_BIT(REG, BIT)     ((REG) |= (BIT))<span class="comment">//BIT = RCC_CR_HSEON(0x00010000)</span></span></span><br></pre></td></tr></table></figure><h1 id="STM32芯片参数"><a href="#STM32芯片参数" class="headerlink" title="STM32芯片参数"></a><center>STM32芯片参数</center></h1><p>Core: ARM 32-bit Cortex™-M3 CPU：ARM架构，32位单片机，内核型号</p><p>72 MHz maximum frequency：72MHz主频</p><p>芯片型号含义：</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046308.png" alt="芯片型号含义" style="zoom:50%;"><p> Flash：磁盘，RAM：运行内存</p><p>一般软件、代码等运行在RAM，但32单片机代码运行在Flash</p><p>3 × 12-bit, 1 µs A&#x2F;D converters</p><ul><li>A&#x2F;D converter &#x3D; ADC：A：模拟信号，D：数字信号，模拟信号转数字信号</li><li>3：3路ADC</li><li>Conversion range: 0 to 3.6 V：采样值 0-3.6V</li><li>12bit：$2^{12} &#x3D; 4096$，将采样范围分成4096份，即为采样精度，这个越高精度越高</li><li>2 × 12-bit D&#x2F;A converters &#x3D; DAC：数字信号转模拟信号</li><li>Serial wire debug (SWD) ：STL烧写</li><li>Up to 112 fast I&#x2F;O ports：112个IO口功能引脚</li><li>Up to 11 timers：11个定时器</li></ul><h1 id="软件安装与使用"><a href="#软件安装与使用" class="headerlink" title="软件安装与使用"></a><center>软件安装与使用</center></h1><p>注意：<code>所有路径不能有中文</code>(包含用户名)</p><p>安装：keil、STM32CubeMX、STM32CubeIDE（需要的留言）</p><p><a href="https://blog.csdn.net/qq_65047384/article/details/140686974">STM32CubeIDE与STM32CubeMX库文件安装路径自定义设置</a></p><p>搜索自己芯片型号（我的型号：<code>STM32F103ZET6</code>）</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046767.png" alt="便捷技巧" style="zoom:33%;"><h2 id="新建工程必须设置"><a href="#新建工程必须设置" class="headerlink" title="新建工程必须设置"></a><center>新建工程必须设置</center></h2><h3 id="STM32CubeMX"><a href="#STM32CubeMX" class="headerlink" title="STM32CubeMX"></a>STM32CubeMX</h3><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022057113.png" alt="设置1" style="zoom:33%;"><hr><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022057228.png" alt="设置2" style="zoom:33%;"><hr><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046933.png" alt="时钟配置" style="zoom:33%;"><hr><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046781.png" alt="工程" style="zoom:33%;"><hr><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046602.png" alt="工程1" style="zoom:33%;"><hr><p>完成，建工程</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022054262.png" alt="完成" style="zoom: 33%;"><h3 id="STM32CubeIDE"><a href="#STM32CubeIDE" class="headerlink" title="STM32CubeIDE"></a>STM32CubeIDE</h3><p>新建工程</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046269.png" alt="新建工程" style="zoom: 50%;"><hr><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046143.png" alt="选型号" style="zoom:33%;"><hr><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022054341.png" alt="工程名" style="zoom:33%;"><hr><p>版本号这里：1.8.5</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046327.png" alt="完成" style="zoom:33%;"><p>若别人工程为别的版本，需下载别的版本</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022054735.png" alt="下载1" style="zoom:50%;"><p>下载工程对应版本即可</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046183.png" alt="下载对应版本" style="zoom:33%;"><hr><p>这里与STM32CubeMX相同，参考上面配置，最后：<code>ctrl + s</code> 保存</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046464.png" alt="在这里插入图片描述" style="zoom: 33%;"><p>Keil+CubeMX &#x3D; CubeIDE</p><h1 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a><center>烧录</center></h1><p>代码烧录方式</p><h2 id="ST-Link"><a href="#ST-Link" class="headerlink" title="ST-Link"></a><center>ST-Link</center></h2><p>将ST-Link烧写器与单片机连接</p><p><strong>CubeMX keil软件烧录</strong></p><p>编译无错误后，点击图中框选按钮烧录</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046458.png" alt="烧录按钮" style="zoom:50%;"><p>若烧录不成功，可看是否是这个错误：<a href="https://blog.csdn.net/qq_65047384/article/details/140702048?spm=1001.2014.3001.5501">链接</a></p><p><strong>CubeIDE软件烧录</strong></p><p>编译无错误后，点击图中框选按钮烧录</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046795.png" alt="烧录介绍" style="zoom:50%;"><h2 id="STM32-ST-LINK-Utility"><a href="#STM32-ST-LINK-Utility" class="headerlink" title="STM32 ST-LINK Utility"></a><center>STM32 ST-LINK Utility</center></h2><p>其实是一个烧写软件，看图可知，对应功能</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046292.png" alt="介绍" style="zoom:50%;"><p>选择好对应hex文件，直接烧写即可</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022055078.png" alt="烧写界面" style="zoom:50%;"><h2 id="串口烧录"><a href="#串口烧录" class="headerlink" title="串口烧录"></a><center>串口烧录</center></h2><p>步骤：</p><ol><li><p>数据线连接电脑和单片机串口1</p></li><li><p>手动将板子的BOOT0置1，BOOT1置0，使用Bootloader方式</p></li><li><p>断电 重启</p></li><li><p>打开FlyMCU软件烧写（若没有反应可按复位按钮尝试）</p> <img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202408022046523.png" alt="界面介绍" style="zoom: 50%;"></li><li><p>手动将板子的BOOT0置0，BOOT1置0</p></li><li><p>板子重新上电</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;51和32区别&quot;&gt;&lt;a href=&quot;#51和32区别&quot; class=&quot;headerlink&quot; title=&quot;51和32区别&quot;&gt;&lt;/a&gt;&lt;center&gt;51和32区别&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;位数：&lt;/p&gt;
&lt;p&gt;&amp;ensp;&amp;ensp;&amp;ensp;&amp;ens</summary>
      
    
    
    
    <category term="32单片机" scheme="http://example.com/categories/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="32单片机" scheme="http://example.com/tags/32%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>电机控制</title>
    <link href="http://example.com/post/93c966f3.html"/>
    <id>http://example.com/post/93c966f3.html</id>
    <published>2024-08-02T03:01:57.000Z</published>
    <updated>2024-08-08T09:22:30.997Z</updated>
    
    <content type="html"><![CDATA[<h1 id="直流电机"><a href="#直流电机" class="headerlink" title="直流电机"></a><center>直流电机</center></h1><p>原理：<a href="https://www.bilibili.com/video/BV1PM4y1w79m/?t=3.337014&spm_id_from=333.1350.jump_directly&vd_source=1c838941386ee32c4501615c317f75e0">链接</a></p><p>转速：脉冲宽度调制（Pulse width modulation，PWM）</p><p>周期（频率）、占空比</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031246045.png" alt="电机变速解析图" style="zoom:50%;"><h2 id="电机驱动电路"><a href="#电机驱动电路" class="headerlink" title="电机驱动电路"></a><center>电机驱动电路</center></h2><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031249504.png" alt="驱动实物图" style="zoom:50%;"><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h2><p>按键控制直流电机速度</p><h3 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> count = <span class="number">0</span>,level = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">TR0 = <span class="number">1</span>;</span><br><span class="line">TH0 = <span class="number">0xDC</span>;</span><br><span class="line">TL0 = <span class="number">0x00</span>;</span><br><span class="line">TMOD = <span class="number">0x01</span>;</span><br><span class="line">ET0 = <span class="number">1</span>;</span><br><span class="line">EA =<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(KEY1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay120ms();</span><br><span class="line"><span class="keyword">if</span>(KEY1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level++;</span><br><span class="line">level = level % <span class="number">10</span>;<span class="comment">//到10才清理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="mian-h"><a href="#mian-h" class="headerlink" title="mian.h"></a>mian.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MAIN_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="comment">//定义LED、按键</span></span><br><span class="line">sbit LED1 = P1^<span class="number">0</span>;</span><br><span class="line">sbit KEY1 = P3^<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> count,level;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="time-c"><a href="#time-c" class="headerlink" title="time.c"></a>time.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="comment">//定时中断</span></span><br><span class="line">Timer0_Routine(<span class="type">void</span>) interrupt <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">TH0 = <span class="number">0xDC</span>;</span><br><span class="line">TL0 = <span class="number">0x00</span>;</span><br><span class="line">count++;<span class="comment">//每次定时中断加1</span></span><br><span class="line"><span class="keyword">if</span>(count &gt; level)<span class="comment">//level越大，占空比越小速度越慢</span></span><br><span class="line">LED1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">LED1 = <span class="number">0</span>;</span><br><span class="line">count = count % <span class="number">10</span>;<span class="comment">//到10清零</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delay-c"><a href="#delay-c" class="headerlink" title="delay.c"></a>delay.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="comment">//延时函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay120ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data i, j;</span><br><span class="line"></span><br><span class="line">i = <span class="number">216</span>;</span><br><span class="line">j = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delay-h"><a href="#delay-h" class="headerlink" title="delay.h"></a>delay.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay120ms</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>练习：直流电机与iic通信连接oled屏，显示电机转速等级数字</p><h1 id="进步电机"><a href="#进步电机" class="headerlink" title="进步电机"></a><center>进步电机</center></h1><p>原理：<a href="https://www.bilibili.com/video/BV1nA4m1A7Ke/?t=93.445511&spm_id_from=333.1350.jump_directly&vd_source=1c838941386ee32c4501615c317f75e0">链接</a></p><h2 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a><center>代码编写</center></h2><h3 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="type">int</span> x,y;</span><br><span class="line">uchar phasecw[<span class="number">4</span>] =&#123;<span class="number">0x08</span>,<span class="number">0x04</span>,<span class="number">0x02</span>,<span class="number">0x01</span>&#125;;<span class="comment">//正向，四相电机对应四相通电</span></span><br><span class="line">uchar phaseccw[<span class="number">4</span>]=&#123;<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x08</span>&#125;;<span class="comment">//方向</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>;x &lt; <span class="number">100</span>;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(y = <span class="number">0</span>;y &lt; <span class="number">4</span>;y++)<span class="comment">//四相通电转的角度</span></span><br><span class="line">&#123;</span><br><span class="line">P2 = phasecw[y];<span class="comment">//电机连接P2口(低四位)</span></span><br><span class="line">Delay5ms();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-h"><a href="#main-h" class="headerlink" title="main.h"></a>main.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MAIN_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> uchar;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="delay-c-1"><a href="#delay-c-1" class="headerlink" title="delay.c"></a>delay.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data i, j;</span><br><span class="line"></span><br><span class="line">i = <span class="number">9</span>;</span><br><span class="line">j = <span class="number">244</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delay-h-1"><a href="#delay-h-1" class="headerlink" title="delay.h"></a>delay.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5ms</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>练习：OLED屏显示步进电机前进还是后退(前进1，后退0)，按键控制步进电机前进还是后退</p><h1 id="舵机控制"><a href="#舵机控制" class="headerlink" title="舵机控制"></a><center>舵机控制</center></h1><p>角度：180&#x2F;360度（这里舵机180度）</p><p>模型图：</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031246245.png" alt="展示接线图" style="zoom:50%;"><p>信号说明：</p><p>舵机脉冲周期：20ms</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031246721.png" alt="信号使用说明" style="zoom:33%;"><h2 id="代码编写-2"><a href="#代码编写-2" class="headerlink" title="代码编写"></a><center>代码编写</center></h2><p>舵机180度控制旋转</p><h3 id="main-c-2"><a href="#main-c-2" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> level = <span class="number">0</span>,count = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">TR0 = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//定时器时间：0.5ms</span></span><br><span class="line">TMOD |= <span class="number">0x01</span>;</span><br><span class="line">TL0 = <span class="number">0x33</span>;</span><br><span class="line">TH0 = <span class="number">0xFE</span>;</span><br><span class="line">ET0 = <span class="number">1</span>;</span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(KEY1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay120ms();</span><br><span class="line"><span class="keyword">if</span>(KEY1 == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">level++;</span><br><span class="line">level = level % <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Timer0_Routine(<span class="type">void</span>) interrupt <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">TL0 = <span class="number">0x33</span>;</span><br><span class="line">TH0 = <span class="number">0xFE</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">level为1时，脉冲为1，持续时间0.5ms，转动角度为0，但按键延迟120ms，早过一个周期，</span></span><br><span class="line"><span class="comment">则下次按键时count为0，则持续时间为1ms，转动角度为45，以此类推，下次转动90，</span></span><br><span class="line"><span class="comment">但上一次已经转了45，所以实际再转45就到90度，当到达180度时，level为1时，转动0度，</span></span><br><span class="line"><span class="comment">相当于回到原点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">if</span>(count &lt; level)</span><br><span class="line">SG90_PWM = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">SG90_PWM = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">count++;</span><br><span class="line"><span class="comment">//周期20ms，0.5ms一次定时中断触发，40次则20ms</span></span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">40</span>)</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="main-h-1"><a href="#main-h-1" class="headerlink" title="main.h"></a>main.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MAIN_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">sbit SG90_PWM = P2^<span class="number">0</span>;</span><br><span class="line">sbit KEY1 = P3^<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="delay-c-2"><a href="#delay-c-2" class="headerlink" title="delay.c"></a>delay.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay120ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data i, j;</span><br><span class="line"></span><br><span class="line">i = <span class="number">216</span>;</span><br><span class="line">j = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delay-h-2"><a href="#delay-h-2" class="headerlink" title="delay.h"></a>delay.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay120ms</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>练习：OLED屏显示数字代表舵机旋转角度，按键控制舵机角度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;直流电机&quot;&gt;&lt;a href=&quot;#直流电机&quot; class=&quot;headerlink&quot; title=&quot;直流电机&quot;&gt;&lt;/a&gt;&lt;center&gt;直流电机&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;原理：&lt;a href=&quot;https://www.bilibili.com/video/BV</summary>
      
    
    
    
    <category term="51单片机" scheme="http://example.com/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="51单片机" scheme="http://example.com/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>单总线通信</title>
    <link href="http://example.com/post/8212ff63.html"/>
    <id>http://example.com/post/8212ff63.html</id>
    <published>2024-07-14T07:49:18.000Z</published>
    <updated>2024-08-03T08:01:03.377Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DHT11介绍分析"><a href="#DHT11介绍分析" class="headerlink" title="DHT11介绍分析"></a><center>DHT11介绍分析</center></h1><p>HT11数字温湿度传感器</p><p>数据格式(在HDT11没有小数)：</p><p>&ensp;&ensp;&ensp;&ensp;8bit湿度整数数据 + 8bit湿度小数数据 + 8bit温度整数数据 + 8bit温度小数数据 + 8bit校验和</p><p>校验方式将温湿度4个字节数据加起来 &#x3D; 校验和，传送完成后重新加起来与校验和数据比较是否相同</p><h2 id="开始信号时序"><a href="#开始信号时序" class="headerlink" title="开始信号时序"></a><center>开始信号时序</center></h2><p>线空闲状态为高电平，单片机把总线拉低必须<code>大于18毫秒</code>，保证DHT11能检测到起始信号，单片机发送<code>开始信号</code>结束后，延时等待20-40us，DHT11接收到单片机开始信号后，等待单片机开始信号结束，然后发送80us低电平<code>响应信号</code></p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031243618.png" alt="开始信号时序" style="zoom:50%;"><p>HT11发送响应信号后,再把总线拉高80us，准备发送数据</p><h2 id="MCU接收数据时序"><a href="#MCU接收数据时序" class="headerlink" title="MCU接收数据时序"></a><center>MCU接收数据时序</center></h2><p>每一bit数据都以50us低电平时隙开始，<code>高电平长短</code>决定数据位是 0 还是 1</p><p><strong>数字0信号时序</strong></p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031244272.png" alt="数字0信号时序图" style="zoom:50%;"><p><strong>数字1信号时序</strong></p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031243625.png" alt="数字1信号时序图" style="zoom: 50%;"><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>利用上一个IIC协议和OLED模块，使用单总线通信和温湿度模块，在OLED屏上显示温湿度</p><h2 id="dht11-c"><a href="#dht11-c" class="headerlink" title="dht11.c"></a>dht11.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dht11.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="type">char</span> <span class="title function_">DHT11_Start</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">uchar delay_count = <span class="number">0</span>;<span class="comment">//用于计数</span></span><br><span class="line">DHT11_IO = <span class="number">1</span>;<span class="comment">//一开始单片机时序高电平</span></span><br><span class="line">Delay30us();</span><br><span class="line">DHT11_IO = <span class="number">0</span>;<span class="comment">//拉低电平至少18us</span></span><br><span class="line">Delay25ms();</span><br><span class="line">DHT11_IO = <span class="number">1</span>;<span class="comment">//再拉高20-40us</span></span><br><span class="line">Delay30us();</span><br><span class="line"><span class="comment">//当DHT11响应信号开始时为低电平(80us)，等到结束时高电平，取反结束或大于80us时结束</span></span><br><span class="line"><span class="keyword">while</span>(!DHT11_IO &amp;&amp; delay_count &lt; <span class="number">80</span>)</span><br><span class="line">&#123;</span><br><span class="line">delay_count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(delay_count &gt;= <span class="number">80</span>)<span class="comment">//大于80us结束</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">delay_count = <span class="number">0</span>;<span class="comment">//重置计数值</span></span><br><span class="line"><span class="comment">//响应信号结束拉高80us后拉低，代表数据开始传输，等拉低电平时或大于80us结束</span></span><br><span class="line"><span class="keyword">while</span>(DHT11_IO &amp;&amp; delay_count &lt; <span class="number">80</span>)</span><br><span class="line">&#123;</span><br><span class="line">delay_count++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(delay_count &gt;= <span class="number">80</span>)<span class="comment">//大于80us结束</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">DHT11_Write</span><span class="params">(<span class="type">int</span> *humi,<span class="type">int</span> *temp)</span></span><br><span class="line">&#123;</span><br><span class="line">uchar delay_count = <span class="number">0</span>,data_byte,tmp,x,y;</span><br><span class="line">uchar DHT11_Data[<span class="number">5</span>];<span class="comment">//定义数组保存数据</span></span><br><span class="line">DHT11_Start();<span class="comment">//调用开始函数</span></span><br><span class="line"><span class="comment">//发送40bit数据</span></span><br><span class="line"><span class="keyword">for</span>(x = <span class="number">0</span>;x &lt; <span class="number">5</span>;x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(y = <span class="number">0</span>;y &lt; <span class="number">8</span>;y++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//数据发送前低电平，判断为高电平时则开始若有问题跳出(&gt;50)</span></span><br><span class="line"><span class="keyword">while</span>(!DHT11_IO &amp;&amp; delay_count &lt; <span class="number">50</span>)</span><br><span class="line">delay_count++;</span><br><span class="line"><span class="keyword">if</span>(delay_count &gt;= <span class="number">50</span>)<span class="comment">//大于80us结束</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">delay_count = <span class="number">0</span>;</span><br><span class="line">tmp = <span class="number">0</span>;</span><br><span class="line">Delay30us();</span><br><span class="line"><span class="keyword">if</span>(DHT11_IO == <span class="number">1</span>)<span class="comment">//若条件不成立发送数据0</span></span><br><span class="line">&#123;</span><br><span class="line">tmp = <span class="number">1</span>;<span class="comment">//发送数据1</span></span><br><span class="line"><span class="keyword">while</span>(DHT11_IO &amp;&amp; delay_count &lt; <span class="number">50</span>)</span><br><span class="line">delay_count++;</span><br><span class="line"><span class="keyword">if</span>(delay_count &gt;= <span class="number">50</span>)<span class="comment">//大于80us结束</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">delay_count = <span class="number">0</span>;</span><br><span class="line">data_byte &lt;&lt;= <span class="number">1</span>;<span class="comment">//左移一位</span></span><br><span class="line">data_byte |= tmp;<span class="comment">//将每一位数据传给data_byte</span></span><br><span class="line">&#125;</span><br><span class="line">DHT11_Data[x]=data_byte;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//若前四个数值加起来不等于校验位的数，则全部清零</span></span><br><span class="line"><span class="keyword">if</span>(DHT11_Data[<span class="number">0</span>]+DHT11_Data[<span class="number">1</span>]+DHT11_Data[<span class="number">2</span>]+DHT11_Data[<span class="number">3</span>] != DHT11_Data[<span class="number">4</span>])</span><br><span class="line">&#123;</span><br><span class="line">DHT11_Data[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">DHT11_Data[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">DHT11_Data[<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">DHT11_Data[<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//因为DHT11只有整数，所以是0，2</span></span><br><span class="line">*humi = (<span class="type">int</span>)DHT11_Data[<span class="number">0</span>];<span class="comment">//相同地址，值改变则另一个相同地址的变量也改变</span></span><br><span class="line">*temp = (<span class="type">int</span>)DHT11_Data[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dat11-h"><a href="#dat11-h" class="headerlink" title="dat11.h"></a>dat11.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DHT11_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DHT11_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">sbit DHT11_IO = P1^<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">DHT11_Start</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">char</span> <span class="title function_">DHT11_Write</span><span class="params">(<span class="type">int</span> *humi,<span class="type">int</span> *temp)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iic.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;bmp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;dht11.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> H,T;</span><br><span class="line"><span class="type">char</span> DHT11_Buf[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_Init();<span class="comment">//初始化OLED</span></span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_ShowCHinese(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//星（x坐标,y坐标,字模第几个）</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">18</span>,<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//仔</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">36</span>,<span class="number">0</span>,<span class="number">2</span>);<span class="comment">//爱</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">54</span>,<span class="number">0</span>,<span class="number">3</span>);<span class="comment">//分</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">72</span>,<span class="number">0</span>,<span class="number">4</span>);<span class="comment">//享</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">90</span>,<span class="number">0</span>,<span class="number">5</span>);<span class="comment">//抖</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">108</span>,<span class="number">0</span>,<span class="number">6</span>);<span class="comment">//音</span></span><br><span class="line">OLED_ShowCHinese(<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>);<span class="comment">//抖</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_ShowString(<span class="number">6</span>,<span class="number">3</span>,<span class="string">&quot;0.96&#x27; OLED TEST&quot;</span>,<span class="number">16</span>);<span class="comment">//显示字符串（x,y,字符串,字号）</span></span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_ShowNum(<span class="number">103</span>,<span class="number">6</span>,<span class="number">224</span>,<span class="number">3</span>,<span class="number">16</span>);<span class="comment">//显示数字（x,y,数字,数字个数,字号）</span></span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_DrawBMP(<span class="number">0</span>,<span class="number">0</span>,<span class="number">128</span>,<span class="number">8</span>,BMP1);<span class="comment">//（1,2：左上角坐标，3,4：右下角坐标，图片字模）</span></span><br><span class="line">OLED_Clear();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">DHT11_Write(&amp;H, &amp;T);</span><br><span class="line"><span class="built_in">sprintf</span>(DHT11_Buf,<span class="string">&quot;H2:%d T2:%d&quot;</span>,H,T);<span class="comment">//将形式字符赋值给DHT11_Buf</span></span><br><span class="line">OLED_ShowString(<span class="number">0</span>,<span class="number">4</span>,DHT11_Buf,<span class="number">16</span>);<span class="comment">//发送字符串</span></span><br><span class="line">Delay1000ms();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="main-h"><a href="#main-h" class="headerlink" title="main.h"></a>main.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MAIN_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> uchar;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="iic-c"><a href="#iic-c" class="headerlink" title="iic.c"></a>iic.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iic.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line">uchar i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//开始标志时序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一开始SCL和SDA都为高电平</span></span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">Delay5us();<span class="comment">//10us一个周期</span></span><br><span class="line">IIC_SDA = <span class="number">0</span>;<span class="comment">//大概一半周期SDA变低电平</span></span><br><span class="line">Delay5us();<span class="comment">//再过半个周期</span></span><br><span class="line">IIC_SCL = <span class="number">0</span>;<span class="comment">//SCL变低电平</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结束标志时序</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一开始SCL、SDA都为低电平</span></span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;<span class="comment">//过半个周期SCL变高电平</span></span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SDA = <span class="number">1</span>;<span class="comment">//过半个周期SDA变高电平</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_write</span><span class="params">(uchar a1)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">a1 &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">IIC_SDA = CY;<span class="comment">//进位标志位，左移溢出的保存在CY里</span></span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//应答</span></span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="iic-h"><a href="#iic-h" class="headerlink" title="iic.h"></a>iic.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __IIC_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __IIC_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_start</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_stop</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_write</span><span class="params">(uchar a1)</span>;</span><br><span class="line"><span class="comment">//定义时间线和数据线</span></span><br><span class="line">sbit IIC_SCL = P1^<span class="number">5</span>;</span><br><span class="line">sbit IIC_SDA = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="oled-c"><a href="#oled-c" class="headerlink" title="oled.c"></a>oled.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oledfont.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iic.h&quot;</span></span></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Command</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Command</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Command)</span></span><br><span class="line">&#123;</span><br><span class="line">   IIC_start();</span><br><span class="line">   IIC_write(<span class="number">0x78</span>);            <span class="comment">//Slave address,SA0=0</span></span><br><span class="line">   IIC_write(<span class="number">0x00</span>);<span class="comment">//write command</span></span><br><span class="line">   IIC_write(IIC_Command); </span><br><span class="line">   IIC_stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Data</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Data)</span></span><br><span class="line">&#123;</span><br><span class="line">   IIC_start();</span><br><span class="line">   IIC_write(<span class="number">0x78</span>);<span class="comment">//D/C#=0; R/W#=0</span></span><br><span class="line">   IIC_write(<span class="number">0x40</span>);<span class="comment">//write data</span></span><br><span class="line">   IIC_write(IIC_Data);</span><br><span class="line">   IIC_stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_WR_Byte</span><span class="params">(<span class="type">unsigned</span> dat,<span class="type">unsigned</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cmd)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">   Write_IIC_Data(dat);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">   Write_IIC_Command(dat);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">// fill_Picture</span></span><br><span class="line"><span class="comment">********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fill_picture</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> fill_Data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> m,n;</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">8</span>;m++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0xb0</span>+m,<span class="number">0</span>);<span class="comment">//page0-page1</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,<span class="number">0</span>);<span class="comment">//low column start address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x10</span>,<span class="number">0</span>);<span class="comment">//high column start address</span></span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(fill_Data,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************Delay****************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_50ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> Del_50ms)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> m;</span><br><span class="line"><span class="keyword">for</span>(;Del_50ms&gt;<span class="number">0</span>;Del_50ms--)</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">6245</span>;m&gt;<span class="number">0</span>;m--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_1ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> Del_1ms)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> j;</span><br><span class="line"><span class="keyword">while</span>(Del_1ms--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">123</span>;j++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//坐标设置</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Set_Pos</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x, <span class="type">unsigned</span> <span class="type">char</span> y)</span> </span><br><span class="line">&#123; OLED_WR_Byte(<span class="number">0xb0</span>+y,OLED_CMD);</span><br><span class="line">OLED_WR_Byte(((x&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>)|<span class="number">0x10</span>,OLED_CMD);</span><br><span class="line">OLED_WR_Byte((x&amp;<span class="number">0x0f</span>),OLED_CMD); </span><br><span class="line">&#125;     </span><br><span class="line"><span class="comment">//开启OLED显示    </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Display_On</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X14</span>,OLED_CMD);  <span class="comment">//DCDC ON</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0XAF</span>,OLED_CMD);  <span class="comment">//DISPLAY ON</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭OLED显示     </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Display_Off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X10</span>,OLED_CMD);  <span class="comment">//DCDC OFF</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0XAE</span>,OLED_CMD);  <span class="comment">//DISPLAY OFF</span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Clear</span><span class="params">(<span class="type">void</span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">u8 i,n;    </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">&#123;  </span><br><span class="line">OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(<span class="number">0</span>,OLED_DATA); </span><br><span class="line">&#125; <span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_On</span><span class="params">(<span class="type">void</span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">u8 i,n;    </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">&#123;  </span><br><span class="line">OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(<span class="number">1</span>,OLED_DATA); </span><br><span class="line">&#125; <span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//mode:0,反白显示;1,正常显示 </span></span><br><span class="line"><span class="comment">//size:选择字体 16/12 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr,u8 Char_Size)</span></span><br><span class="line">&#123;      </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">c=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值</span></span><br><span class="line"><span class="keyword">if</span>(x&gt;Max_Column<span class="number">-1</span>)&#123;x=<span class="number">0</span>;y=y+<span class="number">2</span>;&#125;</span><br><span class="line"><span class="keyword">if</span>(Char_Size ==<span class="number">16</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_Set_Pos(x,y);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i],OLED_DATA);</span><br><span class="line">OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i+<span class="number">8</span>],OLED_DATA);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">OLED_Set_Pos(x,y);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">OLED_WR_Byte(F6x8[c][i],OLED_DATA);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line">u32 <span class="title function_">oled_pow</span><span class="params">(u8 m,u8 n)</span></span><br><span class="line">&#123;</span><br><span class="line">u32 result=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span>(n--)result*=m;    </span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//显示2个数字</span></span><br><span class="line"><span class="comment">//x,y :起点坐标 </span></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//size:字体大小</span></span><br><span class="line"><span class="comment">//mode:模式0,填充模式;1,叠加模式</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);   </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size2)</span></span><br><span class="line">&#123;         </span><br><span class="line">u8 t,temp;</span><br><span class="line">u8 enshow=<span class="number">0</span>;   </span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">temp=(num/oled_pow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(x+(size2/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>,size2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"> OLED_ShowChar(x+(size2/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>,size2); </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//显示一个字符号串</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowString</span><span class="params">(u8 x,u8 y,u8 *chr,u8 Char_Size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (chr[j]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;OLED_ShowChar(x,y,chr[j],Char_Size);</span><br><span class="line">x+=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">120</span>)&#123;x=<span class="number">0</span>;y+=<span class="number">2</span>;&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示汉字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowCHinese</span><span class="params">(u8 x,u8 y,u8 no)</span></span><br><span class="line">&#123;          </span><br><span class="line">u8 t,adder=<span class="number">0</span>;</span><br><span class="line">OLED_Set_Pos(x,y);</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(Hzk[<span class="number">2</span>*no][t],OLED_DATA);</span><br><span class="line">adder+=<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(Hzk[<span class="number">2</span>*no+<span class="number">1</span>][t],OLED_DATA);</span><br><span class="line">adder+=<span class="number">1</span>;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7*****************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_DrawBMP</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x0, <span class="type">unsigned</span> <span class="type">char</span> y0,<span class="type">unsigned</span> <span class="type">char</span> x1, <span class="type">unsigned</span> <span class="type">char</span> y1,<span class="type">unsigned</span> <span class="type">char</span> BMP[])</span></span><br><span class="line">&#123; </span><br><span class="line"> <span class="type">unsigned</span> <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line"> <span class="type">unsigned</span> <span class="type">char</span> x,y;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(y1%<span class="number">8</span>==<span class="number">0</span>) y=y1/<span class="number">8</span>;      </span><br><span class="line">  <span class="keyword">else</span> y=y1/<span class="number">8</span>+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(y=y0;y&lt;y1;y++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_Set_Pos(x0,y);</span><br><span class="line">    <span class="keyword">for</span>(x=x0;x&lt;x1;x++)</span><br><span class="line">    &#123;      </span><br><span class="line">    OLED_WR_Byte(BMP[j++],OLED_DATA);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化SSD1306    </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123; </span><br><span class="line"> </span><br><span class="line">OLED_WR_Byte(<span class="number">0xAE</span>,OLED_CMD);<span class="comment">//--display off</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//---set low column address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x10</span>,OLED_CMD);<span class="comment">//---set high column address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//--set start line address  </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xB0</span>,OLED_CMD);<span class="comment">//--set page address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x81</span>,OLED_CMD); <span class="comment">// contract control</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xFF</span>,OLED_CMD);<span class="comment">//--128   </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD);<span class="comment">//set segment remap </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">//--normal / reverse</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA8</span>,OLED_CMD);<span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x3F</span>,OLED_CMD);<span class="comment">//--1/32 duty</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xC8</span>,OLED_CMD);<span class="comment">//Com scan direction</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD3</span>,OLED_CMD);<span class="comment">//-set display offset</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD5</span>,OLED_CMD);<span class="comment">//set osc division</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x80</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD8</span>,OLED_CMD);<span class="comment">//set area color mode off</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x05</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD9</span>,OLED_CMD);<span class="comment">//Set Pre-Charge Period</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xF1</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xDA</span>,OLED_CMD);<span class="comment">//set com pin configuartion</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x12</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xDB</span>,OLED_CMD);<span class="comment">//set Vcomh</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x30</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD);<span class="comment">//set charge pump enable</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD);<span class="comment">//--turn on oled panel</span></span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="oled-h"><a href="#oled-h" class="headerlink" title="oled.h"></a>oled.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __OLED_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __OLED_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  u8 unsigned char </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  u32 unsigned int </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_CMD  0<span class="comment">//写命令</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_DATA 1<span class="comment">//写数据</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_MODE 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//OLED模式设置</span></span><br><span class="line"><span class="comment">//0:4线串行模式</span></span><br><span class="line"><span class="comment">//1:并行8080模式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XLevelL0x02</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XLevelH0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max_Column128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max_Row64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>Brightness0xFF </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X_WIDTH 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Y_WIDTH 64      </span></span><br><span class="line"><span class="comment">//-----------------OLED端口定义----------------     </span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> ms)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//OLED控制用函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_WR_Byte</span><span class="params">(<span class="type">unsigned</span> dat,<span class="type">unsigned</span> cmd)</span>;  </span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Display_On</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Display_Off</span><span class="params">(<span class="type">void</span>)</span>;          </span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Clear</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_DrawPoint</span><span class="params">(u8 x,u8 y,u8 t)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Fill</span><span class="params">(u8 x1,u8 y1,u8 x2,u8 y2,u8 dot)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr,u8 Char_Size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowString</span><span class="params">(u8 x,u8 y, u8 *p,u8 Char_Size)</span>; </span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Set_Pos</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x, <span class="type">unsigned</span> <span class="type">char</span> y)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowCHinese</span><span class="params">(u8 x,u8 y,u8 no)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_DrawBMP</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x0, <span class="type">unsigned</span> <span class="type">char</span> y0,<span class="type">unsigned</span> <span class="type">char</span> x1, <span class="type">unsigned</span> <span class="type">char</span> y1,<span class="type">unsigned</span> <span class="type">char</span> BMP[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_50ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> Del_50ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_1ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> Del_1ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fill_picture</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> fill_Data)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Picture</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Command</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Command)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="delay-c"><a href="#delay-c" class="headerlink" title="delay.c"></a>delay.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5us</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30us</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data i;</span><br><span class="line"></span><br><span class="line">i = <span class="number">11</span>;</span><br><span class="line"><span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay25ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> data i, j;</span><br><span class="line"></span><br><span class="line">i = <span class="number">45</span>;</span><br><span class="line">j = <span class="number">208</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span>    <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> data i, j, k;</span><br><span class="line">  _nop_();</span><br><span class="line">  i = <span class="number">8</span>;</span><br><span class="line">  j = <span class="number">1</span>;</span><br><span class="line">  k = <span class="number">243</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">while</span> (--k);</span><br><span class="line">     &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">  &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="delay-h"><a href="#delay-h" class="headerlink" title="delay.h"></a>delay.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5us</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay30us</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay25ms</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DHT11介绍分析&quot;&gt;&lt;a href=&quot;#DHT11介绍分析&quot; class=&quot;headerlink&quot; title=&quot;DHT11介绍分析&quot;&gt;&lt;/a&gt;&lt;center&gt;DHT11介绍分析&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;HT11数字温湿度传感器&lt;/p&gt;
&lt;p&gt;数据格式(</summary>
      
    
    
    
    <category term="51单片机" scheme="http://example.com/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="51单片机" scheme="http://example.com/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>6.IIC通信</title>
    <link href="http://example.com/post/f5fba2c3.html"/>
    <id>http://example.com/post/f5fba2c3.html</id>
    <published>2024-06-19T08:41:34.000Z</published>
    <updated>2024-08-03T08:00:57.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="IIC理论"><a href="#IIC理论" class="headerlink" title="IIC理论"></a><center>IIC理论</center></h1><h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a><center>实现方式</center></h2><p>软件IIC：流程清楚、占用时间、速度慢</p><p>硬件IIC ：用法复杂、速度快、可以用DMA</p><h2 id="电路"><a href="#电路" class="headerlink" title="电路"></a><center>电路</center></h2><p>SCL：时钟线，SDA：数据线</p><p>上拉电阻：4.7k-10k</p><h2 id="速率"><a href="#速率" class="headerlink" title="速率"></a><center>速率</center></h2><p>标准模式：100Kb&#x2F;s、快速模式：400Kb&#x2F;s、高速模式：3.4Mb&#x2F;s</p><p>100kbit&#x2F;s 是指1秒钟传输100kbit。1个时钟脉冲只能传输1bit数据。1秒中内要传输100kbit数据，则需要100k个时钟脉冲。每个时钟脉冲的周期 T&#x3D;1&#x2F;100 000 &#x3D; 10us</p><p>HZ和bit&#x2F;s是一个相同的概念。时钟周期为1HZ，则传输数据的速率为1bit&#x2F;s；时钟周期为100KHZ，则传输数据的速率为100kbit&#x2F;s</p><h2 id="时序"><a href="#时序" class="headerlink" title="时序"></a><center>时序</center></h2><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202407091551334.png" alt="时钟信号图" style="zoom:50%;"><h3 id="空闲状态"><a href="#空闲状态" class="headerlink" title="空闲状态"></a>空闲状态</h3><p>SDA和SCL全为高电平</p><h3 id="开始信号"><a href="#开始信号" class="headerlink" title="开始信号"></a>开始信号</h3><p>当SCL为高电平时，SDA<code>由高到低</code>的跳变：表示数据传输的开始</p><h3 id="停止信号"><a href="#停止信号" class="headerlink" title="停止信号"></a>停止信号</h3><p>当SCL为高电平时，SDA<code>由低到高</code>的跳变：表示数据的结束</p><h3 id="读写操作"><a href="#读写操作" class="headerlink" title="读写操作"></a>读写操作</h3><ul><li>发送从机地址<ul><li>每个 I2C 器件都有一个设备地址<ul><li>先发送设备地址来决定访问哪个 I2C 器件</li></ul></li><li>发送8位数据<ul><li>高 7 位是设备地址,后 1 位是读写位<ul><li>1 表示读操作</li><li>0表示写操作</li></ul></li></ul></li><li>应答信号  <ul><li>发端在SDA上每发送一个字节的数据，在SCL第9个时钟期间释放该数据线SDA</li><li>接收端反馈一个应答信号<ul><li>应答信号为低电平时：规定为有效应答（ACK），表示已地接收了</li><li>该字节应答信号为高电平时，规定为非应答（NACK），表示没有成功接收该字节</li><li>有时候简单的软件IIC不校验ACK</li></ul></li></ul></li><li>读写数据<ul><li>根据前一个字节的读写位，确定读写</li></ul></li></ul></li></ul><h2 id="总线设备相关"><a href="#总线设备相关" class="headerlink" title="总线设备相关"></a><center>总线设备相关</center></h2><p>总线最多挂载2^7-1&#x3D;127个设备（0地址不算）</p><p>设备枚举（for）</p><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>OLED屏的使用</p><h2 id="iic-c（主要）"><a href="#iic-c（主要）" class="headerlink" title="iic.c（主要）"></a>iic.c（主要）</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iic.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="comment">//参考上面时序图理解（按时间先为主判断）</span></span><br><span class="line"><span class="comment">//开始</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结束</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">IIC_SDA = <span class="number">0</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SDA = <span class="number">1</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发送数据</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Write_Byte</span><span class="params">(uchar wbyte)</span></span><br><span class="line">&#123;</span><br><span class="line">uchar i;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">8</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">wbyte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">IIC_SDA = CY;<span class="comment">//进位标志位，左移溢出的保存在CY里</span></span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">&#125;</span><br><span class="line">IIC_SCL = <span class="number">1</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">IIC_SCL = <span class="number">0</span>;</span><br><span class="line">Delay5us();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="iic-h"><a href="#iic-h" class="headerlink" title="iic.h"></a>iic.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __IIC_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __IIC_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;main.h&gt;</span></span></span><br><span class="line"><span class="comment">//声明三个函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Start</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Stop</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">IIC_Write_Byte</span><span class="params">(uchar wbyte)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;iic.h&quot;</span><br><span class="line">#include &quot;oled.h&quot;</span><br><span class="line">#include &quot;bmp.h&quot;</span><br><span class="line">#include &quot;main.h&quot;</span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">u8 t;</span><br><span class="line">OLED_Init();//初始化OLED</span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_ShowCHinese(0,0,0);//星</span><br><span class="line">OLED_ShowCHinese(18,0,1);//仔</span><br><span class="line">OLED_ShowCHinese(36,0,2);//爱</span><br><span class="line">OLED_ShowCHinese(54,0,3);//分</span><br><span class="line">OLED_ShowCHinese(72,0,4);//享</span><br><span class="line">OLED_ShowCHinese(90,0,5);//抖</span><br><span class="line">OLED_ShowCHinese(108,0,6);//音</span><br><span class="line">OLED_ShowCHinese(0,2,6);//音</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_ShowString(6,3,&quot;0.96&#x27; OLED TEST&quot;,16);//显示字符串（x,y,字符串,字号）</span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_ShowNum(103,6,224,3,16);//显示数字（x,y,数字,数字个数,字号）</span><br><span class="line">OLED_Clear();</span><br><span class="line">OLED_DrawBMP(0,0,128,8,BMP1);//（1,2：左上角坐标，3,4：右下角坐标，图片字模）</span><br><span class="line">while(1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-h"><a href="#main-h" class="headerlink" title="main.h"></a>main.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> uchar;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义时间线和数据线</span></span><br><span class="line">sbit IIC_SCL = P1^<span class="number">5</span>;</span><br><span class="line">sbit IIC_SDA = P1^<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="oled-c"><a href="#oled-c" class="headerlink" title="oled.c"></a>oled.c</h2><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic1/img/202408031302009.png" alt="代码解析1" style="zoom:50%;"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oled.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;oledfont.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;iic.h&quot;</span></span></span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Command(命令)</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Command</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Command)</span></span><br><span class="line">&#123;</span><br><span class="line">   IIC_Start();</span><br><span class="line">   IIC_Write_Byte(<span class="number">0x78</span>);<span class="comment">//从机地址,SA0=0</span></span><br><span class="line">   IIC_Write_Byte(<span class="number">0x00</span>);<span class="comment">//write command</span></span><br><span class="line">   IIC_Write_Byte(IIC_Command); </span><br><span class="line">   IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**********************************************</span></span><br><span class="line"><span class="comment">// IIC Write Data(数据)</span></span><br><span class="line"><span class="comment">**********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Data)</span></span><br><span class="line">&#123;</span><br><span class="line">   IIC_Start();</span><br><span class="line">   IIC_Write_Byte(<span class="number">0x78</span>);<span class="comment">//D/C#=0; R/W#=0</span></span><br><span class="line">   IIC_Write_Byte(<span class="number">0x40</span>);<span class="comment">//write data</span></span><br><span class="line">   IIC_Write_Byte(IIC_Data);</span><br><span class="line">   IIC_Stop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_WR_Byte</span><span class="params">(<span class="type">unsigned</span> dat,<span class="type">unsigned</span> cmd)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cmd)</span><br><span class="line">&#123;</span><br><span class="line">        Write_IIC_Data(dat);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        Write_IIC_Command(dat);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/********************************************</span></span><br><span class="line"><span class="comment">// fill_Picture</span></span><br><span class="line"><span class="comment">********************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">fill_picture</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> fill_Data)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> m,n;</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">0</span>;m&lt;<span class="number">8</span>;m++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0xb0</span>+m,<span class="number">0</span>);<span class="comment">//page0-page1</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,<span class="number">0</span>);<span class="comment">//low column start address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x10</span>,<span class="number">0</span>);<span class="comment">//high column start address</span></span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)</span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(fill_Data,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***********************Delay****************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_50ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> Del_50ms)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> m;</span><br><span class="line"><span class="keyword">for</span>(;Del_50ms&gt;<span class="number">0</span>;Del_50ms--)</span><br><span class="line"><span class="keyword">for</span>(m=<span class="number">6245</span>;m&gt;<span class="number">0</span>;m--);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_1ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> Del_1ms)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> j;</span><br><span class="line"><span class="keyword">while</span>(Del_1ms--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;<span class="number">123</span>;j++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//坐标设置</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Set_Pos</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x, <span class="type">unsigned</span> <span class="type">char</span> y)</span> </span><br><span class="line">&#123;</span><br><span class="line">    OLED_WR_Byte(<span class="number">0xb0</span>+y,OLED_CMD);</span><br><span class="line">OLED_WR_Byte(((x&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span>)|<span class="number">0x10</span>,OLED_CMD);</span><br><span class="line">OLED_WR_Byte((x&amp;<span class="number">0x0f</span>),OLED_CMD); </span><br><span class="line">&#125;     </span><br><span class="line"><span class="comment">//开启OLED显示    </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Display_On</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X14</span>,OLED_CMD);  <span class="comment">//DCDC ON</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0XAF</span>,OLED_CMD);  <span class="comment">//DISPLAY ON</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭OLED显示     </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Display_Off</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">OLED_WR_Byte(<span class="number">0X8D</span>,OLED_CMD);  <span class="comment">//SET DCDC命令</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0X10</span>,OLED_CMD);  <span class="comment">//DCDC OFF</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0XAE</span>,OLED_CMD);  <span class="comment">//DISPLAY OFF</span></span><br><span class="line">&#125;    </span><br><span class="line"><span class="comment">//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!  </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Clear</span><span class="params">(<span class="type">void</span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">u8 i,n;    </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">&#123;  </span><br><span class="line">OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);    <span class="comment">//设置页地址（0~7）</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);      <span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);      <span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(<span class="number">0</span>,OLED_DATA); </span><br><span class="line">&#125; <span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_On</span><span class="params">(<span class="type">void</span>)</span>  </span><br><span class="line">&#123;  </span><br><span class="line">u8 i,n;    </span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)  </span><br><span class="line">&#123;  </span><br><span class="line">OLED_WR_Byte (<span class="number">0xb0</span>+i,OLED_CMD);<span class="comment">//设置页地址（0~7）</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x00</span>,OLED_CMD);<span class="comment">//设置显示位置—列低地址</span></span><br><span class="line">OLED_WR_Byte (<span class="number">0x10</span>,OLED_CMD);<span class="comment">//设置显示位置—列高地址   </span></span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">0</span>;n&lt;<span class="number">128</span>;n++)OLED_WR_Byte(<span class="number">1</span>,OLED_DATA); </span><br><span class="line">&#125; <span class="comment">//更新显示</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在指定位置显示一个字符,包括部分字符</span></span><br><span class="line"><span class="comment">//x:0~127</span></span><br><span class="line"><span class="comment">//y:0~63</span></span><br><span class="line"><span class="comment">//mode:0,反白显示;1,正常显示 </span></span><br><span class="line"><span class="comment">//size:选择字体 16/12 </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr,u8 Char_Size)</span></span><br><span class="line">&#123;      </span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> c=<span class="number">0</span>,i=<span class="number">0</span>;</span><br><span class="line">    c=chr-<span class="string">&#x27; &#x27;</span>;<span class="comment">//得到偏移后的值</span></span><br><span class="line">    <span class="keyword">if</span>(x&gt;Max_Column<span class="number">-1</span>)&#123;x=<span class="number">0</span>;y=y+<span class="number">2</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(Char_Size ==<span class="number">16</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        OLED_Set_Pos(x,y);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">        OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i],OLED_DATA);</span><br><span class="line">        OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">        OLED_WR_Byte(F8X16[c*<span class="number">16</span>+i+<span class="number">8</span>],OLED_DATA);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">    &#123;</span><br><span class="line">        OLED_Set_Pos(x,y);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)</span><br><span class="line">        OLED_WR_Byte(F6x8[c][i],OLED_DATA);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//m^n函数</span></span><br><span class="line">u32 <span class="title function_">oled_pow</span><span class="params">(u8 m,u8 n)</span></span><br><span class="line">&#123;</span><br><span class="line">u32 result=<span class="number">1</span>; </span><br><span class="line"><span class="keyword">while</span>(n--)result*=m;    </span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//显示2个数字</span></span><br><span class="line"><span class="comment">//x,y :起点坐标 </span></span><br><span class="line"><span class="comment">//len :数字的位数</span></span><br><span class="line"><span class="comment">//size:字体大小</span></span><br><span class="line"><span class="comment">//mode:模式0,填充模式;1,叠加模式</span></span><br><span class="line"><span class="comment">//num:数值(0~4294967295);   </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size2)</span></span><br><span class="line">&#123;         </span><br><span class="line">u8 t,temp;</span><br><span class="line">u8 enshow=<span class="number">0</span>;   </span><br><span class="line"><span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;len;t++)</span><br><span class="line">&#123;</span><br><span class="line">temp=(num/oled_pow(<span class="number">10</span>,len-t<span class="number">-1</span>))%<span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span>(enshow==<span class="number">0</span>&amp;&amp;t&lt;(len<span class="number">-1</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(temp==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">OLED_ShowChar(x+(size2/<span class="number">2</span>)*t,y,<span class="string">&#x27; &#x27;</span>,size2);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> enshow=<span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line"> OLED_ShowChar(x+(size2/<span class="number">2</span>)*t,y,temp+<span class="string">&#x27;0&#x27;</span>,size2); </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//显示一个字符号串</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowString</span><span class="params">(u8 x,u8 y,u8 *chr,u8 Char_Size)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> j=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (chr[j]!=<span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">        OLED_ShowChar(x,y,chr[j],Char_Size);</span><br><span class="line">x+=<span class="number">8</span>;</span><br><span class="line"><span class="keyword">if</span>(x&gt;<span class="number">120</span>)&#123;x=<span class="number">0</span>;y+=<span class="number">2</span>;&#125;</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示汉字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowCHinese</span><span class="params">(u8 x,u8 y,u8 no)</span></span><br><span class="line">&#123;          </span><br><span class="line">u8 t,adder=<span class="number">0</span>;</span><br><span class="line">OLED_Set_Pos(x,y);</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">        OLED_WR_Byte(Hzk[<span class="number">2</span>*no][t],OLED_DATA);</span><br><span class="line">adder+=<span class="number">1</span>;</span><br><span class="line">     &#125;</span><br><span class="line">OLED_Set_Pos(x,y+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(t=<span class="number">0</span>;t&lt;<span class="number">16</span>;t++)</span><br><span class="line">&#123;</span><br><span class="line">        OLED_WR_Byte(Hzk[<span class="number">2</span>*no+<span class="number">1</span>][t],OLED_DATA);</span><br><span class="line">        adder += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/***********功能描述：显示显示BMP图片128×64起始点坐标(x,y),x的范围0～127，y为页的范围0～7*****************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_DrawBMP</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x0, <span class="type">unsigned</span> <span class="type">char</span> y0,<span class="type">unsigned</span> <span class="type">char</span> x1, <span class="type">unsigned</span> <span class="type">char</span> y1,<span class="type">unsigned</span> <span class="type">char</span> BMP[])</span></span><br><span class="line">&#123; </span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> j=<span class="number">0</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> x,y;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(y1%<span class="number">8</span>==<span class="number">0</span>) y=y1/<span class="number">8</span>;      </span><br><span class="line">    <span class="keyword">else</span> y=y1/<span class="number">8</span>+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(y=y0;y&lt;y1;y++)</span><br><span class="line">    &#123;</span><br><span class="line">        OLED_Set_Pos(x0,y);</span><br><span class="line">    <span class="keyword">for</span>(x=x0;x&lt;x1;x++)</span><br><span class="line">        &#123;      </span><br><span class="line">            OLED_WR_Byte(BMP[j++],OLED_DATA);    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化SSD1306    </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123; </span><br><span class="line"> </span><br><span class="line">OLED_WR_Byte(<span class="number">0xAE</span>,OLED_CMD);<span class="comment">//--display off</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//---set low column address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x10</span>,OLED_CMD);<span class="comment">//---set high column address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x40</span>,OLED_CMD);<span class="comment">//--set start line address  </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xB0</span>,OLED_CMD);<span class="comment">//--set page address</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x81</span>,OLED_CMD); <span class="comment">// contract control</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xFF</span>,OLED_CMD);<span class="comment">//--128   </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA1</span>,OLED_CMD);<span class="comment">//set segment remap </span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA6</span>,OLED_CMD);<span class="comment">//--normal / reverse</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xA8</span>,OLED_CMD);<span class="comment">//--set multiplex ratio(1 to 64)</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x3F</span>,OLED_CMD);<span class="comment">//--1/32 duty</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xC8</span>,OLED_CMD);<span class="comment">//Com scan direction</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD3</span>,OLED_CMD);<span class="comment">//-set display offset</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x00</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD5</span>,OLED_CMD);<span class="comment">//set osc division</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x80</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD8</span>,OLED_CMD);<span class="comment">//set area color mode off</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x05</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xD9</span>,OLED_CMD);<span class="comment">//Set Pre-Charge Period</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0xF1</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xDA</span>,OLED_CMD);<span class="comment">//set com pin configuartion</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x12</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xDB</span>,OLED_CMD);<span class="comment">//set Vcomh</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x30</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0x8D</span>,OLED_CMD);<span class="comment">//set charge pump enable</span></span><br><span class="line">OLED_WR_Byte(<span class="number">0x14</span>,OLED_CMD);<span class="comment">//</span></span><br><span class="line"></span><br><span class="line">OLED_WR_Byte(<span class="number">0xAF</span>,OLED_CMD);<span class="comment">//--turn on oled panel</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="oled-h"><a href="#oled-h" class="headerlink" title="oled.h"></a>oled.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __OLED_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __OLED_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  u8 unsigned char </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>  u32 unsigned int </span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_CMD  0<span class="comment">//写命令</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_DATA 1<span class="comment">//写数据</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_MODE 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//OLED模式设置</span></span><br><span class="line"><span class="comment">//0:4线串行模式</span></span><br><span class="line"><span class="comment">//1:并行8080模式</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIZE 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XLevelL0x02</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XLevelH0x10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max_Column128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Max_Row64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>Brightness0xFF </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> X_WIDTH 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Y_WIDTH 64      </span></span><br><span class="line"><span class="comment">//-----------------OLED端口定义----------------     </span></span><br><span class="line"><span class="type">void</span> <span class="title function_">delay_ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> ms)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//OLED控制用函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_WR_Byte</span><span class="params">(<span class="type">unsigned</span> dat,<span class="type">unsigned</span> cmd)</span>;  </span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Display_On</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Display_Off</span><span class="params">(<span class="type">void</span>)</span>;          </span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Clear</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_DrawPoint</span><span class="params">(u8 x,u8 y,u8 t)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Fill</span><span class="params">(u8 x1,u8 y1,u8 x2,u8 y2,u8 dot)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowChar</span><span class="params">(u8 x,u8 y,u8 chr,u8 Char_Size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowNum</span><span class="params">(u8 x,u8 y,u32 num,u8 len,u8 size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowString</span><span class="params">(u8 x,u8 y, u8 *p,u8 Char_Size)</span>; </span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_Set_Pos</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x, <span class="type">unsigned</span> <span class="type">char</span> y)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_ShowCHinese</span><span class="params">(u8 x,u8 y,u8 no)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_DrawBMP</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> x0, <span class="type">unsigned</span> <span class="type">char</span> y0,<span class="type">unsigned</span> <span class="type">char</span> x1, <span class="type">unsigned</span> <span class="type">char</span> y1,<span class="type">unsigned</span> <span class="type">char</span> BMP[])</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_50ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> Del_50ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay_1ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> Del_1ms)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fill_picture</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> fill_Data)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Picture</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Command</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Command)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Write_IIC_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> IIC_Data)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>oledfont.h、bmp.h为字符字模、图片字模</p><h2 id="delay-c"><a href="#delay-c" class="headerlink" title="delay.c"></a>delay.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5us</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="delay-h"><a href="#delay-h" class="headerlink" title="delay.h"></a>delay.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay5us</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;IIC理论&quot;&gt;&lt;a href=&quot;#IIC理论&quot; class=&quot;headerlink&quot; title=&quot;IIC理论&quot;&gt;&lt;/a&gt;&lt;center&gt;IIC理论&lt;/center&gt;&lt;/h1&gt;&lt;h2 id=&quot;实现方式&quot;&gt;&lt;a href=&quot;#实现方式&quot; class=&quot;headerl</summary>
      
    
    
    
    <category term="51单片机" scheme="http://example.com/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="51单片机" scheme="http://example.com/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>串口</title>
    <link href="http://example.com/post/f736596e.html"/>
    <id>http://example.com/post/f736596e.html</id>
    <published>2024-04-12T02:13:58.000Z</published>
    <updated>2024-08-05T02:09:29.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="串口的介绍"><a href="#串口的介绍" class="headerlink" title="串口的介绍"></a><center>串口的介绍</center></h1><p>UART（通用异步收发器）是一种双向、串行、异步的通信总线，仅用一根数据接收线（RX）和一根数据发送线（TX）就能实现全双工通信</p><p>USART：通用同步&#x2F;异步串行接收&#x2F;发送器</p><p>R：Receiver(接收)，T：Transmit(发送)</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406111508432.png" alt="数据组成" style="zoom: 33%;"><p>UART 在发送或接收过程中的一帧数据由4部分组成，起始位、数据位、奇偶校验位和停止位</p><p>如图所示。其中，起始位标志着一帧数据的开始，停止位标志着一帧数据的结束，数据位是一帧数据中的有效数据，校验位分为奇校验和偶校验，用于检验数据在传输过程中是否出错。（奇校验时，发送方应使数据位中1的个数与校验位中1的个数之和为奇数；接收方在接收数据时， 对1的个数进行检查，若不为奇数，则说明数据在传输过程中出了差错。同样，偶校验则检查1的个数是否为偶数）</p><p> UART通信过程中的数据格式及传输速率是可设置的，为了正确的通信，收发双方应约定并遵循同样的设置。数据位可选择为5、6、7、8位，其中8位数据位是最常用的，在实际应用中一般都选择8位数据位；校验位可选择奇校验、偶校验或者无校验位；停止位可选择1位（默认）， 1.5或2位</p><p>串口通信的速率用波特率表示，它表示每秒传输二进制数据的位数，单位是bps（位 &#x2F;秒），常用的波特率有9600、19200、38400、57600以及115200等</p><p>如波特率9600则代表每秒传输9600bit数据，以串口发送1个字节10bit算（起始位1bit+数据8bit+停止位1bit+NO校验位），则传输1个字节需要的时间是1*10&#x2F;9600秒</p><h2 id="串口相关的硬件信号"><a href="#串口相关的硬件信号" class="headerlink" title="串口相关的硬件信号"></a><center>串口相关的硬件信号</center></h2><p>可参考：<a href="https://blog.csdn.net/CSDN_PBB/article/details/131012186?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172059516616800227423682%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172059516616800227423682&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-131012186-null-null.142%5Ev100%5Epc_search_result_base3&utm_term=ttl%20232%20485&spm=1018.2226.3001.4187">链接</a></p><h3 id="TTL"><a href="#TTL" class="headerlink" title="TTL"></a><center>TTL</center></h3><p>一般单片机产生的都是<code>TTL电平</code>。无论是51、32、还是各种跑Linux的ARM芯片，TTL满足绝大多数调试需求</p><p>TTL串口采用的是单一的信号线 (TX线和RX线) 进行数据传输，其中TX线用于单片机发送数据，RX线用于单片机接收数据。数据传输速率通常可以达到几-kbps至上百kbps的速率，<font color="red">传输距离较短，一般不超过数十米</font></p><p>TTL转USB(<a href="https://baike.baidu.com/item/%E5%B7%AE%E5%88%86%E4%BF%A1%E5%8F%B7/8536623?fr=ge_ala">差分信号</a>)</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406111546131.png" alt="例图" style="zoom:50%;"><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406111545487.png" alt="传输方向" style="zoom:50%;"><p>TTL的逻辑电平通常是0V和5V，其中0V表示逻辑“0”，5V表示逻辑“1”</p><h3 id="RS-232"><a href="#RS-232" class="headerlink" title="RS-232"></a><center>RS-232</center></h3><p>RS-232转USB</p><p>规定逻辑“1”的电平为-5V~-15 V，逻辑“0”的电平为+5 V～+15 V</p><p>由于RS -232采用串行传送方式，并且将TTL电平(某芯片)转换为RS-232C电平，其传送距离一般可达30 m。若采用光电隔离20 mA的电流环进行传送，其传送距离可以达到1000 m</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406111708423.png" alt="公母头接法" style="zoom: 67%;"><h3 id="RS-485"><a href="#RS-485" class="headerlink" title="RS-485"></a><center>RS-485</center></h3><p>传输速度可以达到10Mb&#x2F;s以上，传输距离可以达到3000米左右</p><p>传输方式为：<code>差分方式</code></p><h1 id="分类方式"><a href="#分类方式" class="headerlink" title="分类方式"></a><center>分类方式</center></h1><h2 id="串口并口"><a href="#串口并口" class="headerlink" title="串口并口"></a><center>串口并口</center></h2><p>详细教程：<a href="https://blog.csdn.net/Gao068465/article/details/124242629?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522172059483916800188555556%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=172059483916800188555556&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-124242629-null-null.142%5Ev100%5Epc_search_result_base3&utm_term=%E4%B8%B2%E8%A1%8C%E5%92%8C%E5%B9%B6%E8%A1%8C%E7%9A%84%E5%8C%BA%E5%88%AB&spm=1018.2226.3001.4187">地址</a></p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406111729362.png" alt="图解" style="zoom:33%;"><h2 id="同步异步"><a href="#同步异步" class="headerlink" title="同步异步"></a><center>同步异步</center></h2><p>异步：通信双方各自约定通信速率</p><p>UART：TX、RX（波特率9600,115200）</p><p>同步：通信双方靠一根时钟线来约定通信速率</p><p>&ensp;&ensp;&ensp;&ensp;IIC：SDA、SCL</p><p>&ensp;&ensp;&ensp;&ensp;SPI：MOSI、MISO、SCK、CS</p><h2 id="方向与时间"><a href="#方向与时间" class="headerlink" title="方向与时间"></a><center>方向与时间</center></h2><p>单工：指消息只能单方向传输的工作方式</p><p>半双工(IIC)：指信息即可从A到B，也可以从B到A，任一时刻只能有一个方向上的传输存在</p><p>全双工(UART、SPI)：指在任意时刻线路上存在A到B和B到A的双向信号传输</p><h1 id="相关寄存器"><a href="#相关寄存器" class="headerlink" title="相关寄存器"></a><center>相关寄存器</center></h1><h2 id="SCON"><a href="#SCON" class="headerlink" title="SCON"></a><center>SCON</center></h2><p>工作模式：01（8位UART波特率可变）其他不用为0</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406131001458.png" alt="SCON详细1" style="zoom: 67%;"><p>REN &#x3D; 1，接收信息，一开始发送中断标志位、接收中断标志位置0</p><p>TB8：发送校验位，RB8：接收校验位，TI：发送中断，RI：接收中断</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406131001199.png" alt="SCON详细2" style="zoom: 67%;"><p>则SCON &#x3D; 0x50</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406131002775.png" alt="SCON详细3" style="zoom: 67%;"><h2 id="PCON"><a href="#PCON" class="headerlink" title="PCON"></a><center>PCON</center></h2><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406131029450.png" alt="PCON解释图" style="zoom:67%;"><h2 id="TMOD"><a href="#TMOD" class="headerlink" title="TMOD"></a><center>TMOD</center></h2><p>模式(M1、M0)：这里选10（8位自动重装载定时器），其他在定时器有讲解</p><p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202404131536016.png" alt="TMOD解释图"></p><h2 id="SBUF"><a href="#SBUF" class="headerlink" title="SBUF"></a><center>SBUF</center></h2><p>接收和发送的数据都存在SBUF</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406131633290.png" alt="SBUF图解" style="zoom: 67%;"><h2 id="IE"><a href="#IE" class="headerlink" title="IE"></a><center>IE</center></h2><p>中断允许寄存器</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202404121351544.png" alt="允许寄存器分析" style="zoom:67%;"><h1 id="中断处理函数"><a href="#中断处理函数" class="headerlink" title="中断处理函数"></a><center>中断处理函数</center></h1><table><thead><tr><th>中断源</th><th>中断处理函数</th></tr></thead><tbody><tr><td>UART</td><td>UART_Routine(void)         interrupt 4</td></tr></tbody></table><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>为何需要使用定时器观看链接讲解(9.34)：<a href="https://www.bilibili.com/video/BV1Bg4y1M7vi/?spm_id_from=333.788&vd_source=1c838941386ee32c4501615c317f75e0">波特率发生器</a></p><h2 id="main-c"><a href="#main-c" class="headerlink" title="main.c"></a>main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span><span class="comment">//声明头文件，可在此文件使用头文件声明的函数、变量等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Uart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">uchar recv;<span class="comment">//全局变量用于接收数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">UART_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay1000ms();</span><br><span class="line">UART_send_str(<span class="string">&quot;i am xingzai&quot;</span>);<span class="comment">//发送字符</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//串口中断处理函数</span></span><br><span class="line">UART_Routine(<span class="type">void</span>)         interrupt <span class="number">4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == RI)</span><br><span class="line">&#123;</span><br><span class="line">RI = <span class="number">0</span>;<span class="comment">//接收中断请求标志位软件复位</span></span><br><span class="line">recv = SBUF;<span class="comment">//接收数据赋值给变量</span></span><br><span class="line"><span class="keyword">switch</span>(recv)</span><br><span class="line">&#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0x1</span>: LED1 = <span class="number">0</span>;<span class="keyword">break</span>;   </span><br><span class="line">           <span class="keyword">case</span> <span class="number">0x2</span>: LED2 = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0x3</span>: LED3 = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0x4</span>: LED4 = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0x5</span>: P1  |= <span class="number">0x0F</span>;<span class="keyword">break</span>;<span class="comment">//这里采用或等于，目的不让P1.6蜂鸣器为0，保留高位原数据</span></span><br><span class="line">           <span class="keyword">case</span> <span class="number">0x6</span>: BEEP = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0x7</span>: BEEP = <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0x8</span>: JDQ1 = <span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line">           <span class="keyword">case</span> <span class="number">0x9</span>: JDQ1 = <span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="delay-c"><a href="#delay-c" class="headerlink" title="delay.c"></a>delay.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span><span class="comment">//声明对应头文件，用于声明里面此文件函数、变量等</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="comment">//延时函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span><span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">uchar data i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">8</span>;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">243</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">&#125; <span class="keyword">while</span> (--j);</span><br><span class="line">&#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="delay-h"><a href="#delay-h" class="headerlink" title="delay.h"></a>delay.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//头文件固定格式，防止头文件重复包含</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H__</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="Uart-c"><a href="#Uart-c" class="headerlink" title="Uart.c"></a>Uart.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;Uart.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Init</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//配置相关寄存器</span></span><br><span class="line">SCON = <span class="number">0x50</span>;<span class="comment">//配置串口寄存器</span></span><br><span class="line">PCON=<span class="number">0x00</span>;</span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//配置时间寄存器定时器1</span></span><br><span class="line"><span class="comment">//定时器初值</span></span><br><span class="line">TH1 = <span class="number">0xFD</span>;</span><br><span class="line">TL1 = <span class="number">0xFD</span>;</span><br><span class="line">EA = <span class="number">1</span>;<span class="comment">//打开中断总允许位</span></span><br><span class="line">ES = <span class="number">1</span>;<span class="comment">//打开串口中断允许位</span></span><br><span class="line">TR1 = <span class="number">1</span>;<span class="comment">//打开定时器1运行控制位</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符发送函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_send_char</span><span class="params">(uchar send_char)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将字符赋值给数据缓存寄存器</span></span><br><span class="line">SBUF = send_char;</span><br><span class="line"><span class="keyword">while</span>(!TI);<span class="comment">//发送时为0，发送完触发发送中断时为1，为1时则数据发送完</span></span><br><span class="line">TI = <span class="number">0</span>;<span class="comment">//发送中断请求标志位软件复位</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//接收传过来的字符串</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_send_str</span><span class="params">(uchar *send_str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断字符到最后&#x27;\0&#x27;则停止发送</span></span><br><span class="line"><span class="keyword">while</span>(*send_str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">UART_send_char(*send_str++);<span class="comment">//将字符逐个传给这个函数发送</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Uart-h"><a href="#Uart-h" class="headerlink" title="Uart.h"></a>Uart.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __UART_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __UART_H__</span></span><br><span class="line"><span class="comment">//因为main.c中已经声明了Uart.h，在Uart.h声明了main.h则main.c中也可以使用mian.h</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Init</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_send_char</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> send_char)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_send_str</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *send_str)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="main-h"><a href="#main-h" class="headerlink" title="main.h"></a>main.h</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MAIN_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> uchar;<span class="comment">//给unsigned char取别名uchar</span></span><br><span class="line"><span class="comment">//定义对应元器件引脚</span></span><br><span class="line">sbit LED1 = P1^<span class="number">0</span>;</span><br><span class="line">sbit LED2 = P1^<span class="number">1</span>;</span><br><span class="line">sbit LED3 = P1^<span class="number">2</span>;</span><br><span class="line">sbit LED4 = P1^<span class="number">3</span>;</span><br><span class="line">sbit BEEP = P1^<span class="number">6</span>;</span><br><span class="line">sbit JDQ1 = P1^<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="回环"><a href="#回环" class="headerlink" title="回环"></a>回环</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> recv;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> send_buf[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">sbit LED1 = P1^<span class="number">0</span>;</span><br><span class="line">sbit LED2 = P1^<span class="number">1</span>;</span><br><span class="line">sbit LED3 = P1^<span class="number">2</span>;</span><br><span class="line">sbit LED4 = P1^<span class="number">3</span>;</span><br><span class="line">sbit BEEP = P1^<span class="number">6</span>;</span><br><span class="line">sbit JDQ1 = P1^<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span>    <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> data i, j, k;</span><br><span class="line"> </span><br><span class="line">  _nop_();</span><br><span class="line">  i = <span class="number">8</span>;</span><br><span class="line">  j = <span class="number">1</span>;</span><br><span class="line">  k = <span class="number">243</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">while</span> (--k);</span><br><span class="line">     &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">  &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_send_byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> send_byte)</span></span><br><span class="line">&#123;</span><br><span class="line">SBUF = send_byte;</span><br><span class="line"><span class="keyword">while</span>(!TI);</span><br><span class="line">TI=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_send_str</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *send_str)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(*send_str != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">UART_send_byte(*send_str++);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">SCON = <span class="number">0x50</span>;</span><br><span class="line">PCON=<span class="number">0x00</span>;</span><br><span class="line">TMOD |= <span class="number">0x20</span>;</span><br><span class="line">TH1 = <span class="number">0xFD</span>;</span><br><span class="line">TL1 = <span class="number">0xFD</span>;</span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line">ES = <span class="number">1</span>;</span><br><span class="line">TR1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">Delay1000ms();</span><br><span class="line"><span class="comment">//UART_send_str(&quot;i am wfeng!\r\n&quot;);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">UART_Routine(<span class="type">void</span>)    interrupt <span class="number">4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == RI) <span class="comment">//if(RI)</span></span><br><span class="line">&#123;</span><br><span class="line">RI=<span class="number">0</span>;</span><br><span class="line">recv = SBUF;</span><br><span class="line">SBUF = recv;</span><br><span class="line"><span class="keyword">while</span>(!TI);</span><br><span class="line">TI=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="继电器"><a href="#继电器" class="headerlink" title="继电器"></a><center>继电器</center></h1><p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406191552254.gif" alt="继电器动态原理图"></p><p>继电器模块的基本工作原理：</p><p>电磁线圈： 继电器内部包含一个电磁线圈，通常由绕制在绝缘芯片上的细导线组成。当通过线圈通电时，产生电磁场。</p><p>磁性吸引： 电磁场会使继电器中的铁芯（或磁性材料）受到磁性吸引，导致铁芯在电磁力的作用下移动。</p><p>触点操作： 铁芯的移动会导致机械部分的运动，最终使触点（开关）发生动作。继电器通常有常开（Normally Open，NO）和常闭（Normally Closed，NC）两组触点。</p><p>常开触点： 在继电器未通电时处于闭合状态，当电磁线圈通电时，触点打开。</p><p>常闭触点： 在继电器未通电时处于打开状态，当电磁线圈通电时，触点闭合。</p><p>电气隔离： 继电器的主要作用之一是提供电气隔离。通过电磁原理，可以在控制信号与被控制电路之间提供隔离，从而使得不同电路之间的电流不会相互影响。继电器模块常用于控制高电流或高电压的电路。</p><h1 id="ESP8266"><a href="#ESP8266" class="headerlink" title="ESP8266"></a><center>ESP8266</center></h1><p>AP模式：无线接入点，它是一个无线网络的中心节点，可以看成是一个服务器。它作为一个网络的中心节点，提供无线接入服务，其他的无线设备允许接入该节点，所有接入该节点设备的无线信号数据都要通过它才能进行交换和互相访问。一般的无线路由器、网关、热点就是工作在AP模式下，AP节点和AP节点之间允许相互连接。</p><p>STA模式：无线网络中的一个终端站点设备，可以看成是一个客户端，一般来说，处在STA模式下的设备本身不接受无线的接入，该设备连接到AP节点进行网络访问，STA模式下的设备之间的通信可以通过AP进行转发实现</p><h2 id="AT指令"><a href="#AT指令" class="headerlink" title="AT指令"></a><center>AT指令</center></h2><p>可在官网寻找对应的指令集：<a href="https://docs.ai-thinker.com/esp8266/docs">安信可科技</a></p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">配置 WiFi 模式：AT+CWMODE=3//模式3：STA+AP</span><br><span class="line">连接路由器：AT+CWJAP=&quot;wfeng&quot;,&quot;wf05430543&quot;</span><br><span class="line">查询 ESP8266的IP 地址： AT+CIFSR</span><br><span class="line">//PC端使用网络调试工具，建⽴一个 TCP 服务器器</span><br><span class="line">ESP8266 作为Client 连接到服务器：AT+CIPSTART=&quot;TCP&quot;,&quot;192.168.31.118&quot;,8090</span><br><span class="line">发送数据：AT+CIPSEND=4</span><br></pre></td></tr></table></figure><h2 id="代码编写-1"><a href="#代码编写-1" class="headerlink" title="代码编写"></a><center>代码编写</center></h2><p>电脑当服务端，单片机当客户端，电脑发指令控制单片机(接收)，单片机发送字符给电脑</p><h3 id="main-c-1"><a href="#main-c-1" class="headerlink" title="main.c"></a>main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;define.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;send.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;delay.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">define_bl();</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">send_str(<span class="string">&quot;AT+CWMODE=3\r\n&quot;</span>);<span class="comment">//发送AT指令配置ESP8266模块，选择模式3</span></span><br><span class="line">Delay1000ms();</span><br><span class="line">&#125;<span class="keyword">while</span>(Esp_Ok_flag);</span><br><span class="line"></span><br><span class="line">Esp_Ok_flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">send_str(<span class="string">&quot;AT+CWJAP=\&quot;qiji\&quot;,\&quot;12345678\&quot;\r\n&quot;</span>);<span class="comment">//连接WiFi</span></span><br><span class="line">Delay1000ms();</span><br><span class="line">&#125;<span class="keyword">while</span>(Esp_Ok_flag);</span><br><span class="line"></span><br><span class="line">Esp_Ok_flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">send_str(<span class="string">&quot;AT+CIPSTART=\&quot;TCP\&quot;,\&quot;192.168.43.10\&quot;,8085\r\n&quot;</span>);<span class="comment">//连接服务器</span></span><br><span class="line">Delay1000ms();</span><br><span class="line">&#125;<span class="keyword">while</span>(Esp_Ok_flag);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">send_str(<span class="string">&quot;AT+CIPSEND=4\r\n&quot;</span>);<span class="comment">//发送4个字节数据</span></span><br><span class="line">Delay1000ms();</span><br><span class="line">&#125;<span class="keyword">while</span>(Esp_Ok_flag);</span><br><span class="line"></span><br><span class="line">send_str(<span class="string">&quot;xinz\r\n&quot;</span>);<span class="comment">//发送的数据</span></span><br><span class="line">Esp_Ok_flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">Delay1000ms();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="define-c"><a href="#define-c" class="headerlink" title="define.c"></a>define.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;define.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> Esp_Ok_flag = <span class="number">1</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">define_bl</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">SCON = <span class="number">0x50</span>;</span><br><span class="line">PCON = <span class="number">0x00</span>;</span><br><span class="line">TMOD = <span class="number">0x20</span>;</span><br><span class="line">TH1 = <span class="number">0xFD</span>;</span><br><span class="line">TL1 = <span class="number">0xFD</span>;</span><br><span class="line">TR1 = <span class="number">1</span>;</span><br><span class="line">ES = <span class="number">1</span>;</span><br><span class="line">EA = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="define-h"><a href="#define-h" class="headerlink" title="define.h"></a>define.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;reg52.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">define_bl</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">char</span> uchar;<span class="comment">//取别名</span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">int</span> Esp_Ok_flag;<span class="comment">//定义一个全局变量方便不同.c文件使用</span></span><br><span class="line"><span class="comment">//定义对应元器件引脚</span></span><br><span class="line">sbit LED1 = P1^<span class="number">0</span>;</span><br><span class="line">sbit LED2 = P1^<span class="number">1</span>;</span><br><span class="line">sbit LED3 = P1^<span class="number">2</span>;</span><br><span class="line">sbit LED4 = P1^<span class="number">3</span>;</span><br><span class="line">sbit BEEP = P1^<span class="number">6</span>;</span><br><span class="line">sbit JDQ1 = P1^<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="send-c"><a href="#send-c" class="headerlink" title="send.c"></a>send.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;send.h&gt;</span></span></span><br><span class="line"><span class="comment">//接收需要发送的字符</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">send_str</span><span class="params">(uchar *send_s)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">while</span>(*send_s != <span class="string">&#x27;\0&#x27;</span>)<span class="comment">//当字符串!=&#x27;\0&#x27;时把字符一个个传给send_char函数发送</span></span><br><span class="line">&#123;</span><br><span class="line">send_char(*send_s++);<span class="comment">//将每个字符逐一发送</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">send_char</span><span class="params">(uchar send_c)</span></span><br><span class="line">&#123;</span><br><span class="line">SBUF = send_c;<span class="comment">//将单个字符赋值给SBUF则发送</span></span><br><span class="line"><span class="keyword">while</span>(!TI);<span class="comment">//当TI为0，则发送未完成，当发送完成为1，取反为0跳出循环</span></span><br><span class="line">TI = <span class="number">0</span>;<span class="comment">//复位，发送请求中断标志位为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="send-h"><a href="#send-h" class="headerlink" title="send.h"></a>send.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __SEND_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SEND_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;define.h&quot;</span></span></span><br><span class="line"><span class="comment">//声明两个发送函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">send_str</span><span class="params">(uchar *send_s)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">send_char</span><span class="params">(uchar send_c)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="receive-c"><a href="#receive-c" class="headerlink" title="receive.c"></a>receive.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;define.h&gt;</span></span></span><br><span class="line">uchar Recv_Buf[<span class="number">20</span>];</span><br><span class="line"><span class="type">char</span> recv;</span><br><span class="line"><span class="comment">//串口中断函数</span></span><br><span class="line">UART_Routine(<span class="type">void</span>) interrupt <span class="number">4</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> i = <span class="number">0</span>;  <span class="comment">//static：全局使用不重新</span></span><br><span class="line"><span class="type">char</span> Recv;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> == RI) <span class="comment">//if(RI)</span></span><br><span class="line">&#123;</span><br><span class="line">RI=<span class="number">0</span>;</span><br><span class="line">Recv=SBUF;</span><br><span class="line"><span class="keyword">if</span>(Recv == <span class="string">&#x27;O&#x27;</span>|| Recv == <span class="string">&#x27;+&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">Recv_Buf[i] = Recv;</span><br><span class="line">Recv_Buf[i+<span class="number">1</span>] = Recv;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">i++;</span><br><span class="line">Recv_Buf[i] = Recv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(Recv_Buf[<span class="number">0</span>] == <span class="string">&#x27;O&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">1</span>] == <span class="string">&#x27;K&#x27;</span>)<span class="comment">//收到回复OK则说明指令执行成功</span></span><br><span class="line">&#123;</span><br><span class="line">Esp_Ok_flag = <span class="number">0</span>;<span class="comment">//让标志为0跳出循环，执行下一个指令</span></span><br><span class="line">i = <span class="number">0</span>;<span class="comment">//重置数组指向位数</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//接收到服务器，接收到的指令会以　+IPD　开头，以及第七个是接收的指令开始，判断接收到哪个指令执行下方的操作</span></span><br><span class="line"><span class="keyword">if</span>(Recv_Buf[<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">1</span>] == <span class="string">&#x27;I&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">2</span>] == <span class="string">&#x27;P&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">3</span>] == <span class="string">&#x27;D&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;L&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;1&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                LED1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;L&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;1&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                LED1 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;L&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;2&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                LED2 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;L&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;2&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                LED2 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;L&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;3&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                LED3 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;L&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;3&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                LED3 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;L&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;4&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                LED4 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;L&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;4&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                LED4 = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;B&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;P&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                BEEP = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;B&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;E&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;P&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                BEEP = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;J&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;Q&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;1&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">                JDQ1 = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(Recv_Buf[<span class="number">7</span>] == <span class="string">&#x27;J&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">8</span>] == <span class="string">&#x27;D&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">9</span>] == <span class="string">&#x27;Q&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">10</span>] == <span class="string">&#x27;1&#x27;</span>&amp;&amp;Recv_Buf[<span class="number">11</span>] == <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">                JDQ1 = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">18</span>)</span><br><span class="line">i=<span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delay-c-1"><a href="#delay-c-1" class="headerlink" title="delay.c"></a>delay.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;delay.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;intrins.h&gt;</span></span></span><br><span class="line"><span class="comment">//延时函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span>    <span class="comment">//@11.0592MHz</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> data i, j, k;</span><br><span class="line"> </span><br><span class="line">  _nop_();</span><br><span class="line">  i = <span class="number">8</span>;</span><br><span class="line">  j = <span class="number">1</span>;</span><br><span class="line">  k = <span class="number">243</span>;</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">  &#123;</span><br><span class="line">     <span class="keyword">do</span></span><br><span class="line">     &#123;</span><br><span class="line">       <span class="keyword">while</span> (--k);</span><br><span class="line">     &#125; <span class="keyword">while</span> (--j);</span><br><span class="line">  &#125; <span class="keyword">while</span> (--i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="delay-h-1"><a href="#delay-h-1" class="headerlink" title="delay.h"></a>delay.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H__</span></span><br><span class="line"><span class="comment">//声明延时函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1000ms</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;串口的介绍&quot;&gt;&lt;a href=&quot;#串口的介绍&quot; class=&quot;headerlink&quot; title=&quot;串口的介绍&quot;&gt;&lt;/a&gt;&lt;center&gt;串口的介绍&lt;/center&gt;&lt;/h1&gt;&lt;p&gt;UART（通用异步收发器）是一种双向、串行、异步的通信总线，仅用一根数据接收线（R</summary>
      
    
    
    
    <category term="51单片机" scheme="http://example.com/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="51单片机" scheme="http://example.com/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>定时器/计数器</title>
    <link href="http://example.com/post/2e5216dd.html"/>
    <id>http://example.com/post/2e5216dd.html</id>
    <published>2024-04-12T02:13:46.000Z</published>
    <updated>2024-08-03T08:00:49.068Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a><center>原理</center></h1><ol><li>时钟源：定时器是内部时钟源（晶振），计数器是外部</li><li>计时长度：对应TH  TL计数器初值寄存器(高八位,低八位)</li><li>对应的中断触发函数</li></ol><table><thead><tr><th>中断源</th><th>中断处理函数</th></tr></thead><tbody><tr><td>Timer0</td><td>Timer0_Routine(void)      interrupt 1</td></tr><tr><td>Timer1</td><td>Timer1_Routine(void)       interrupt 3</td></tr><tr><td>Timer2</td><td>Timer2_Routine(void)      interrupt 5</td></tr></tbody></table><h1 id="相关寄存器"><a href="#相关寄存器" class="headerlink" title="相关寄存器"></a><center>相关寄存器</center></h1><h2 id="TCON：定时器控制寄存器"><a href="#TCON：定时器控制寄存器" class="headerlink" title="TCON：定时器控制寄存器"></a><center>TCON：定时器控制寄存器</center></h2><p>只需用到：TF0、TF1、TR0、TR1</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202404131443931.png" alt="定时器/计数器" style="zoom: 50%;"><p>定时器&#x2F;计数器运行控制位(代码)：TR0、TR1</p><p>中断触发标志位(内部)：TF0、TF1</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202404121532268.png" alt="定时器中断分析" style="zoom: 50%;"><h2 id="TMOD：定时器模式寄存器"><a href="#TMOD：定时器模式寄存器" class="headerlink" title="TMOD：定时器模式寄存器"></a><center>TMOD：定时器模式寄存器</center></h2><p>两个定时器&#x2F;计数器（任选一个即可）：<code>T0(TL0\TH0)</code>、<code>T1(TL1\TH1)</code></p><p>工作模式：</p><ul><li>模式0（13位定时器&#x2F;计数器）</li><li>模式1（16位定时器&#x2F;计数器）</li><li>模式2（8位自动重装初值）</li><li>模式3（两个8位定时器&#x2F;计数器）</li></ul><p>我们学的是定时器，计数器是外部计数，则0.7、0.3地址是计数器的置0，C&#x2F;T：置0为定时器，模式（M1、M0）这里我们选01（16位定时器，不自动重装初值）</p><p>如果不会自动重装载寄存器（不会自动赋初值）则要触发中断处理函数时重新手动赋初值</p><p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202404131536016.png" alt="工作模式"></p><h2 id="定时器计算初值"><a href="#定时器计算初值" class="headerlink" title="定时器计算初值"></a><center>定时器计算初值</center></h2><p>需要定时的时间带入公式，求出x</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202406101704253.png" alt="初值计算方式" style="zoom: 50%;"><h2 id="中断允许寄存器"><a href="#中断允许寄存器" class="headerlink" title="中断允许寄存器"></a><center>中断允许寄存器</center></h2><p>&ensp;&ensp;&ensp;&ensp;总中断允许控制位：EA</p><p>&ensp;&ensp;&ensp;&ensp;ET0：定时&#x2F;计数器T0的溢出中断允许位，ET1：定时&#x2F;计数器T1的溢出中断允许位，ET2：定时&#x2F;计数器T2的溢出中断允许位</p><p>&ensp;&ensp;&ensp;&ensp;需要外部、定时器、串口那个则赋值那个为1</p><img src="https://cdn.d3iiz.top/gh/xinzai-x/MyPic/img/202404121351544.png" alt="允许寄存器分析" style="zoom:67%;"><h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a><center>代码编写</center></h1><p>每1s翻转LED灯状态</p><ul><li>模式选择（定时器0；工作模式1）</li><li>定时器初值（10ms）</li><li>打开定时器T0运行控制位</li><li>打开定时器0中断允许位</li><li>打开总中断允许控制位</li><li>编写中断服务函数</li><li>当溢出时，触发中断，执行中断函数，执行完之后，回到主函数继续执行</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;reg52.h&gt;</span></span></span><br><span class="line">sbit LED1 = P1^<span class="number">0</span>;<span class="comment">//定义LED灯</span></span><br><span class="line"><span class="type">int</span> count;<span class="comment">//由于51单片机没办法定时1s，只能通过计数达到效果</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">TMOD = <span class="number">0x01</span>;<span class="comment">//配置定时器工作模式：使用定时器0，使用16位定时器模式(不自动重装初值)</span></span><br><span class="line"><span class="comment">//定时10ms，给寄存器赋初值</span></span><br><span class="line">TL0 = <span class="number">0x00</span>;</span><br><span class="line">TH0 = <span class="number">0xDC</span>;</span><br><span class="line">TR0 = <span class="number">1</span>;<span class="comment">//打开定时器T0运行控制位</span></span><br><span class="line">ET0 = <span class="number">1</span>;<span class="comment">//打开定时器0中断允许位</span></span><br><span class="line">EA = <span class="number">1</span>;<span class="comment">//打开总中断允许控制位</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//大于99时则取反LED状态</span></span><br><span class="line"><span class="keyword">if</span>(count &gt; <span class="number">99</span>)</span><br><span class="line">&#123;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line">LED1 = ~LED1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定时中断处理函数</span></span><br><span class="line">Timer0_Routine(<span class="type">void</span>)      interrupt <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//触发中断函数，需要重新给定时器赋初值</span></span><br><span class="line">TL0 = <span class="number">0x00</span>;</span><br><span class="line">TH0 = <span class="number">0xDC</span>;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;&lt;center&gt;原理&lt;/center&gt;&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;时钟源：定时器是内部时钟源（晶振），计数器是外部&lt;/li&gt;
&lt;li&gt;计时长度：对应TH  TL</summary>
      
    
    
    
    <category term="51单片机" scheme="http://example.com/categories/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    
    <category term="51单片机" scheme="http://example.com/tags/51%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
  </entry>
  
</feed>
